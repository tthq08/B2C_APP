<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台购物车模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017 深圳市俊网网络有限公司 [ http://www.junnet.net ]
// +----------------------------------------------------------------------
// | 官方网站：http://www.junnet.net
// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------


namespace app\shop\home;

use app\shop\model\ShopCart;
use app\shop\api\Goods;
use app\shop\api\OrderPay;
use think\Db;

class Cart extends HomeBase
{
    protected $login_id;
    protected $_DB;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_DB = new ShopCart();

        //查看当前用户是否登录，如果没有登录取当前的session_id
        $this->login_id = session('user.id');
        if (empty($this->login_id) || $this->login_id == '') {
            $this->login_id = $this->session_id;
        }
    }

    public function cart()
    {
        $login_id = $this->login_id;
        return $this->fetch();
    }

    public function ajaxCartList()
    {
        if (request()->post()) {
            $postData = request()->post();
            // 修改所有选中为取消选中
            $all_cart = implode(',', array_keys($postData['goods_num']));
            $this->_DB->where('id in(' . $all_cart . ')')->update(['selected' => 0]);
            if (!empty($postData['cart_select'])) {
                //修改选中的为选中
                $selected = implode(',', array_keys($postData['cart_select']));
                $this->_DB->where('id in(' . $selected . ')')->update(['selected' => 1]);
            }
            //修改所有商品库存
            foreach ($postData['goods_num'] as $key => $value) {
                $this->_DB->where('id', $key)->update(['goods_num' => $value]);
            }
        }
        //通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id='$login_id' OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        $cartList = [];
        $total_price = 0;
        $cart_num = 0;
        $selected_num = 0;
        //获取当前店铺ID的信息
        $cart = Db::name('shop_cart')->where($where)->where('status', 1)->select();
        $cartList['check_num'] = Db::name('shop_cart')->where($where)->where(['status' => 1, 'selected' => 1])->count('id');
        $selected_num += $cartList['check_num'];
        foreach ($cart as $item) {
            if ($item['selected'] == 1) {
                $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_key'],false,$item['goods_num']);
            }
            $cart_num += $item['goods_num'];
        }
        $cartList = $cart;

        $this->assign('cartList', $cartList);
        $this->assign('total_price', $total_price);
        $this->assign('cart_num', $cart_num);
        $this->assign('selected_num', $selected_num);
        $recomm_goods = Db::name('shop_goods')->where(['trash' => 0, 'is_comm' => 1, 'is_audit' => 1])->order('id DESC')->limit(6)->select();
        $this->assign('recomm_goods', $recomm_goods);
        return $this->fetch();
    }


    public function cart2()
    {
        // 检测用户是否登录
        if (empty(session('user.id'))) {
            cookie('login_referer',request()->url());
            $this->redirect( url('member/login/index') );
        }
        if ( empty(request()->param('cart')) ){
            $cartIdArr = Db::name('shop_cart')->where('user_id', $this->login_id)->where('status', 1)->where('selected', 1)->column('id');
        }else{
            if( mb_strlen(request()->param('cart')) == mb_strlen((int)request()->param('cart')) ){
                $cart = Db::name('shop_cart')->where('id', request()->param('cart'))->where('status', 1)->where('selected', 1)->find();
                if( empty($cart) || $cart['user_id'] != session('user.id') ){
                    $this->redirect('shop/Cart/cart');
                }
                $cartIdArr[] = $cart['id'];
            }else{
                $this->redirect('shop/Cart/cart');
            }
        }
        if (count($cartIdArr) == 0) {
            $this->redirect('shop/Cart/cart');
        }
        // 实例化计算类
        $orderPay = new OrderPay();
        // 设置用户
        $orderPay->user = session('user.id');
        // 放入订单
        $orderPay->cartList = $cartIdArr;
        $orderPayInfo = json_decode($orderPay->get(), 1);
        // 获取biz券
        $bizCouponArray = api('shop', 'Coupon', 'userBizCoupons', [session('user.id')]);
        $bizCouponList = [];
        foreach ($bizCouponArray as $key => $coupon) {
            $bizCouponList[$coupon['id']] = $coupon;
            $bizCouponList[$coupon['id']]['type'] = 2;
        }

        // 店铺优惠券
        $couponList = $orderPay->couponList;

        $shopOrder = $orderPayInfo['order_list'];
        $shopOrder['payable_price'] = $shopOrder['payable_price'] + $shopOrder['postage'];
        $cartList['list'] = $orderPayInfo['goods_list'];


        foreach ($couponList as $k => $coupon) {
            if ($coupon['coupon_level'] == 1) {
                $couponList[$k]['type'] = 2;
                $couponList[$k]['quota_text'] = $coupon['quota'] . '元';
            } else {
                $couponList[$k]['type'] = 1;
                if ($coupon['discount_type'] == 2) {
                    $couponList[$k]['quota_text'] = $coupon['quota'] . '元';
                } elseif ($coupon['discount_type'] == 1) {
                    $couponList[$k]['quota_text'] = ($coupon['quota'] / 10) . '折';
                }
            }
        }

        $this->assign('couponList', $couponList);
        $this->assign('cartList', $cartList);
        $this->assign('shopOrder', $shopOrder);
        $this->assign('payable_price', $orderPayInfo['order_pay']['payable_price'] + $orderPayInfo['order_pay']['postage']);
        $this->assign('postage', $orderPayInfo['order_pay']['postage']);
        $this->assign('total_price', $orderPayInfo['order_pay']['total_price']);
        $this->assign('discount_price', $orderPayInfo['order_pay']['discount_price']);
        return $this->fetch();
    }


    public function cart3()
    {
        //检测用户是否登录
        if (empty(session('user.id'))) {
            $this->error(lang('cart_please_login'));
        }
        //检测是否选择收货地址
        if (request()->post('act') == 'submit_order') {
            if (request()->post('address_id') == '') {
                $this->error(lang('cart_select_address'));
            }
        }

        $cartArr = Db::name('shop_cart')->where('user_id', $this->login_id)->where('status', 1)->where('selected', 1)->column('id');
        if( empty($cartArr) ){
            $this->error('当前购物车内没有商品!');
        }
        // 实例化计算类
        $orderPay = new OrderPay();
        // 设置用户
        $orderPay->user = session('user.id');
        // 放入订单
        $orderPay->cartList = $cartArr;
        // 获取数据
        if (request()->post('act') == 'submit_order') {
            // 放入收货地址id
            $orderPay->address_id = request()->post('address_id');
            $orderPayData = $orderPay->insert();
        } else {
            $orderPayData = $orderPay->get();
        }
        $orderPayData = json_decode($orderPayData, 1);

        $data['order_id'] = empty($orderPayData['serial_id']) ? '' : $orderPayData['serial_id'];
        $data['payable_price'] = priceFormat($orderPayData['order_pay']['payable_price'], 1);
        $data['total_price'] = priceFormat($orderPayData['order_pay']['total_price'], 1);
        $data['discount_price'] = priceFormat($orderPayData['order_pay']['discount_price'], 1);
        $data['coupon_price'] = priceFormat($orderPayData['order_pay']['coupon_price'], 1);

        $this->success($data);
    }


    public function cart4()
    {
        //解析下过来的ID
        if (empty(request()->param('serial_id')) && !empty(request()->param('order_id'))) {
            //保存信息到order_pay表
            $order_id = request()->param('order_id');
            //获取订单信息
            $orderInfo = Db::name('shop_order')->where(['id' => $order_id, 'user_id' => session('user.id')])->field('id,total_price,user_id,payable_price,discount_price,coupon_price,postage,order_prom_price,balance_price,points_price,change_mny,is_pay')->find();
            if ($orderInfo == '') {
                $this->error(lang('cart_order_failed'));
            }
            //检测订单是否存在
            if ($orderInfo['is_pay'] == 1) {
                $this->redirect(U('shop/user/order_detail', ['id' => $order_id]));
            }

            $serialData = $orderInfo;
            $serialData['order'] = $serialData['id'];
            unset($serialData['id']);
            $serialData['serial_sn'] = createSerialSn();
            $serialData['add_time'] = date('Y-m-d H:i:s', NOW_TIME);
            $serialData['is_pay'] = 0;
            $serialData['last_pay_time'] = date('Y-m-d H:i:s',request()->time()+3600*24);
            try {
                $save = Db::name('shop_order_pay')->insertGetId($serialData);
            } catch (\Exception $e) {
                $this->error($e->getMessage());
            }
            $serialData['id'] = $save;

        } else {
            $id = request()->param('serial_id');
            if ($id == '') {
                $this->error(lang('cart_order_failed'));
            }
            $serialData = Db::name('shop_order_pay')->where(['id' => $id, 'user_id' => session('user.id')])->find();
        }
        if ($serialData['is_pay'] == 1) {
            $this->redirect(U('shop/user/order_detail', ['id' => intval($serialData['order'])]));
        }
        //获取流水ID
        if ($serialData == '') {
            $this->error('订单错误');
        }
        $orderIdArr = explode(',', $serialData['order']);
        $orderArr = [];
        foreach ($orderIdArr as $item => $value) {
            //获取订单信息
            $orderArr[$value] = Db::name('shop_order')->where(['id' => $value, 'user_id' => session('user.id')])->field('id,order_sn,total_price,payable_price,discount_price,balance_price,points_price,coupon_price,last_pay_time')->find();
        }
        $payList = getPayList();
        $this->assign('serial', $serialData);
        $this->assign('order', $orderArr);
        $this->assign('payList', $payList);
        $client = 'phone';
        if (strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') !== false) {
            $client = 'wechat';
            $this->assign('time_now', NOW_TIME);
        }
        $this->assign('client', $client);
        return $this->fetch();
    }

    /**
     * ajaxDelCart
     * 删除购物车商品
     * @param int cart_id 购物车ID
     */
    public function ajaxDelCart()
    {
        $cart_id = request()->param('ids');
        $cart_id = implode(',',explode(',',$cart_id));

        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        // 查看当前购物车是否存在
        $del = $this->_DB->where($where)->where('id in(' . $cart_id . ')')->delete();
        if ($del) {
            $this->success(lang('delete_success'));
        } else {
            $this->error(lang('delete_failed'));
        }
    }


    /**
     * 获取用户的收货地址
     * @return mixed
     */
    public function ajaxaddress()
    {
        //获取用户的收货地址
        $address_list = Db::name('user_address')->where('user_id', session('user.id'))->where('status', 1)->order('is_default desc')->select();
        foreach ($address_list as $key => $item) {
            $address_list[$key]['address'] = getAddressName($item['province']) . getAddressName($item['city']) . getAddressName($item['district']) . $item['address'];
        }
        $this->assign('address_list', $address_list);
        return $this->fetch('ajax_address');
    }


    // ajax添加商品进入购物车
    public function ajaxAddCart()
    {
        $user_id = session('user.id');
        $data = input('');
        $spec_key = isset($data['goods_spec']) ? $data['goods_spec'] : 0;

        if (is_array($spec_key)) {
            ksort($spec_key);
            $spec_key = implode('_', $spec_key);
        }
        if ($spec_key == 0) {
            $goods_specs = Db::name('shop_spec_price')->where('goods_id', $data['goods_id'])->find();
            if ($goods_specs) {
                return ['code' => '-1', 'msg' => '选择商品规格'];
            }
        }
        $spec = Db::name('shop_spec_price')->field('id,key_name,key_sign,price')->where(['goods_id' => $data['goods_id'], 'key_sign' => $spec_key])->find();

        $spec['key_name'] = getSpecNameFromKey($spec['key_sign']);
        $goods = Db::name('shop_goods')->where('id', $data['goods_id'])->field('id,title,market_price,shop_price,goods_sn')->find();
        //检测商品库存
        $spec_id = !empty($spec['id']) ? $spec['id'] : '';
        if (Goods::getStock($goods['id'], $spec_id) < $data['goods_num']) {
            $this->error('商品库存不足');
        }
        $promotion = Db::name('shop_promotion')->where('goods', $data['goods_id'])->where('start_time', '<= time', NOW_TIME)->where('end_time', '>= time', NOW_TIME)->find();

        if (empty(session('user.id'))) {
            $id = Db::name('shop_cart')->where(['session_id' => $this->session_id, 'goods' => $data['goods_id'], 'spec_key' => $spec_key])->value('id');
        } else {
            $id = Db::name('shop_cart')->where(['user_id' => session('user.id'), 'goods' => $data['goods_id'], 'spec_key' => $spec_key])->value('id');
        }

        // 如果同一人的同一物品已经在购物车中存在, 则增加该商品的数量
        if ($id) {
                $res = Db::name('shop_cart')->where('id', $id)->setInc('goods_num', $data['goods_num']);
        } else {
            $price_price = empty($spec['price']) ? compute()->promGoodsPrice($goods['id']) : $spec['price'];
            $sepc_id = empty($spec['id']) ? 0 : $spec['id'];
            $spec_text = empty($spec['key_name']) ? '' : $spec['key_name'];
            $dataCart = [
                'user_id' => empty($user_id) ? 0 : $user_id,
                'session_id' => $this->session_id,
                'goods' => $data['goods_id'],
                'goods_name' => $goods['title'],
                'market_price' => $goods['market_price'],
                'shop_price' => $price_price,
                'goods_num' => $data['goods_num'],
                'bar_code' => $goods['goods_sn'],
                'spec_id' => $sepc_id,
                'spec_key' => $spec_key,
                'spec_text' => $spec_text,
                'prom_type' => $promotion['p_type'],
                'prom_id' => $promotion['p_id'],
                'selected' => 1,
                'add_time' => date('Y-m-d H:i:s'),
            ];
            $id = Db::name('shop_cart')->insertGetId($dataCart);
        }

        if (empty(session('user.id'))) {
            $cart_nums = Db::name('shop_cart')->where('session_id', $this->session_id)->sum('goods_num');
        } else {
            $cart_nums = Db::name('shop_cart')->where('user_id', $user_id)->sum('goods_num');
        }

        if ($id !== false) {
            return ['code' => 1, 'msg' => lang('add_cart_success'), 'cart_nums' => $cart_nums,'data'=>['id'=>$id]];
            // $this->success(lang('add_cart_success'));
        } else {
            $this->error(lang('add_cart_failed'));
        }
    }


    /**
     * 立即购买按钮
     * @return mixed
     */
    public function buy()
    {
        $data = input('');
        // 创建session 信息
        session('payInfo', $data);
        $this->redirect('add_order');
    }

    /**
     * 直接加入订单
     * @return mixed
     */
    public function add_order()
    {
        if (empty(session('user.id'))) {
            return $this->error('请先登录');
        }
        if (empty(session('payInfo'))) {
            return $this->error('请选择需要购买的商品');
        }
        session('jump_ajax_address', U('shop/cart/add_order'));
        $data = session('payInfo');

        $spec_key = isset($data['goods_spec']) ? $data['goods_spec'] : 0;
        if ($spec_key == 0) {
            $goods_specs = Db::name('shop_spec_price')->where('goods_id', $data['goods_id'])->find();
            if ($goods_specs) {
                return ['code' => '-1', 'msg' => '选择商品规格'];
            }
        }
        $spec = Db::name('shop_spec_price')->field('id,key_name,key_sign,price')->where(['goods_id' => $data['goods_id'], 'key_sign' => $spec_key])->find();

        $spec['key_name'] = getSpecNameFromKey($spec['key_sign']);
        $goods = api('shop', 'goods', 'goodsInfo', [$data['goods_id'], 'id,cid,shop_id,title,market_price,shop_price,goods_sn,thumb']);

        // 检测商品库存
        $spec_id = !empty($spec['id']) ? $spec['id'] : '';
        if (Goods::getStock($goods['id'], $spec_id) < $data['goods_num']) {
            $this->error('商品库存不足');
        }

        //获取默认地址
        $address = Db::name('user_address')->where(['is_default' => 1, 'user_id' => session('user.id')])->find();
        if (empty($address)) {
            $address = Db::name('user_address')->where(['user_id' => session('user.id')])->find();
        }

        // 商品应付金额
        $goods_payable_price = api('shop', 'compute', 'promGoodsPrice', [$goods['id'], $spec_id],false,$data['goods_num']);

        //商品总金额
        $goods_total_price = api('shop', 'goods', 'totalPrice', [$goods['id'], $spec_id, $data['goods_num']]);

        // 商户订单总价
        $shopOrder['total_price'] = $goods_total_price;

        // 商户当前订单优惠的价格
        $shopOrder['discount_price'] = $shopOrder['total_price'] - $goods_payable_price;

        // 用户总积分
        $user_points = getTableValue('users', 'id=' . session('user.id'), 'pay_points');

        // 积分能抵扣的金额
        $shopOrder['use_point_money'] = api('shop', 'compute', 'pointsPrice', [$goods['id'], $user_points]) * $data['goods_num'];

        // 订单优惠金额
        $shopOrder['order_prom_price'] = api('shop', 'conpute', 'orderPrice', $goods_payable_price);

        // 计算邮费
        $shopOrder['postage'] = api('shop', 'compute', 'postage', $goods_payable_price);

        // 订单优惠后的价格
        $shopOrder['payable_price'] = $goods_payable_price - $shopOrder['order_prom_price'];
        $goods['goods_num'] = $data['goods_num'];

        if (request()->isAjax()) {
            if (input('act') == 'submit_order') {

                // 计算积分使用金额
                $goods_points_price = 0;
                // 使用积分
                $goods_points = 0;
                $shopOrder['points'] = 0;
                $shopOrder['points_price'] = 0;
                if (!empty(request()->post('points'))) {
                    $goods_points_price = api('shop', 'compute', 'pointsPrice', [$goods['id'], $goods_points]) * $data['goods_num'];
                    $goods_points += $goods_points_price * tb_config('web_point', 1, 1);
                    $shopOrder['points'] = $goods_points;
                    $shopOrder['points_price'] = $goods_points_price;
                    $goods_payable_price = $goods_payable_price - $goods_points_price;
                }

                // ======================= 订单商品部分 开始 ===================
                //商品总价
                $ordergoods['goods_id'] = $goods['id'];
                //规格ID
                $ordergoods['spec_id'] = $spec_id;
                $ordergoods['spec_key'] = $spec_key;
                if (!empty($spec_id)) {
                    $ordergoods['spec_title'] = getSpecNameFromKey($spec_key);
                    $stock = getTableValue('shop_spec_price', 'id=' . $spec_id, 'store_count');
                } else {
                    $ordergoods['spec_title'] = '';
                    $stock = getTableValue('shop_goods', 'id=' . $spec_id, 'stock');
                }

                if (empty($stock) || $stock < $data['goods_num']) {
                    return $this->error('您选择的商品:<br><b>' . $goods['title'] . '<br>【' . $spec['key_name'] . '】<br>库存不足！无法进行购买。');
                }
                // 商品名称
                $ordergoods['goods_name'] = $goods['title'];
                $ordergoods['shop_price'] = $goods['shop_price'];
                $ordergoods['total_price'] = $goods_total_price;
                // 商品优惠的价格
                $ordergoods['discount_price'] = $goods_total_price - $goods_payable_price;
                // 商品数量
                $ordergoods['goods_num'] = $data['goods_num'];
                // 应付金额
                $ordergoods['payable_price'] = $goods_payable_price;
                // 积分抵扣金额
                $ordergoods['points'] = $goods_points;
                $ordergoods['points_price'] = $goods_points_price;
                // 单个商品应付金额
                $ordergoods['pay_price'] = $goods_payable_price / $data['goods_num'];
                // 店铺ID
                $ordergoods['shop_id'] = $goods['shop_id'];

                // ============================== 订单商品部分 结束 ================================

                // ===================== 订单部分 开始===================================

                // 订单优惠的价格
                $shopOrder['order_prom_price'] = compute()->orderPrice($shopOrder['payable_price']);
                $shopOrder['payable_price'] = $shopOrder['payable_price'] - $shopOrder['order_prom_price'];

                //计算优惠券优惠的价格
                $coupon_id = 0;
                if (request()->post('coupon_id') !== '' || request()->post('couponCode') !== '') {
                    if (request()->post('couponCode') == '') {
                        $couponPrice = coupon()->obtainCoupon(request()->post('coupon_id'), session('user.id')) ? compute()->couponPrice($ordergoods['payable_price'], request()->post('coupon_id')) : 0;
                        $coupon_id = request()->post('coupon_id');
                    } else {
                        //使用优惠码，通过优惠码获取优惠ID
                        $coupon_id = Db::name('shop_coupon')->where('coupon_code', request()->post('couponCode'))->value('id');
                        $couponPrice = coupon()->obtainCoupon($coupon_id, session('user.id')) ? compute()->couponPrice($ordergoods['payable_price'], $coupon_id) : 0;
                    }
                    //临时注销
                    $shopOrder['coupon_price'] = 0;
                }

                // 创建订单号
                $shopOrder['order_sn'] = createOrderSn();
                // 获取地址信息
                $address = Db::name('user_address')->where('id', request()->post('address_id'))->field('consignee,mobile,zip,country,province,city,district,address')->find();
                $shopOrder['province'] = $address['province'];
                $shopOrder['city'] = $address['city'];
                $shopOrder['district'] = $address['district'];
                $shopOrder['address'] = getAddressName($address['country']) . getAddressName($address['province']) . getAddressName($address['city']) . getAddressName($address['district']) . $address['address'];

                $shopOrder['invoice_title'] = request()->post('invoice_title');
                $shopOrder['user_remark'] = request()->post('user_remark');
                //获取商户ID
                $shopOrder['cid'] = 0;//商户ID
                $shopOrder['shop_id'] = $goods['shop_id'];//店铺ID
                $shopOrder['consignee'] = $address['consignee'];//收货人
                $shopOrder['phone'] = $address['mobile'];//手机号码
                $shopOrder['zipcode'] = $address['zip'];//邮编
                $shopOrder['user_id'] = session('user.id');//用户ID
                $shopOrder['coupon_id'] = $coupon_id;
                $shopOrder['coupon_price'] = $couponPrice;//优惠券优惠的金额

                //计算分成金额
                $shopOrder['commission'] = 0;
                $shopOrder['add_time'] = date('Y:m:d H:i:s', NOW_TIME);

                // =============== 订单部分 结束 ==================================
                // 保存订单信息
                Db::startTrans();
                try {
                    unset($shopOrder['use_point_money']);

                    // 插入订单
                    $order_id = Db::name('shop_order')->insertGetId($shopOrder);
                    // 添加积分记录
                    if ($shopOrder['points'] > 0) {
                        api('member', 'Points', 'record', [session('user.id'), $shopOrder['points'], 6, $shopOrder['order_sn']]);
                    }

                    // 插入订单商品数据
                    $ordergoods['order_id'] = $order_id;
                    Db::name('shop_order_goods')->insert($ordergoods);
                    //保存订单流水信息
                    $orderPay['serial_sn'] = createSerialSn();
                    $orderPay['order'] = $order_id;
                    $orderPay['add_time'] = date('Y-m-d H:i:s', NOW_TIME);
                    $orderPay['user_id'] = session('user.id');
                    $orderPay['total_price'] = $shopOrder['total_price'];
                    $orderPay['payable_price'] = $shopOrder['payable_price'];
                    $orderPay['coupon_price'] = $couponPrice;
                    $orderPay['order_prom_price'] = $shopOrder['order_prom_price'];
                    $serial_id = Db::name('shop_order_pay')->insertGetId($orderPay);
                    Db::commit();
                } catch (\Exception $exception) {
                    Db::rollback();
                    // 保存错误日志
                    return $this->error('提交失败，请重试');
                }
                $data['order_id'] = $serial_id;
                $this->success($data);
            } else {
                return $this->error('非法操作');
            }
        } else {
            //赋值
            $now_address = getAddressName($address['province']) . '&nbsp;' . getAddressName($address['city']) . '&nbsp;' . getAddressName($address['district']) . '&nbsp;' . $address['address'];
            if (empty($spec['id'])) {
                $spec['id'] = 0;
            }
            $tempVariable['address_id'] = $address['id'];
            $tempVariable['address'] = $now_address;
            $tempVariable['consignee'] = $address['consignee'];
            $tempVariable['phone'] = $address['mobile'];
            $tempVariable['spec'] = $spec;
            $tempVariable['order'] = $shopOrder;
            $tempVariable['goods'] = $goods;

            $this->assign($tempVariable);
            return $this->fetch();
        }

    }


    // 显示网页公共头部购物车
    public function header_cart_list()
    {
        //通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        $cartArr = Db::name('shop_cart')->where($where)->where(['status' => 1])->select();
        $total_price = ['num' => 0, 'total_fee' => 0];
        foreach ($cartArr as $key => $cart) {
            $total_price['num'] += $cart['goods_num'];
            $total_price['total_fee'] += $cart['shop_price'];
        }
        $this->assign('total_price', $total_price);
        $this->assign('cartList', $cartArr);
        return $this->fetch();
    }

    // Ajax方式右侧公共栏获取购物车内容
    public function ajaxCartRight()
    {
        //通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        $cart_list = Db::name('shop_cart')->where($where)->where(['status' => 1])->select();

        $num = 0;
        $total_price = 0;
        foreach ($cart_list as $key => $cart) {
            $num += $cart['goods_num'];
            $total_price += $cart['shop_price'];
        }
        $cart_result = [
            'cartList' => $cart_list,
            'total_price' => ['total_fee' => $total_price, 'num' => $num]
        ];
        if (empty($total_price))
            $cart_result['total_price'] = ['total_fee' => 0, 'num' => 0];
        if (!empty($cart_result['cartList'])) {
            return ['status' => 1, 'msg' => lang('cart_get_success'), 'total_price' => $cart_result['total_price'], 'carList' => $cart_result['cartList']];
        } else {
            return ['status' => 0, 'msg' => lang('cart_is_null')];
        }
    }


    /**
     * 添加商品数量
     */
    public function add_num()
    {
        $cart_id = empty(request()->param('cart_id')) ? '' : request()->param('cart_id');
        $cart_id = intval($cart_id);
        if ($cart_id == 0) {
            $this->error('订单错误');
        }
        try {
            $update = Db::name('shop_cart')->where('id', $cart_id)->where('user_id', session('user.id'))->whereOr(['session_id' => $this->session_id])->setInc('goods_num', 1);
        } catch (\Exception $e) {
            $this->error($e->getMessage());
        }

        if ($update === false) {
            $this->error('修改失败');
        } else {
            //通过login_id查询当前的购物车订单
            $login_id = $this->login_id;
            if (is_numeric($login_id)) {
                $session_id = $this->session_id;
                $where = "user_id=$login_id OR session_id='$session_id'";
            } else {
                $where = ['session_id' => $login_id];
            }
            $cartArr = $this->_DB->where($where)->where(['status' => 1])->group('shop_id')->column('shop_id');
            $total_price = 0;
            foreach ($cartArr as $item => $value) {
                //获取当前店铺ID的信息
                $cart = Db::name('shop_cart')->where($where)->where('shop_id', $value)->field('selected,goods,spec_id,goods_num')->where('status', 1)->select();
                foreach ($cart as $item) {
                    if ($item['selected'] == 1) {
                        $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                    }
                }
            }
            //输出总价
            $goods_num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
            $data['goods_num'] = $goods_num;
            $data['total_price'] = priceFormat($total_price, 1);
            $this->success($data);
        }
    }

    /**
     * 减少商品数量
     */
    public function reduce_num()
    {
        $cart_id = empty(request()->param('cart_id')) ? '' : request()->param('cart_id');
        $cart_id = intval($cart_id);
        if ($cart_id == 0) {
            $this->error('订单错误');
        }
        $num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
        if ($num <= 1) {
            $this->error('商品数量不可小于1');
        }
        $update = Db::name('shop_cart')->where('id', $cart_id)->where('user_id', session('user.id'))->whereOr(['session_id' => $this->session_id])->setDec('goods_num', 1);
        if ($update === false) {
            $this->error('修改失败');
        } else {
            //通过login_id查询当前的购物车订单
            $login_id = $this->login_id;
            if (is_numeric($login_id)) {
                $session_id = $this->session_id;
                $where = "user_id=$login_id OR session_id='$session_id'";
            } else {
                $where = ['session_id' => $login_id];
            }
            $cartArr = $this->_DB->where($where)->where(['status' => 1])->group('shop_id')->column('shop_id');
            $total_price = 0;
            foreach ($cartArr as $item => $value) {
                //获取当前店铺ID的信息
                $cart = Db::name('shop_cart')->where($where)->where('shop_id', $value)->field('selected,goods,spec_id,goods_num')->where('status', 1)->select();
                foreach ($cart as $item) {
                    if ($item['selected'] == 1) {
                        $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                    }
                }
            }
            //输出总价
            $goods_num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
            $data['goods_num'] = $goods_num;
            $data['total_price'] = priceFormat($total_price, 1);
            $this->success($data);
        }
    }

    /**
     * 重新设置商品数量
     */
    public function edit_num()
    {
        $cart_id = empty(request()->param('cart_id')) ? '' : request()->param('cart_id');
        $cart_id = intval($cart_id);
        $goods_num = empty(request()->param('num')) ? '' : request()->param('num');
        $goods_num = intval($goods_num);
        if ($cart_id == 0) {
            $this->error('订单错误');
        }
        if ($goods_num <= 0) {
            $this->error('商品数量错误');
        }
        $user_id = empty(session('user.id')) ? 0 : session('user.id');
        //判断库存
        //通过cartid 商品ID，规格
        $cart_goods = Db::name('shop_cart')->where(['id' => $cart_id, 'status' => 1])->field('goods,spec_id')->find();
        $stock = Goods::getStock($cart_goods['goods'], $cart_goods['spec_id']);
        if ($stock < $goods_num) {
            $this->error('商品库存不足');
        }
        $update = Db::name('shop_cart')->where('id', $cart_id)->where('user_id=' . $user_id . ' OR session_id="' . $this->session_id . '"')->update(['goods_num' => $goods_num]);
        if ($update === false) {
            $this->error('修改失败');
        } else {
            //通过login_id查询当前的购物车订单
            $login_id = $this->login_id;
            if (is_numeric($login_id)) {
                $session_id = $this->session_id;
                $where = "user_id='$login_id' OR session_id='$session_id'";
            } else {
                $where = ['session_id' => $login_id];
            }
            $cartArr = $this->_DB->where($where)->where(['status' => 1])->group('shop_id')->column('shop_id');
            $total_price = 0;
            foreach ($cartArr as $item => $value) {
                //获取当前店铺ID的信息
                $cart = Db::name('shop_cart')->where($where)->where('shop_id', $value)->field('selected,goods,spec_id,goods_num')->where('status', 1)->select();
                foreach ($cart as $item) {
                    if ($item['selected'] == 1) {
                        $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                    }
                }
            }
            //输出总价
            $goods_num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
            $data['goods_num'] = $goods_num;
            $data['total_price'] = priceFormat($total_price, 1);
            $this->success($data);
        }
    }
}