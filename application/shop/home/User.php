<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台用户中心模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017
// +----------------------------------------------------------------------

// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------


namespace app\shop\home;

use app\sys\api\Payment;
use think\Db;
use \app\sys\controller\Api;
use app\shop\model\ShopOrder as orderModel;
use think\Log;
use app\shop\api\Recharge;

class User extends HomeBase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        if( empty(session('user.id')) ){
            cookie('login_referer',request()->url());
            $this->redirect('member/login/index');
        }

        // 输出当前页面的Action
        $action = request()->action();
        $this->assign('curr_act',$action);

        //================购物车信息
        //获取用户购物车信息
        $cartList = Db::name('shop_cart')->alias('c')->join(config('prefix').'shop_goods g','c.goods =g.id')->field('c.id,c.goods_name,c.goods,g.thumb')->where('c.user_id',session('user.id'))->where('c.status',1)->order('add_time desc')->select();
        //获取购物车商品数量
        $cartGoodsSum = Db::name('shop_cart')->where('user_id',session('user.id'))->where('status',1)->sum('goods_num');
        //获取购物车总价格
        $cartGoodsPrice = Db::name('shop_cart')->where('user_id',session('user.id'))->where('status',1)->sum('shop_price');
        //================购物车信息
        $user = Db::name('users')->where('id',session('user.id'))->find();
        session('user',$user);
        $this->assign('cartGoodsSum',$cartGoodsSum);
        $this->assign('cartGoodsPrice',priceFormat($cartGoodsPrice));
        $this->assign('cartList',$cartList);
        // 有效的优惠券数量(未使用、状态正常的有效期内的优惠券)
        $useable_coupon = Db::name('user_coupon')->where(['is_use'=>0,'user'=>session('user.id'),'status'=>1])->where('end_time','>= time',time()) ->count();
        $this->assign('useable_coupon',$useable_coupon);
        $this->assign('user',$user);
    }

    /**
     * 用户中心
     * @return mixed
     */
    public function index(){
        $user_id = session('user.id');

        // 更新用户的等级信息
        geiv_exp($user_id,0);

        // $user = Db::name('users')->where('id',session('user.id'))->find();
        // $points = $user['pay_points'];
        // $lv = Db::name('user_level') ->where('points','<',$points) ->order('id DESC') ->find();
        // // dump($lv);
        // Db::name('users')->where('id',session('user.id')) ->setField('level',$lv['id']);

        // 有效的优惠券数量(未使用、状态正常的有效期内的优惠券)
        $useable_coupon = Db::name('user_coupon')->where(['is_use'=>0,'user'=>$user_id,'status'=>1])->where('end_time','>= time',time()) ->count();
        $this->assign('useable_coupon',$useable_coupon);

        // 获取各个订单状态数
        $order1 = Db::name('shop_order')->where(['status'=>1,'user_id'=>$user_id]) ->count();
        $order3 = Db::name('shop_order')->where(['status'=>2,'user_id'=>$user_id]) ->whereOr('status',3) ->count();
        $order4 = Db::name('shop_order')->where(['status'=>4,'user_id'=>$user_id]) ->count();
        $order5 = Db::name('shop_order')->where(['status'=>5,'user_id'=>$user_id]) ->count();
        $this->assign('order1',$order1);
        $this->assign('order3',$order3);
        $this->assign('order4',$order4);
        $this->assign('order5',$order5);

        //查询用户的所有订单
        $orderList = Db::name('shop_order')->where('user_id',$user_id)->where('status>=0')->order('add_time desc') ->limit(3) ->select();
        $orderArr = [];
        foreach ($orderList as $key => $order) {
            //获取当前订单下的商品
            //检测是否是拼团订单
            if( $order['pieces_id'] > 0 ){
                $goods_id = Db::name('shop_pieces_order')->where('id',$order['pieces_id'])->field('goods,spec')->find();
                //获取信息
                $orderGoods = Db::name('shop_goods')->where('id',$goods_id)->field('title as goods_name,g.thumb')->select();
                $orderGoods['id'] = $order['id'];
            }else{
                $orderGoods = Db::name('shop_order_goods')->alias('og')->join(config('prefix').'shop_goods g','g.id = og.goods_id')->field('og.id,og.goods_id,og.goods_num,og.spec_key,g.title as goods_name,g.thumb')->where('order_id',$order['id'])->select();
            }

            $orderArr[$order['id']] = $order;
            $orderArr[$order['id']]['goods_list'] = $orderGoods;
        }
        $this->assign('orderList',$orderArr);
        return $this->fetch();
    }


    /**
     * 用户订单列表
     */
    public function order_list(){
        //获取用户所有订单列表
        $data = input();
        if (empty($data['type'])) {
            $data['type'] = 'all';
        }
        if( $data['type'] == 'all' ){
            $where = '`status` > 0';
            $this->assign('status','all');
        }else{
            $status = !empty($data['type']) ?  $data['type'] : 0;
            $status = intval($status);
            $this->assign('status',$status);
            if( $status >= 0 ){
                if ($status == 2) {
                    $where = "status = 2 OR status =3";
                }else{
                    $where = '`status` = '.$status;
                }
            }
        }

        if (!empty($data['days'])) {
            $start_date = date('Y-m-d',strtotime('-'.($data['days']-1).' days')).' 00:00:00';
            $where2['add_time'] = ['>= time',$start_date];
            $this->assign('days',$data['days']);
        }else{
            $this->assign('days','');
        }

        if (!empty($data['month'])) {
            $data['month'] = $data['month'] >=10 ? $data['month'] : '0'.$data['month'];
            $start_date = date('Y').'-'.$data['month'].'-'.'01'.' 00:00:00';
            $end_date = date('Y-m-d', strtotime("$start_date +1 month -1 day"))." 23:59:59";
            $where2['add_time'][] = ['>= time',$start_date];
            $where2['add_time'][] = ['<= time',$end_date];
            $this->assign('month',$data['month']);
        }else{
            $this->assign('month','');
        }

        if (!empty($data['time_start']) && !empty($data['time_end'])) {
            $start_date = $data['time_start'].' 00:00:00';
            $end_date = $data['time_end']." 23:59:59";
            $where2['add_time'][] = ['>= time',$start_date];
            $where2['add_time'][] = ['<= time',$end_date];
            $this->assign('time_start',$data['time_start']);
            $this->assign('time_end',$data['time_end']);
        }else{
            $this->assign('time_start','');
            $this->assign('time_end','');
        }


        if( !empty($data['key']) ){
            $order_ids = Db::name('shop_order_goods') ->field('GROUP_CONCAT(order_id) as ids') ->where('goods_name','LIKE',"%{$data['key']}%") ->whereOr('spec_title','LIKE',"%{$data['key']}%") ->find();

            $where .= ' and `order_sn` = \''.$data['key'] . '\'';
            if (!empty($order_ids['ids'])) {
                $where .= ' OR id IN('.$order_ids['ids'].')';
            }
        }
        // dump($where);
        $page_row = tb_config('list_rows',1);
        if (empty($where2)) {
            $orderList = Db::name('shop_order')->where($where) ->where('user_id',session('user.id'))->order('add_time desc')->paginate($page_row);
        } else {
            $orderList = Db::name('shop_order')->where($where) ->where($where2)->where('user_id',session('user.id'))->order('add_time desc')->paginate($page_row);
        }

        // dump(Db::name('shop_order')->getLastSql());
        $orderArr = [];
        foreach ($orderList->items() as $order){
            //获取当前订单下的商品
            //检测是否是拼团订单
            if( $order['pieces_id'] > 0 ){
                $goods_id = Db::name('shop_pieces_order')->where('id',$order['pieces_id'])->field('goods,spec')->find();
                //获取信息
                $orderGoods = Db::name('shop_goods')->where('id',$goods_id)->field('title as goods_name,g.thumb')->select();
                $orderGoods['id'] = $order['id'];
            }else{
                $orderGoods = Db::name('shop_order_goods')->alias('og')->join(config('prefix').'shop_goods g','g.id = og.goods_id')->field('og.id,og.goods_id,og.goods_num,og.spec_key,g.title as goods_name,g.thumb')->where('order_id',$order['id'])->select();
            }

            $orderArr[$order['id']] = $order;
            $orderArr[$order['id']]['goods_list'] = $orderGoods;
        }
        $this->assign('page',$orderList->render());
        $this->assign('orderList',$orderArr);
        return $this->fetch();
    }

    // 显示购买凭证
    public function bill($oid)
    {
        $order_info = Db::name('shop_order') ->find($oid);
        $this->assign('order',$order_info);

        $order_goods = Db::name('shop_order_goods')->where('user_id',session('user.id')) ->field('GROUP_CONCAT(goods_name) as names') ->where('order_id',$oid) ->find();
        $order_goods = str_replace(',', '<br>', $order_goods['names']);
        $this->assign('goods',$order_goods);
        return $this->fetch();
    }

    /**
     * 取消订单
     * @param int $id 订单ID
     */
    public function cancel_order($id){
        intval($id);
        $update = Db::name('shop_order')->where(['id'=>$id,'user_id'=>session('user.id')])->update(['status'=>0]);
        if( $update === false ){
            restore_stock($id);     //恢复订单所有商品的库存
            $this->error(lang('cancel_order_failed'));
        }else{
            $this->success(lang('cancel_order_success'));
        }
    }

    /**
     * 删除订单
     * @param int $id 订单ID
     */
    public function del_order($id){
        intval($id);
        $status = Db::name('shop_order') ->where('id',$id) ->value('status');
        if ($status!=0) {
            $this->error(lang('Order_delete_status_error'));
        }
        $update = Db::name('shop_order')->where(['id'=>$id,'user_id'=>session('user.id')])->update(['status'=>-1]);
        if( $update === false ){
            $this->error(lang('del_order_failed'));
        }else{
            $this->success(lang('del_order_success'));
        }
    }

    /**
     * 用户基本信息页面
     */
    public function info(){
        $user = Db::name('users') ->find(session('user.id'));
        // dump($user);
        $this->assign('user',$user);
        $usr_lv = $user['level'];
        // $levels = Db::name('user_level') ->find($usr_lv);
        $next_lv = Db::name('user_level') ->where('id','>',$usr_lv) ->find();
        // dump($next_lv);
        $this->assign('next_lv',$next_lv);
        $points_left = $next_lv['points'] - $user['pay_points'];
        $this->assign('points_need',$points_left);
        return $this->fetch();
    }

    public function info_ext()
    {
        if ( request()->isPost() ) {
            $postData = request()->post();
            $postData['focus_cates'] = empty($postData['focus_cates'])?'':implode(',', $postData['focus_cates']);
            unset($postData['user_id']);
            $res = Db::name('users') ->where('id',session('user.id')) ->update($postData);
            if ($res!==false) {
                $this->success(lang('user_save_success'));
            } else {
                $this->error(lang('user_data_wrong'));
            }

        }else{
            $top_cates = Db::name('goods_category') ->where(['pid'=>0,'is_show'=>1]) ->select();
            $this->assign('top_cates',$top_cates);
            $this->assign('user_id',session('user.id'));
            $user = Db::name('users') ->find(session('user.id'));
            $this->assign('user',$user);
            return $this->fetch();
        }
    }

    // 更新用户信息中指定字段的值
    public function chgUserInfo()
    {
        $data = input();
        $res = Db::name('users') ->where('id',session('user.id')) ->setField($data['field'],$data['value']);
        if ($res !== false) {
            $this->success(lang('comm_update_success'));
        } else {
            $this->error(lang('comm_update_error'));
        }

    }
    /**
     * 保存用户基本信息
     */
    public function save_info(){
        if( request()->isPost() ){
            $postData = request()->post();
            //插入数据
            $insertData = [];
            if( isset($postData['head_pic']) && $postData['head_pic'] !== '' ){
                $insertData['head_pic'] = $postData['head_pic'];
            }
            if ( isset($postData['nickname']) && $postData['nickname'] !== '' ){
                $insertData['nickname'] = $postData['nickname'];
            }
            if ( isset($postData['qq']) && $postData['qq'] !== '' ){
                $insertData['qq'] = $postData['qq'];
            }
            if ( isset($postData['birthday']) && $postData['birthday'] !== '' ){
                $insertData['birthday'] = $postData['birthday'];
            }
            if ( isset($postData['sex']) && $postData['sex'] !== '' ){
                $insertData['sex'] = $postData['sex'];
            }
            if( count($insertData) > 0 ){
                $insert = Db::name('users')->where('id',session('user.id'))->update($postData);
                if( $insert === false ){
                    $this->error(lang('user_save_failed'));
                }
                //更新session

                $user = session('user');
                $user = array_merge($user,$insertData);
                session('user',$user);
                $this->success(lang('user_save_success'));
            }
            $this->error(lang('user_data_wrong'));
        }else{
            $this->error('');
        }
    }

    /**
     * 用户地址管理
     */
    public function address_list(){
        //获取用户收货地址
        $nums = Db::name('user_address')->where(['user_id'=>session('user.id'),'status'=>1]) ->count();
        $this->assign('addr_nums',$nums);
        $address = Db::name('user_address')->where('user_id',session('user.id'))->where('status',1)->order('is_default desc') ->paginate(5);
        $addressList = $address -> all();
        foreach ($addressList as $key=>$item){
            $addressList[$key]['address'] = getAddressName($item['province']).getAddressName($item['city']).getAddressName($item['district']).$item['address'];
        }
        $this->assign('lists',$addressList);
        $page = $address -> render();
        $this->assign('page',$page);
        return $this->fetch();
    }

    /**
     * 用户地址添加
     * @return mixed
     */
    public function add_address(){
        //获取一级地址
        $province = Api::getChildAddress(0,1);
        $this->assign('province',$province);
        return $this->fetch('address_do');
    }


    /**
     * 用户地址编辑
     * @return mixed
     */
    public function edit_address(){

        //获取当前地址信息
        $id = request()->param('id');
        $addressInfo = Db::name('user_address')->where(['user_id'=>session('user.id'),'id'=>$id,'status'=>1])->find();
        if( $addressInfo == '' ){
            $this->error(lang('user_address_wrong'));
        }
        //获取省份列表
        $provinceList = Api::getChildAddress(0,1);
        //获取城市列表
        $cityList = Api::getChildAddress($addressInfo['province'],2);
        //获取区县列表
        $districtList = Api::getChildAddress($addressInfo['city'],3);

        $this->assign('address',$addressInfo);
        $this->assign('province',$provinceList);
        $this->assign('city',$cityList);
        $this->assign('district',$districtList);
        return $this->fetch();
    }

    /**
     * 用户地址保存
     */
    public function save_address(){

        $postData = request()->post();
        //查看是保存还是添加
        if( empty($postData['id']) ){
            //计算当前用户的收货地址数是否达到最大状态
            //获取用户当前地址数量
            $UAddressNum = Db::name('user_address')->where(['user_id'=>session('user.id'),'status'=>1])->count('id');
            if( $UAddressNum >= 20 ){
                $this->error(lang('user_address_reach_limit'));
            }
        }
        $rule = [
            'consignee' => 'require',
            'province' => 'require|number',
            'city' => 'require|number',
            'district' => 'require|number',
            'address' => 'require',
            'zip' => 'number|length:6',
            'mobile' => 'require|number|length:11',
        ];
        $message = [
            'consignee.require'=>'请输入收货人姓名','province.require'=>'请选择省份','province.number'=>'省份选择错误,请重新选择','city.require'=>'请选择城市','city.number'=>'城市选择错误,请重新选择','district.require'=>'请选择区县','district.number'=>'区县选择错误,请重新选择','address.require'=>'请输入地址','zip.number'=>'请输入邮政编码','mobile.require'=>'请输入手机号码'
        ];
        $check = api('sys','Verification','valiCheck',[$rule,$postData,$message]);
        if( $check['code'] == 0 ){
            $this->error($check['error']);
        }
        $saveData['consignee'] = isset($postData['consignee']) ? $postData['consignee'] : '';
        $saveData['province'] = $postData['province'];
        $saveData['city'] = $postData['city'];
        $saveData['district'] = $postData['district'];
        $saveData['address'] = $postData['address'];
        $saveData['mobile'] = $postData['mobile'];
        $saveData['phone'] = isset($postData['phone']) ? $postData['phone'] : '';
        $saveData['zip'] = isset($postData['zip']) ? $postData['zip'] : '';

        //存入数据库
        if (empty($postData['id'])) {
            //插入
            $saveData['user_id'] = session('user.id');
            $save = Db::name('user_address')->insert($saveData);
        } else {
            //保存
            $save = Db::name('user_address')->where(['user_id' => session('user.id'), 'id' => $postData['id']])->update($saveData);
        }
        if ($save === false) {
            $this->error(lang('user_save_failed'));
        }
        if (empty(cookie('call_back'))) {
            $this->success(lang('user_save_success'), 'mshop/user/address_list');
        }
        $this->success(lang('user_save_success'), cookie('call_back'));
    }

    /**
     * 获取子地址，默认为0
     */
    public function getAddressList($parent_id = 0,$level = 1){
        $addressList = Api::getChildAddress($parent_id,$level);
        $addressHtml = '';
        if( is_array( $addressList ) && count($addressList) >0 ){
            foreach ($addressList as $address) {
                $addressHtml .= "<option value='{$address['id']}'>{$address['name']}</option>";
            }
        }
        return $addressHtml;
    }

    public function ajaxCheckPwd()
    {
        $data = input();
        $pwd_serv = Db::name('users')->where('id',session('user.id')) ->value('password');
        if ($pwd_serv == encrypt_pwd($data['pass'])) {
            cookie('info_pwd_verify','yes',3600);
            $this->success('密码验证通过');
        }else{
            $this->error('密码验证失败，请重试。');
        }
    }

    /**
     * 用户收货地址设为默认
     */
    public function set_default(){
        //修改收货地址为默认
        $id = request()->param('id');
        intval($id);
        if($id > 0){
            // dump($id);
            Db::startTrans();
            try{
                Db::name('user_address')->where('user_id',session('user.id'))->update(['is_default'=>0]);
                Db::name('user_address')->where('id',$id)->where('user_id',session('user.id'))->update(['is_default'=>1]);
                Db::commit();
            }catch (\Exception $e){
                Db::rollback();
                $this->error($e->getMessage());
            }
            // die;
            $this->success(lang('user_set_success'));
        }else{
            $this->error(lang('user_select_address_failed'));
        }
    }

    /**
     * 删除用户收货地址
     */
    public function del_address(){
        //修改收货地址为默认
        $id = request()->param('id');
        intval($id);
        if($id > 0){
            $del = Db::name('user_address')->where('id',$id)->where('user_id',session('user.id'))->update(['status'=>0]);
            if( $del === false ){
                $this->error(lang('user_del_address_failed'));
            }
            $this->success(lang('user_del_address_success'));
        }else{
            $this->error(lang('user_select_address_failed'));
        }
    }

    /**
     * 批量删除选中的用户收货地址
     */
    public function dels_address(){
        //修改收货地址为默认
        $data = input('');
        // dump($data['id']);die;
        $id = $data['id'];
        if(count($id) > 0){
            $del = Db::name('user_address')->where('id','IN',$id)->where('user_id',session('user.id'))->delete();
            if( $del === false ){
                $this->error(lang('user_del_address_failed'));
            }
            $this->success(lang('user_del_address_success'));
        }else{
            $this->error(lang('user_select_address_failed'));
        }
    }

    /**
     * 订单详情页面
     */
    public function order_detail(){
        //获取订单信息
        $orderModel = new orderModel();
        $id = request()->param('id');
        $order_info = $orderModel->where('id',$id)->where('status>=0')->where('user_id',session('user.id'))->find();

        if(  $order_info == ''){
            return $this->redirect('shop/User/order_list');
        }
        //获取订单中的所有商品
        $goodsList = Db::name('shop_order_goods')->where('order_id',$order_info['id'])->select();
        $order_info['goods_list'] = $goodsList;
        // dump($order_info);
        $this->assign('order_info',$order_info);
        $this->assign('status',getTableValue('shop_order','id='.$id,'status'));
        return $this->fetch();
    }

    /**
     * 查询订单物流
     * @param int $id 订单ID
     * @return mixed
     */
    public function chaxun($id)
    {
        $id = intval($id);
        //查询快递编号和快递号
        $orderShipping = Db::name('shop_order') ->where('user_id',session('user.id')) ->field('shipping_name,shipping_code,shipping_sn') ->where('id',$id) ->find();
        // dump($orderShipping);
        if( empty($orderShipping['shipping_sn']) ){
            echo '<div><h1>暂无物流信息...</h1></div>';
            exit;
        }else{
            //查询物流跟踪信息
            // 中国足迹
            $kdTrail = kdTrail($orderShipping['shipping_code'],$orderShipping['shipping_sn'],'kuaidi100');
            // $Traces = $kdTrail['Traces'];
            if (isset($kdTrail['result']) && !$kdTrail['result']) {
                // dump($kdTrail);
                $this->assign('error_cn',$kdTrail['message']);
            }else{
                $Traces = $kdTrail['data'];
                foreach ($Traces as $key => $val) {
                    $Traces2[$key]['AcceptStation'] = $val['context'];
                    $Traces2[$key]['AcceptTime'] = $val['ftime'];
                }
                $kdTrail['Traces'] = $Traces2;
                $this->assign('kdTrail_cn',$kdTrail);
            }
            $this->assign('shippingInfo',$orderShipping);
        }
        return $this->fetch();
    }

    /**
     * 用户确认收货
     */
    public function order_confirm(){
        //检测订单是否存在
        $id = intval(request()->param('id'));
        if( $id == 0 ){
            $this->error(lang('order_id_is_field'));
        }
        $orderInfo = Db::name('shop_order')->where('id',$id)->where('user_id',session('user.id'))->find();
        if( $orderInfo == '' ){
            $this->error(lang('cart_order_failed'));
        }
        if( $orderInfo['is_pay'] == 0 ){
            $this->error(lang('order_is_not_pay'));
        }
        if( $orderInfo['is_send'] == 0 ){
            $this->error(lang('order_is_not_send'));
        }
        if( $orderInfo['status'] == 5 ){
            $this->error(lang('order_goods_is_receive'));
        }
        $updateData['receiving_time'] = date('Y-m-d H:i:s');
        //修改订单信息
        $updateData['status'] = 5;
        Db::startTrans();
        try{
            $update = Db::name('shop_order')->where('id',$id)->where('user_id',session('user.id'))->update($updateData);
            if( $update!== false ){

            }

            Db::commit();
        }catch (\Exception $exception){
            Db::rollback();
            Log::error($exception);
            $this->error('确认收货失败,请重试!');
        }
        $this->success(lang('order_goods_is_receive_success'));
    }

    // 订单商品评价
    public function order_comment($id)
    {
        $order = Db::name('shop_order') ->find($id);
        $orderGoods = Db::name('shop_order_goods') ->where('order_id',$id) ->select();
        $this->assign('order',$order);
        $this->assign('orderGoods',$orderGoods);
        return $this->fetch();
    }

    // 添加商品评价
    public function add_comment()
    {
        $data = input();
        $is_exist = Db::name('shop_goods_comment') ->where(['order_id'=>$data['order_id'],'goods_id'=>$data['goods_id'],'spec_key'=>$data['spec_key']]) ->find();
        if ($is_exist) {
            $this->error('当前订单商品已经评价过了，无须重复评价。');
        }
        $user = Db::name('users') ->find(session('user.id'));
        $commData = [
            'goods_id' => $data['goods_id'],
            'spec_key' => $data['spec_key'],
            'user_id' => $user['id'],
            'username' => $user['nickname'],
            'content' => $data['content'],
            'deliver_rank' => $data['deliver_rank'],
            'goods_rank' => $data['goods_rank'],
            'description_rank' => $data['desc_rank'],
            'service_rank' => $data['service_rank'],
            'add_time' => date('Y-m-d H:i:s'),
            'ip_address' => get_client_ip(),
            'is_show' => 1,
            'img' => ltrim($data['img'],','),
            'order_id' => $data['order_id']
        ];

        // 插入评价数据
        $res = Db::name('shop_goods_comment') ->insert($commData);
        if ($res!==false) {
            // 修改订单商品记录的评价状态
            $ress = Db::name('shop_order_goods') ->where(['order_id'=>$data['order_id'],'goods_id'=>$data['goods_id'],'spec_key'=>$data['spec_key']]) ->setField('is_comment',1);
            $commNums = Db::name('shop_order_goods') ->where(['order_id'=>$data['order_id'],'is_comment'=>0]) ->count();
            if ($commNums == 0 ) {
                // 订单商品没有未评价商品时，更新订单状态
                Db::name('shop_order') ->where('id',$data['order_id']) ->setField('status',6);

                // 发放用户经验
                $experience = tb_config('exp_comment',1);    //评价发布经验
                geiv_exp(session('user.id'),$experience,'comment');

                insert_order_action($data['order_id'],session('user.id'),6,"评价完成","用户评价订单完成");
            }
            $this->success('评价成功');
        } else {
            $this->error('评价失败，请重试。');
        }
    }
    /**
     * 我的评价页面
     */
    public function comment(){
        $comments = Db::name('shop_goods_comment') ->where('user_id',session('user.id')) ->paginate(tb_config('list_rows',1));
        $comment_list  = $comments ->all();
        foreach ($comment_list as $key => $comm) {
            $comment_list[$key]['goods_name'] = getTableValue('shop_goods',['id'=>$comm['goods_id']],'title');
            $comment_list[$key]['goods_thumb'] = getTableValue('shop_goods',['id'=>$comm['goods_id']],'thumb');
            $comment_list[$key]['order'] = Db::name('shop_order') ->field('id,add_time,order_sn') ->where('id',$comm['order_id']) ->find();
        }
        // dump($comment_list);
        $page = $comments->render();
        $this->assign('comment_list',$comment_list);
        $this->assign('page',$page);
        return $this->fetch();
    }

    public function comm_show()
    {
        $data = input();
        $commInfo = [];
        if (!empty($data['comm_id'])) {
            $commInfo = Db::name('shop_goods_comment') ->find($data['comm_id']);
        } else {
            $commInfo = Db::name('shop_goods_comment')  ->where(['order_id'=>$data['order_id'],'goods_id'=>$data['goods_id'],'spec_key'=>$data['spec_key']]) ->find();
        }
        $this->assign('comm',$commInfo);
        // dump($commInfo);
        $goods = Db::name('shop_goods') ->find($commInfo['goods_id']);
        $this->assign('goods',$goods);
        return $this->fetch();
    }

    /**
     * 我的优惠券页面
     */
    public function coupon(){
        $time = time();
        $data = input();
        $where['user'] = session('user.id');
        if (isset($data['status'])) {
            switch ($data['status']) {
                case 'usable':
                    $where['is_use'] = 0;
                    $where['end_time'] = ['>= time',$time];
                    break;

                case 'willout':
                    $where['is_use'] = 0;
                    $where['end_time'][] = ['>= time',$time];
                    $where['end_time'][] = ['< time',$time+3*24*3600];
                    break;

                case 'timeout':
                    $where['is_use'] = 0;
                    $where['end_time'] = ['< time',$time];
                    break;

                case 'used':
                    $where['is_use'] = 1;
                    break;
            }
            $this->assign('status',$data['status']);
        }else{
            $this->assign('status','');
        }


        //获取所有
        $userCoupons = Db::name('user_coupon')->where($where)->order('is_use asc')->paginate(tb_config('list_rows',1));
        $coupon_list = $userCoupons -> all();
        foreach ($coupon_list as $key => $coupon) {
            $coupon_list[$key]['info'] = Db::name('shop_coupon') ->where('id',$coupon['coupon']) ->find();
        }

        $this->assign('coupon_list',$coupon_list);
        $this->assign('page',$userCoupons->render());
        return $this->fetch();
    }

    public function del_coupon($id)
    {
        $is_use = Db::name('user_coupon') ->where('id',$id) ->value('is_use');
        if ($is_use==1) {
            $this->error(lang('Coupon_used_cannt_del'));
        } else {
            $res = Db::name('user_coupon')->delete($id);
            if ($res!==false) {
                $this->success(lang('comm_delete_success'));
            } else {
                $this->error(lang('comm_delete_error'));
            }
        }

    }

    /**
     * 我的积分页面
     */
    public function account(){
        $user_id = session('user.id');
        // 有效的优惠券数量(未使用、状态正常的有效期内的优惠券)
        $useable_coupon = Db::name('user_coupon')->where(['is_use'=>0,'user'=>$user_id,'status'=>1])->where('end_time','>= time',time()) ->count();
        // 即将过期的优惠券数量(未使用、状态正常的有效期在3天内的优惠券)
        $willout_coupon = Db::name('user_coupon')->where(['is_use'=>0,'user'=>$user_id,'status'=>1])->where('end_time','>= time',time()) ->where('end_time','< time',time()+3*24*3600) ->count();
        // 已过期的优惠券数量(未使用、状态正常的已过有效期的优惠券)
        $timeout_coupon = Db::name('user_coupon')->where(['is_use'=>0,'user'=>$user_id,'status'=>1])->where('end_time','< time',time()) ->count();
        $this->assign('useable_coupon',$useable_coupon);
        $this->assign('willout_coupon',$willout_coupon);
        $this->assign('timeout_coupon',$timeout_coupon);

        return $this->fetch();
    }

    public function ajaxAccountLog()
    {
        $user_id = session('user.id');
        $accounts = Db::name('user_account_log') ->where(['user_id'=>$user_id]) ->order('change_time DESC') ->paginate(tb_config('list_rows',1));
        $log_list = $accounts -> all();
        $this->assign('list',$log_list);
        $page = $accounts ->render();
        $this->assign('page',$page);
        return $this->fetch();
    }

    /**
     * 我的收藏页面--商品
     */
    public function goods_collect($type='all'){
        $this->assign('type',$type);
        $user_id = session('user.id');
        $all_collect = Db::name('shop_goods_collect') ->where(['user_id'=>$user_id,'status'=>1]) ->select();

        // 全部收藏商品数量
        $all_num = count($all_collect);
        $this->assign('all_num',$all_num);

        $unable_num = 0;
        $unable_goods = [];
        $reduce_num = 0;
        $reduce_goods = [];
        foreach ($all_collect as $key => $all) {
            $goods = Db::name('shop_goods') ->where('id',$all['goods_id']) ->find();
            if ($goods['is_audit']==0 || $goods['trash']==1 || $goods['status']==0) {
                $unable_goods[] = $all['id'];
                $unable_num ++;
            }
        }
        $this->assign('reduce_num',$reduce_num);
        $this->assign('unable_num',$unable_num);

        switch ($type) {
            case 'all':
                $where = true;
                break;

            case 'reduce':
                if (empty($reduce_goods)) {
                    $reduce_goods = 0;
                }
                $where['goods_id'] = ['IN',$reduce_goods];
                break;

            case 'unable':
                if (empty($unable_goods)) {
                    $unable_goods = 0;
                }
                $where['goods_id'] = ['IN',$unable_goods];
                break;
        }

        $collectList = Db::name('shop_goods_collect')->where(['user_id'=>$user_id,'status'=>1])->where($where)->paginate(8);

        $this->assign('page',$collectList->render());
        $this->assign('goods_collect_list',$collectList);

        $goods_ids = Db::name('shop_goods_collect') ->field('GROUP_CONCAT(goods_id) as ids') ->where(['user_id'=>$user_id,'status'=>1])->find();
        $cates = Db::name('shop_goods') ->field('GROUP_CONCAT(cat_id) as ids') ->where('id','IN',$goods_ids['ids']) ->find();
        $goods_comm = Db::name('shop_goods') ->where('cat_id','IN',$cates['ids']) ->order('sales_sum') ->limit(15) ->select();
        $this->assign('recommend_goods',$goods_comm);
        return $this->fetch();
    }

    /**
     * 删除收藏商品
     */
    public function del_goods_collect(){
        $id = intval(request()->param('id'));
        if( $id == 0 ){
            $this->error(lang('user_collect_goods_is_failed'));
        }
        //删除
        try{
            Db::name('shop_goods_collect')->where('id',$id)->where('user_id',session('user.id'))->update(['status'=>0]);
        }catch (\Exception $exception){
            $this->error($exception->getMessage());
        }
        $this->success(lang('delete_success'));
    }


    public function cancelShopFocus($id)
    {
        $user_id = session('user.id');
        $res = Db::name('cust_shop_collect') ->where(['id'=>$id]) ->delete();
        if ($res !== false) {
            $this->success(lang('delete_success'));
        } else {
            $this->error('Delete failure,please try it again.');
        }

    }

    /**
     * 申请提现页面
     */
    public function withdrawals(){
        if (request()->isPost()) {
            $data = input();
            $user_id = session('user.id');
            $user_money = Db::name('users') ->where('id',$user_id) ->value('user_money');
            if ($data['money']>$user_money) {   //提现金额超出用户余额
                $this->error(lang('Withdrawals_more_then_user'));
            }
            $withdrawalsData = [
                'user_id' => $user_id,
                'create_time' => date("Y-m-d H:i:s"),
                'money' => $data['money'],
                'bank_name' => $data['bank_name'],
                'account_bank' => $data['account_bank'],
                'account_name' => $data['account_name'],
            ];
            $res = Db::name('user_withdrawals') ->insertGetId($withdrawalsData);
            if ($res!==false) {
                // 调整用户余额和冻结金额
                $ret = Db::name('users')->where('id',$user_id)->dec('user_money',$data['money'])->inc('frozen_money',$data['money']) ->update();
                $logData = [
                    'user_id' => $user_id,
                    'user_money' => -$data['money'],
                    'frozen_money' => $data['money'],
                    'change_time' => time(),
                    'desc' => lang('Withdrawals_account_log_desc'),
                ];
                Db::name('user_account_log') ->insert($logData);
                $this->success(lang('Withdrawals_submit_success'));
            } else {    //提现失败
                $this->error(lang('Withdrawals_submit_error'));
            }

        } else {
            return $this->fetch();
        }
    }

    public function ajaxWidthdrawLog()
    {
        $data = input();
        // slog('aaa','error');
        $status = isset($data['status'])?$data['status']:'all';
        $user_id = session('user.id');
        $where['user_id'] = $user_id;
        if ($status!='all') {
            $where['status']  = $data['status'];
        }
        $this->assign('status',$status);

        $recharges = Db::name('user_withdrawals') ->where($where) ->order('id DESC') ->paginate(tb_config('list_rows',1),'',['query'=>$data]);
        $list = $recharges -> all();
        $page = $recharges -> render();

        $this->assign('list',$list);
        $this->assign('page',$page);
        return $this->fetch();
    }

    /**
     * 安全设置
     */
    public function safety_settings(){
        $user_id = session('user.id');
        $user = Db::name('users') ->find($user_id);
        // dump($user);
        $this->assign('user',$user);
        return $this->fetch();
    }

    // 修改用户登录密码
    public function change_pass()
    {
        if (request()->isPost()) {

            // tbmall 专用
            if (empty(session('verifyData'))) {
                // 实名认证数据不完整，请完成实名认证后再行注册。
                $this->error(lang('Pwd_page_verify_data_null'));
            }

            $data = input();
            $user_id = session('user.id');
            $user = Db::name('users') ->find($user_id);
            if ($user['password'] !== encrypt_pwd($data['old_pass'])) {
                // 原密码校验失败
                $this->error(lang('Safe_old_pass_error'));
            }
            $res = Db::name('users') ->where('id',$user_id) ->setField('password',encrypt_pwd($data['new_pass']));
            if ($res!==false) {
                $this->success(lang('Safe_login_pass_chg_success'));
            } else {
                $this->error(lang('Safe_login_pass_chg_error'));
            }

        }else{
            return $this->fetch();
        }
    }

    // 验证用户邮箱
    public function validate_email()
    {
        if (request()->isPost()) {
            $data = input();
            $codeData = session('mail_code');

            if (empty($codeData) || $codeData['mail'] != $data['email'] || $codeData['code'] != $data['mail_code']) {
                $this->error(lang('Email_check_error'));
            }

            if ($codeData['use_time'] < time()) {
                $this->error(lang('Email_code_timeout'));
            }

            $res = Db::name('users') ->where('id',session('user.id')) ->update(['email'=>$data['email'],'email_validated'=>1]);
            if ($res !== false) {
                session('mail_code',null);
                $this->success(lang('Email_vali_success'));
            } else {
                $this->error(lang('Email_vali_fail'));
            }

        }else{
            return $this->fetch();
        }
    }

    // 修改用户邮箱
    public function change_email()
    {
        if (request()->isPost()) {
            $data = input();
            $codeData = session('mail_code');
            $user_mail = Db::name('users') ->where('id',session('user.id')) ->value('email');
            if ($user_mail != $data['old_email']) {
                $this->error(lang('Email_old_mail_error'));
            }

            if (empty($codeData) || $codeData['mail'] != $data['email'] || $codeData['code'] != $data['mail_code']) {
                $this->error(lang('Email_check_error'));
            }

            if ($codeData['use_time'] < time()) {
                $this->error(lang('Email_code_timeout'));
            }

            $res = Db::name('users') ->where('id',session('user.id')) ->update(['email'=>$data['email'],'email_validated'=>1]);
            if ($res !== false) {
                session('mail_code',null);
                $this->success(lang('Email_vali_success'));
            } else {
                $this->error(lang('Email_vali_fail'));
            }
        }else{
            return $this->fetch();
        }
    }

    // 发送动态验证码邮件
    public function sendEmailCode($mail,$act='')
    {
        $code = rand(100000,999999);
        $mail_code_time = empty(tb_config('mail_code_time',1)) ? 1800 : tb_config('mail_code_time',1);
        $code_arr = ['mail'=>$mail,'code'=>$code,'use_time'=>time()+$mail_code_time];
        session('mail_code',$code_arr);     //session中保存邮件验证码相关信息，包含收件地址，验证码及有效截止时间
        $time_min = tb_config('mail_code_time',1)/60;
        if ($act == 'change') {
            $res = sendMsg(0,$mail,'change_email',['code'=>$code,'time_min'=>$time_min]);
        } else {
            $res = sendMsg(0,$mail,'varify_email',['code'=>$code,'time_min'=>$time_min]);
        }

        // $res = sendMail($mail,$mail_title,$mail_model);
        if ($res) {
            $this->success(lang('Email_code_sended'));
        } else {
            $this->error(lang('Email_send_fail'));
        }

    }

    // 验证用户手机
    public function validate_mobile()
    {
        if (request()->isPost()) {
            $data = input();
            $code_res = check_sms_code($data['mobile'],$data['code']);
            if (!$code_res) {
                $this->error(lang('Phone_code_error'));
            }
            $res = Db::name('users') ->where('id',session('user.id')) ->update(['mobile'=>$data['mobile'],'mobile_validated'=>1]);
            if ($res !== false) {
                $this->success(lang('Phone_vali_success'));
            } else {
                $this->error(lang('Phone_vali_fail'));
            }

        }else{
            return $this->fetch();
        }
    }

    // 修改用户手机
    public function change_mobile()
    {
        if (request()->isPost()) {
            $data = input();
            // 校验用户收到的短信验证码
            $code_res = check_sms_code($data['mobile'],$data['code']);
            if (!$code_res) {
                $this->error(lang('Phone_code_error'));
            }
            $old_phone = Db::name('users') ->where('id',session('user.id')) ->value('mobile');
            if ($old_phone != $data['old_phone']) {
                $this->error(lang('Phone_old_phone_error'));
            }
            $res = Db::name('users') ->where('id',session('user.id')) ->update(['mobile'=>$data['mobile'],'mobile_validated'=>1]);
            if ($res !== false) {
                $this->success(lang('Phone_vali_success'));
            } else {
                $this->error(lang('Phone_vali_fail'));
            }
        }else{
            return $this->fetch();
        }
    }


    /**
     * 充值
     */
    public function recharge(){
        $payList = getPayList();
        $this->assign('payList',$payList);
        return $this->fetch();
    }


    /**
     * 提交充值信息
     * @return mixed
     */
    public function do_recharge()
    {
        if( request()->isPost() ){

            $data = request()->post();
            array_filter($data);
            // 验证数据
            $rule = [
                'recharge_num' => 'require|number|min:1',
                'pay_radio' => 'require',
            ];
            $check = api('sys','Verification','valiCheck',[$rule,$data,['recharge_num.require'=>'请选择充值的金额!','recharge_num.number'=>'充值金额错误!','recharge_num.min'=>'充值金额错误,不得小于1','pay_radio.require'=>'请选择支付方式!']]);
            if ( $check['code'] == 0 ){
                $this->error($check['error']);
            }

            $payList = getPayList();
            // 保存信息
            $recharge = new Recharge();
            $rechargeData = [
                'user_id' => session('user.id'),
                'nickname' => getTableValue('users','id='.session('user.id'),'nickname'),
                'order_sn' => $recharge->createSn(),
                'account' => $data['recharge_num'],
                'ctime' => time(),
                'pay_code' => $data['pay_radio'],
                'pay_name' => $payList[$data['pay_radio']]['name'],
                'pay_status' => 0,
            ];
            // 插入数据
            $insert = api('shop','Recharge','insert',[$rechargeData]);
            if( is_int($insert) && $insert > 0)
            {
                // 获取支付信息
                $payment = Payment::getPaymentInterface($data['pay_radio']);
                $payData = [
                    'body' => '余额充值',
                    'serial_sn' => $rechargeData['order_sn'].'_'.rand(1000,9000),
                    'money' => $rechargeData['account'],
                    'id' => $rechargeData['id'] = $insert,
                ];
                $code = $payment->get_code($payData,'');

                $this->assign('code_str', $code);
                $this->assign('pay_name',$payList[$data['pay_radio']]['name']);

                return $this->fetch();
            }else{
                $this->error('提交充值失败!');
                Log::error($insert);
            }
        }else{
            $this->redirect('index');
        }
    }

    // ajax充值记录
    public function ajaxChargeLog()
    {
        $data = input();
        $status = isset($data['status'])?$data['status']:'all';
        $user_id = session('user.id');
        $where['user_id'] = $user_id;
        if ($status!='all') {
            $where['pay_status']  = $data['status'];
        }else{
        }
        $this->assign('status',$status);

        $recharges = Db::name('user_recharge') ->where($where) ->order('id DESC') ->paginate(tb_config('list_rows',1),'',['query'=>$data]);
        $list = $recharges -> all();
        $page = $recharges -> render();

        $this->assign('list',$list);
        $this->assign('page',$page);
        return $this->fetch();
    }

    /**
     * 退货管理
     */
    public function return_goods(){
        $data = input();
        $where['user_id'] = session('user.id');
        if (isset($data['type'])) {
            $where['serv_type'] = $data['type'];
            $this->assign('type',$data['type']);
        }else{
            $this->assign('type','');
        }

        $returns = Db::name('shop_return_goods') ->where($where) ->paginate(tb_config('list_rows',1),'',['query'=>$data]);
        $return_list = $returns ->all();
        foreach ($return_list as $key => $return) {
            $order_goods = Db::name('shop_order_goods')->field('goods_id,goods_name,spec_title') ->where('id',$return['order_goods_id']) ->find();

            $return_list[$key]['goods_thumb'] = getTableValue('shop_goods',['id'=>$order_goods['goods_id']],'thumb');
            $return_list[$key]['goods'] = $order_goods;
        }
        $this->assign('list',$return_list);
        $this->assign('page',$returns->render());
        return $this->fetch();
    }

    /**
     * 佣金管理
     */
    public function rebate_list(){

    }

    /**
     * 我的推广
     */
    public function spread_list(){

    }

}