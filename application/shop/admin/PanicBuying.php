<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 抢购活动后台管理模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017
// +----------------------------------------------------------------------

// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------

namespace app\shop\admin;

use app\sys\controller\AdminBase;
use think\Db;
use app\common\JunCreater\JCreater;
use app\shop\validate\PanicBuying as PanicValidate;
use app\shop\model\ShopPromotionPanic;

class PanicBuying extends AdminBase
{
    protected $_DB;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_DB = new ShopPromotionPanic();
    }

    /**
     * 抢购促销列表
     * 后台抢购促销管理列表
     * 显示数据
     *      抢购标题
     *      抢购价格
     *      商品名称
     *      已 购 买
     *      开始时间
     *      结束时间
     *      状    态
     *      操    作
     * 数据表: tb_promotion_panic
     */
    public function index()
    {
        //获取当前数据
        $field = 'panic_id as id,title,goods,price,buy_num,start_time,end_time,status';
        $panicList = $this->_DB->field($field)->order('panic_id')->paginate(tb_config('list_rows',1,$this->lang));
        //配合后台表格
        // 是否显示表格的选择列？
        $table['show_check'] = 1;
        //title定义
        $table_head = [
            ['id','ID','text'],
            ['title',lang('prom_panic_table_title'),'text'],
            ['goods',lang('prom_panic_table_goods'),'text'],
            ['price',lang('prom_panic_table_price'),'text'],
            ['buy_num',lang('prom_panic_table_buy_num'),'text'],
            ['start_time',lang('start_time'),'text'],
            ['end_time',lang('end_time'),'text'],
            ['status',lang('content_list_title_6'),'switch','PanicBuying/switchs','id'],
            ['btn',lang('content_list_title_7'),'btn'],
        ];
        $table['tb_title'] = JCreater::table_header($table_head);
        $btn = [
            [lang('comm_btn_edit'),'frame',lang('comm_edit_frame_title'),'fa fa-fw fa-pencil-square-o','layui-btn-normal','PanicBuying/edit','id'],
            [lang('comm_btn_del'),'confirm',lang('comm_del_confirm_msg'),'fa fa-fw fa-trash-o','layui-btn-danger','PanicBuying/del','id'],
        ];
        $table['btn_lst'] = JCreater::table_btn($btn);
        // 设置列表页顶部按钮组
        $top_btn = [
            [lang('comm_btn_add'),'frame',lang('comm_add_frame_title'),'fa fa-fw fa-plus','layui-btn-normal','PanicBuying/add'],
            [lang('comm_btn_dels'),'confirm_form',lang('comm_dels_confirm_msg'),'fa fa-fw fa-trash-o','layui-btn-danger','PanicBuying/del'],
        ];
        $table['top_btn'] = JCreater::table_btn($top_btn);
        // 获取分页显示
        $page = $panicList->render();
        $this->assign('page', $page);
        $this->assign($table);
        $this->assign('data',$panicList);
        return $this->fetch('sys@Base:table');
    }

    /**
     * panic_add
     * 添加抢购活动
     *
     */
    public function add()
    {
        //================  表单项定义 =================
        $form['action'] = 'save';      //表单提交的目的路径
        $form['web_title'] = lang('prom_panic_add_title');   // 页面标题
        $this->assign($form);
        //================  表单项定义 end =================
        //查找所有用户等级
        $user_level = Db::name('user_level')->field('id,level_name')->select();
        $this->assign('user_level',$user_level);

        // 获取前台显示时间段
        $timeSLot = explode(',',tb_config('flash_buy_times',1));
        $this->assign('time_slot',$timeSLot);
        return $this->fetch('add');
    }

    /**
     * 抢购活动保存
     * ：检测抢购商品是否存在，检测抢购数量是否小于库存数量，检测商品价格是否小于当前售价
     */
    public function save()
    {
        $postData  = $this->post_data;
        //数据筛选
        $validate = new PanicValidate();
        $vaData = $validate->check($postData);
        if( !$vaData ) {
            $this->error($validate->getError());
        }

        // 数据验证通过，验证商品是否存在
        $field = 'id,shop_price,stock,status';
        $goods = Db::name('shop_goods')->where('id',$postData['goods'])->field($field)->find();
        if( !$goods ) {
            //商品不存在
            $this->error(lang('Goods_not_is_exist'));
        }else{
            //商品是否上架
            if( $goods['status'] !== 1 ) {//商品是否上架
                $this->error(lang('goods_no_shelves'));
            }elseif( $goods['shop_price'] < $postData['price'] ){//抢购价格是否大于售卖价格
                $this->error(lang('price_above_shop_price'));
            }
            //全部通过，保存进促销表和抢购表
            unset($postData['file']);
            //确认是编辑还是增加
            //获取规格json字符串,将json字符串转化为序列化数据
            $spec_json = htmlspecialchars_decode($postData['goodsspec']);
            $spec_arr = json_decode($spec_json,true);
            $spec_serialize = serialize($spec_arr);
            if( !empty($postData['panic_id']) )
            {
                $panic_id = $postData['panic_id'];
                $prom_id = Db::name('shop_promotion')->where(['p_type'=>1,'p_id'=>$panic_id])->value('prom_id');
                unset($postData['group_id']);
                Db::startTrans();
                try {
                    //保存进抢购表
                    $this->_DB->where('panic_id',$panic_id)->update($postData);
                    //保存进促销表
                    $promData['goods'] = $postData['goods'];
                    $promData['start_time'] = $postData['start_time'];
                    $promData['end_time'] = $postData['end_time'];
                    Db::name('shop_promotion')->where(['p_type'=>1,'p_id'=>$panic_id])->update($promData);
                    $pGoodsData['goods_id'] = $postData['goods'];
                    $pGoodsData['goods_spec'] = $spec_serialize;
                    $pGoodsData['price'] = $postData['price'];
                    Db::name('shop_promotion_goods')->where(['prom_id'=>$prom_id])->update($pGoodsData);
                    Db::commit();
                }catch(\Exception $e){
                    Db::rollback();
                    $this->error($e->getMessage());
                }
            }else{
                //保存抢购信息
                Db::startTrans();
                try {
                    //保存进抢购表
                    $savePanic = $this->_DB->insertGetId($postData);
                    //保存进促销表
                    $promData['p_type'] = 1;
                    $promData['p_id'] = $savePanic;
                    $promData['goods'] = $postData['goods'];
                    $promData['start_time'] = $postData['start_time'];
                    $promData['end_time'] = $postData['end_time'];
                    $saveProm = Db::name('shop_promotion')->insertGetId($promData);
                    $pGoodsData['prom_id'] = $saveProm;
                    $pGoodsData['goods_id'] = $postData['goods'];
                    $pGoodsData['goods_spec'] = $spec_serialize;
                    $pGoodsData['price'] = $postData['price'];
                    Db::name('shop_promotion_goods')->insert($pGoodsData);
                    Db::commit();
                }catch(\Exception $e){
                    Db::rollback();
                    $this->error($e->getMessage());
                }
            }
            $this->success(lang('prom_panic_save_success'));
        }
    }

    /**
     * 抢购编辑
     * 编辑抢购信息
     */
    public function edit()
    {
        //查找所有用户等级
        $user_level = Db::name('user_level')->field('id,level_name')->select();
        $this->assign('user_level',$user_level);
        //获取抢购数据
        $panicData = $this->_DB->where('panic_id',$this->request->param('id'))->find();
        $panicData['user_group_arr'] = explode(',',$panicData['user_group']);
        //获取商品规格信息
        $prom_id = getPromID(1,$panicData['panic_id']);
        $goodsspec = Db::name('shop_promotion_goods')->field('goods_id,goods_spec')->where('prom_id',$prom_id)->find();
        //定义商品信息及商品规格信息
        $panicData['goodsspec'] = json_encode(unserialize($goodsspec['goods_spec']),true);
        //商品详细信息
        $goods = Db::name('shop_goods')->where('id',$goodsspec['goods_id'])->field('id,title,shop_price,stock')->find();
        $this->assign('goods',$goods);

        $form['action'] = 'save';      //表单提交的目的路径
        $form['web_title'] = lang('prom_panic_edit_title').'：&nbsp;&nbsp;'.$panicData['title'];   // 页面标题
        $this->assign($form);
        // dump($panicData);
        $this->assign('panicData',$panicData);

        // 获取前台显示时间段
        $timeSLot = explode(',',tb_config('flash_buy_times',1));
        $this->assign('time_slot',$timeSLot);
        return $this->fetch('edit');
    }

    /**
     * 抢购商品删除，根据管理员权限设置删除方式
     */
    public function del($id = '')
    {
        //删除当前抢购活动
        if( $id == '' ) {
            $this->error(lang('PromID_is_null'));
        }
        //获取要删除的总表ID
        $prom_id_arr = Db::name('shop_promotion')->where(['p_type'=>1])->where('p_id','in',$id)->column('prom_id');
        //删除当前促销
        if( is_array($id) ) {
            Db::startTrans();
            try{
                $this->_DB->where('panic_id','in',$id)->delete();
                Db::name('shop_promotion')->where('prom_id','IN',$prom_id_arr)->delete();
                Db::name('shop_promotion_goods')->where('prom_id','IN',$prom_id_arr) ->delete();
                Db::commit();
            }catch (\Exception $e){
                Db::rollback();
                $this->error($e->getMessage());
            }
        }else{
            Db::startTrans();
            try{
                $this->_DB->where('panic_id',$id)->delete();
                Db::name('shop_promotion')->where('prom_id','IN',$prom_id_arr)->delete();
                Db::name('shop_promotion_goods')->where('prom_id','IN',$prom_id_arr) ->delete();
                Db::commit();
            }catch (\Exception $e){
                Db::rollback();
                $this->error($e->getMessage());
            }
        }
        $this->success(lang('delete_success'));
    }

    public function switchs()
    {
        if (request()->isPost()) {
            $data = input();
            foreach ($data as $key => $value) {
                $param_arr = explode('_', $key);
                if (count($param_arr) > 1) {
                    $length = count($param_arr);
                    $model = '';
                    for ($i = 0; $i < $length - 1; $i++) {
                        $model .= $param_arr[$i] . '_';
                    }
                    $id = $value;
                }
            }
            $res = $this->_DB->where('id', $id)->setField('status', $data['val']);

            if ($res !== false) {
                sys_log(lang('comm_update_success'), 1);  //操作结果写入系统日志
                $this->success(lang('comm_update_success'));
            } else {
                sys_log(lang('comm_update_error'), 0);  //操作结果写入系统日志
                $this->error(lang('comm_update_error'));
            }
        } else {
            sys_log(lang('comm_request_error'), 0);  //操作结果写入系统日志
            $this->error(lang('comm_request_error'));
        }
    }

}