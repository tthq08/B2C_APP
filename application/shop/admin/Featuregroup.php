<?php
/**
 * Created by PhpStorm.
 * User: iconblog
 * Date: 2017/9/7
 * Time: 上午9:36
 */

namespace app\shop\admin;

use app\sys\controller\AdminBase;
use think\Db;
use app\common\JunCreater\JCreater;

class Featuregroup extends AdminBase
{

    protected $type;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * 特征分组列表
     * @param $type
     * @return mixed
     */
    public function lists($type = 1)
    {
        $this->type = $type;
        // 获取当前特征分组列表
        $table['show_check'] = 1;

        $table_head = [
            ['id', 'ID', 'text'],
            ['name', lang('feature_group_list_field_name'), 'text'],
            ['add_time', lang('feature_group_list_field_add_time'), 'text'],
            ['item', lang('feature_group_list_field_item'), 'text'],
            ['sort', lang('feature_group_list_field_sort'), 'input', 'Featuregroup/sort','id'],
            ['status', lang('feature_group_list_field_status'), 'switch', 'Featuregroup/switchs','id'],
            ['btn', lang('content_list_title_7'), 'btn'],
        ];

        $table['tb_title'] = JCreater::table_header($table_head);

        $act_edit = isset($action_arr['edit']) ? $action_arr['edit'] : 'Featuregroup/edit';
        $act_del = isset($action_arr['del']) ? $action_arr['del'] : 'Featuregroup/del';
        $btn = [
            [lang('comm_btn_edit'), 'frame', lang('comm_edit_frame_title'), 'fa fa-fw fa-pencil-square-o', 'layui-btn-normal', $act_edit,'id'],
            [lang('comm_btn_del'), 'confirm', lang('comm_del_confirm_msg'), 'fa fa-fw fa-trash-o', 'layui-btn-danger', $act_del,'id'],
        ];
        $table['btn_lst'] = JCreater::table_btn($btn);

        // 设置列表页顶部按钮组
        $act_add = '/shop/FeatureGroup/add/type/'.$type;
        $act_dels = 'Featuregroup/dels';

        $top_btn = [
            [lang('comm_btn_add'), 'frame', lang('comm_add_frame_title'), 'fa fa-fw fa-plus', 'layui-btn-normal', $act_add,''],
            [lang('comm_btn_dels'), 'confirm_form', lang('comm_dels_confirm_msg'), 'fa fa-fw fa-trash-o', 'layui-btn-danger', $act_dels, []],
        ];

        $table['top_btn'] = JCreater::table_btn($top_btn);

        $this->assign($table);

        // 获取数据
        $dataList = api('shop','FeatureGroup','pageGroupList',[$type]);
        if( empty($dataList) )
        {
            $this->error('请检查你的地址是否正确!');
        }
        // 取出当前语言版本下的所有记录
        $list = $dataList->items();

        // 取几条显示
        $showNum = 3;
        $showNumArray = [];
        $showNumArray = array_pad($showNumArray,$showNum,'');
        foreach ($list as $key=>$item)
        {
            $list[$key]['add_time'] = datetime_format($item['add_time']);
            // 获取前两个分组成员名称
            $itemArrayEx = explode(',',$item['item']);
            $itemArray = array_intersect_key($itemArrayEx,$showNumArray);
            $itemNameArray = $this->getItemName($itemArray);
            if( empty($itemArrayEx[$showNum]) )
            {
                $list[$key]['item'] = implode(',',$itemNameArray);
            }else{
                $list[$key]['item'] = implode(',',$itemNameArray).'...';
            }
        }

        $this->assign('data', $list);
        // 获取分页显示
        $page = $dataList->render();
        $this->assign('page', $page);
        return $this->fetch('sys@Base/table');
    }


    /**
     * 添加特征分组
     * @param $type
     * @return mixed
     */
    public function add($type)
    {
        // 获取当前分类下的item
        $itemList = api('shop','FeatureGroup','itemListAll',[$type]);
        $this->assign('itemList',$itemList);
        $this->assign('type',$type);
        return $this->fetch();
    }


    /**
     * 编辑特征分组
     * @param $id
     * @return mixed
     */
    public function edit($id)
    {
        // 获取当前分组的信息
        $info = api('shop','FeatureGroup','get',[$id]);
        $this->type = $info['type'];

        $itemArray = explode(',',$info['item']);
        $selectItemList = [];
        foreach ($itemArray as $item=>$value)
        {
            // 获取名称
            $name = getFeatureGroupName($value);
            $selectItemList[$value] = $name;
        }
        $tmp['selectItemList'] = $selectItemList;

        $tmp['fg'] = $info;
        // 获取item
        $itemList = api('shop','FeatureGroup','itemListAll',[$info['type']]);
        $tmp['itemList'] = $itemList;
        $tmp['type'] = $info['type'];

        $this->assign($tmp);
        return $this->fetch();
    }


    /**
     * 保存特征分组
     * @return mixed
     */
    public function save()
    {
        $postData = request()->post();
        // 验证
        $rule = [
            'name' => 'require',
            'item' => 'require',
        ];
        $message = [
            'name.require' => '请输入分组名称',
            'item.require' => '请选择分组成员',
        ];
        $check = api('sys','Verification','valiCheck',[$rule,$postData,$message]);
        if( !empty($check) && $check['code'] == 0 )
        {
            $this->error($check['error']);
        }
        $postData['remark'] = empty($postData['remark']) ? '' : $postData['remark'];
        // 设置保存数据
        $data = ['type'=>$postData['type'],'name'=>$postData['name'],'item'=>$postData['item'],'sort'=>$postData['sort'],'status'=>$postData['status'],'remark'=>$postData['remark']];
        // 保存数据
        if( empty($postData['id']) )
        {
            $save = api('shop','FeatureGroup','insert',[$data]);
        }else{
            $save = api('shop','FeatureGroup','update',[$postData['id'],$data]);

        }
        if( $save['code'] == 0 )
        {
            $this->error($save['msg']);
        }
        $this->success($save['msg']);
    }


    /**
     * 删除分组
     * @param $id
     * @return mixed
     */
    public function del($id)
    {

        $data = ['trash'=>1];
        $res =	Db::name('shop_feature_group') ->where('id',$id) ->update($data);
        if ($res!==false) {
            sys_log(lang('comm_delete_success'),1);  //操作结果写入系统日志
            $this->success(lang('comm_delete_success'));
        } else {
            sys_log(lang('comm_delete_error'),0);  //操作结果写入系统日志
            $this->error(lang('comm_delete_error'));
        }

    }


    /**
     * 批量删除分组
     * @param $id
     * @return mixed
     */
    public function dels($id)
    {

        $data = ['trash'=>1];
        $res =	Db::name('shop_feature_group') ->where('id','in',$id) ->update($data);
        if ($res!==false) {
            sys_log(lang('comm_delete_success'),1);  //操作结果写入系统日志
            $this->success(lang('comm_delete_success'));
        } else {
            sys_log(lang('comm_delete_error'),0);  //操作结果写入系统日志
            $this->error(lang('comm_delete_error'));
        }

    }


    /**
     * 获取分组成员的名称
     * @param $itemArray
     * @return mixed
     */
    public function getItemName($itemArray)
    {
        // 获取
        $itemNameArray = array_map('getFeatureGroupName',$itemArray);

        return $itemNameArray;
    }


}