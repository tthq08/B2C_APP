<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 拼团后台管理模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017 深圳市俊网网络有限公司 [ http://www.junnet.net ]
// +----------------------------------------------------------------------
// | 官方网站：http://www.junnet.net
// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------


namespace app\shop\admin;

use app\sys\controller\AdminBase;
use app\shop\api\Pieces;
use app\shop\model\ShopPiecesGroup as PiecesModel;
use app\common\JunCreater\JCreater;
use think\Db;
use think\Validate;

class PiecesGroup extends AdminBase
{
    protected $DB;
    protected $pieces;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->pieces = new Pieces();
        $this->DB = Pieces::$DB;
    }

    /**
     * 拼团列表
     * @return mixed
     */
    public function index()
    {
        // 是否显示表格的选择列？
        $table['show_check'] = 1;
        //title定义
        $table_head = [
            ['id','ID','text'],
            ['title',lang('prom_group_table_title'),'text'],
            ['goods',lang('prom_group_table_goods'),'text'],
            ['price',lang('prom_group_table_price'),'text'],
            ['single_num','单个团人数','text'],
            ['start_time',lang('start_time'),'text'],
            ['end_time',lang('end_time'),'text'],
            ['status',lang('status'),'text'],
            ['btn',lang('content_list_title_7'),'btn'],
        ];
        $table['tb_title'] = JCreater::table_header($table_head);
        $btn = [
            [lang('comm_btn_edit'),'frame',lang('comm_edit_frame_title'),'fa fa-fw fa-pencil-square-o','layui-btn-normal','PiecesGroup/edit_pieces','id'],
            [lang('comm_btn_del'),'confirm',lang('comm_del_confirm_msg'),'fa fa-fw fa-trash-o','layui-btn-danger','PiecesGroup/del_pieces','id'],
        ];
        $table['btn_lst'] = JCreater::table_btn($btn);
        // 设置列表页顶部按钮组
        $top_btn = [
            [lang('comm_btn_add'),'frame',lang('comm_add_frame_title'),'fa fa-fw fa-plus','layui-btn-normal','PiecesGroup/add_pieces'],
            [lang('comm_btn_dels'),'confirm_form',lang('comm_dels_confirm_msg'),'fa fa-fw fa-trash-o','layui-btn-danger','PiecesGroup/del_pieces'],
        ];
        $table['top_btn'] = JCreater::table_btn($top_btn);
        // 获取分页显示
        $field = '';
        $groupList = Pieces::lists($field,tb_config('list_row',1,getLang()));

        $page = $groupList->render();
        $this->assign('page', $page);
        $this->assign($table);
        $this->assign('data',$groupList);
        return $this->fetch('sys@Base:table');
    }

    /**
     * 添加拼团信息
     */
    public function add_pieces()
    {
        $form['action'] = 'save_pieces';      //表单提交的目的路径
        $form['web_title'] = '添加拼团活动';   // 页面标题
        $this->assign($form);
        //查找所有用户等级
        $user_level = Db::name('user_level')->field('id,level_name')->select();
        $this->assign('user_level',$user_level);
        return $this->fetch();
    }

    /**
     * 修改拼团信息
     */
    public function edit_pieces()
    {
        //查找所有用户等级
        $user_level = Db::name('user_level') ->where('status',1)->field('id,level_name')->select();
        $this->assign('user_level',$user_level);
        //获取抢购数据\
        $piecesData = Pieces::get($this->request->param('id'));

        if( !is_array($piecesData) ){
            return $this->error($piecesData);
        }

        $piecesData['user_group_arr'] = explode(',',$piecesData['user_group']);
        //定义商品信息及商品规格信息
        if( !empty($piecesData['goods_spec']) ){
            $piecesData['goods_spec'] = json_encode(unserialize($piecesData['goods_spec_price']),true);
        }
        //商品详细信息
        $goods = Db::name('shop_goods')->where('id',$piecesData['goods'])->field('id,title,shop_price,stock')->find();
        $this->assign('goods',$goods);

        $form['action'] = 'save';      //表单提交的目的路径
        $form['web_title'] = lang('prom_group_edit_title').'：&nbsp;&nbsp;'.$piecesData['title'];   // 页面标题
        $this->assign($form);
        $this->assign('piecesData',$piecesData);
        return $this->fetch();
    }

    /**
     * 保存拼团信息
     */
    public function save_pieces()
    {
        //验证数据
        $postData = $this->post_data;
        $validate = new Validate();
        $rules = [
            'title' => 'require',
            'goods' => 'require|number|min:1',
            'single_num' => 'require|number|min:1',
        ];
        $validate->rule($rules);
        $vali = $validate->check($postData);
        if( $vali === false ){
            $this->error($validate->getError());
        }
        //传递的数据过滤//数据验证通过，验证商品是否存在
        $field = 'id,shop_price,stock,status';
        $goods = Db::name('shop_goods')->where('id',$postData['goods'])->field($field)->find();
        if( !$goods ) {
            //商品不存在
            $this->error(lang('Goods_not_is_exist'));
        }else{
            if( $goods['shop_price'] < $postData['price'] ){//抢购价格是否大于售卖价格
                $this->error(lang('price_above_shop_price'));
            }
            //全部通过，保存进促销表和抢购表
            unset($postData['file']);
            if( !empty($postData['pieces_id']) ) {
                $save= Pieces::save($postData['pieces_id'],$postData);
            }else{
                $save= Pieces::add($postData);
            }
            if( $save === true ){
                $this->success('拼团信息保存成功');
            }else{
                $this->error($save);
            }
        }

    }


    /**
     * 删除拼团信息
     */
    public function del_pieces($id = '')
    {
        if(is_array($id)){
            $id = implode(',',$id);
        }
        //删除
        $del = Pieces::delete($id);
        if( $del === true ){
            return $this->success('删除成功');
        }
        else{
            return $this->error($del);
        }
    }


    /**
     * 拼团订单
     * @return mixed
     */
    public function orderList()
    {
        $param = request()->param();
        $condition = '`status` <> -1';

        if( !empty($param['user']) ){
            $userList = Db::name('users')->where('`id`="'.$param['user'].'" or `nickname` like "%'.$param['user'].'%" or `email` like "%'.$param['user'].'%"')->column('id');
            $condition .= ' and `user_id` in('.implode(',',$userList).') ';
        }
        if( !empty($param['pieces']) && $param['pieces'] > 0 ){
            $condition .= ' and `id` = "'.intval($param['pieces']).'"';
        }
        if( isset($param['is_pay']) ){
            if( is_array($param['is_pay']) ){
                $condition .= ' and `is_pay` in('.implode(',',$param['is_pay']).')';
            }else{
                $condition .= ' and `is_pay` = '.intval($param['is_pay']);
            }
        }
        if( !empty($param['is_return']) ){
            $condition .= ' and `status` = 2';
        }
        $this->assign('param',$param);
        $list = api('shop','PiecesOrder','orderAdminList',[$condition]);
        $data = $list->items();
        foreach ($data as $key=>$item){
            // 获取用户昵称
            $data[$key]['user'] = api('member','User','userInfo',[$item['user_id'],'id,nickname,mobile']);
            if( !empty($data[$key]['user']) ){
                $data[$key]['user']['nickname'] = urldecode($data[$key]['user']['nickname']);
            }
            // 订单状态
            $data[$key]['status_string'] = '';
            if( $data[$key]['status'] == 1 ){
                $data[$key]['status_string'] = '正常';
            }elseif( $data[$key]['status'] == 2 ){
                $data[$key]['status_string'] = '已退还订单';
            }
            // 拼团信息
            $data[$key]['pieces'] = Pieces::get($item['pieces_id']);
            // 团长信息
            $data[$key]['head'] = api('member','User','userInfo',[$item['head_id'],'id,nickname,mobile']);
            if( !empty($data[$key]['head']) ){
                $data[$key]['head']['nickname'] = urldecode($data[$key]['head']['nickname']);
            }
        }

        $this->assign('data',$data);
        $this->assign('page',$list->render());
        return $this->fetch();
    }


    /**
     * 查看小团列表
     * @return mixed
     */
    public function smallOrder()
    {
        $param = request()->param();
        if( empty($param['pieces']) ){
            $this->error('请选择要查看的拼团');
        } elseif ( empty($param['head']) ){
            $this->error('请选择团长');
        }
        $data = api('shop','PiecesOrder','smallPiecesList',[$param['pieces'],$param['head']]);
        foreach ($data as $key=>$item){
            // 获取用户昵称
            $data[$key]['user'] = api('member','User','userInfo',[$item['user_id'],'id,nickname,mobile']);
            // 订单状态
            $data[$key]['status_string'] = '';
            if( $data[$key]['status'] == 1 ){
                $data[$key]['status_string'] = '正常';
            }elseif( $data[$key]['status'] == 2 ){
                $data[$key]['status_string'] = '已退还订单';
            }
            // 拼团信息
            $data[$key]['pieces'] = Pieces::get($item['pieces_id']);
            // 团长信息
            $data[$key]['head'] = api('member','User','userInfo',[$item['head_id'],'id,nickname,mobile']);
        }
        $this->assign('data',$data);
        return $this->fetch();
    }


    /**
     * 查看拼团订单详情
     * @return mixed
     */
    public function viewOrder()
    {

    }


    /**
     * 删除拼团
     * @return mixed
     */
    public function delete()
    {
        $id = request()->param('id');
        if( empty($id) ){
            $this->error('请选择需要删除的拼团订单!');
        }
        $order = api('shop','PiecesOrder','get',[$id]);
        if( empty($order) ) {
            $this->error('当前拼团订单不存在!');
        } elseif ( !empty($order['order_id']) ) {
            $this->error('当前拼团订单已生成为正式商品订单,不可删除!');
        } elseif ( $order['is_pay'] == 1 && $order['is_return'] = 0 ) {
            $this->error('当前拼团订单已经支付,请退还后删除!');
        }
        $delete = api('shop','PiecesOrder','delete',[$id]);
        if( $delete !== true ){
            $this->error($delete);
        }
        $this->success('删除成功!');
    }


    /**
     * 退回拼团订单
     * (款项直接退回用户余额)
     * @return mixed
     */
    public function returnOrder()
    {
        $id = request()->param('id');
        if( empty($id) ){
            $this->error('请选择需要退还的拼团订单!');
        }
        $order = api('shop','PiecesOrder','get',[$id]);
        if( empty($order) ) {
            $this->error('当前拼团订单不存在!');
        } elseif ( !empty($order['order_id']) ) {
            $this->error('当前拼团订单已生成为正式商品订单,无法退还!');
        } elseif ( $order['is_return'] == 1 ) {
            $this->error('当前拼团订单已经退还,无需重复退还!');
        }
        $return  = api('shop','PiecesOrder','returnOrder',[$id]);
        if( $return !== true ){
            $this->error($return);
        }
        $this->success('退还成功!');
    }



}