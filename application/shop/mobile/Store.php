<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台店铺模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017     
// +----------------------------------------------------------------------
// | 作者: 余剑华 <528526198@qq.com>
// +----------------------------------------------------------------------


namespace app\shop\mobile;

use app\common\validate\userAddress;
use think\Db;
use \app\sys\controller\Api;


class Store extends HomeBase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
	}

	public function store($id)
	{
		if ($id=0) {
			$this->redirect(url('shop/index/index'));
		}
		if (empty($id)) {
			$this->error('店铺参数非法');
		}
		$shop = Db::name('cust_shop') ->find($id);
		$this->assign('store',$shop);
		$this->assign('shop_id',$id);

		$cust = Db::name('cust') ->find($shop['cust_id']);
		$this->assign('cust',$cust);

		$is_focused = 'false';
		if (!empty(session('user.id'))) {
			$is_focused = Db::name('cust_shop_collect') ->where(['user_id'=>session('user.id'),'shop_id'=>$id,'status'=>1]) ->value('id');
			$is_focused = empty($is_focused)?'false':'true';
		}
		$this->assign('is_focused',$is_focused);
		return $this->fetch();
	}

	public function index($id='')
	{
		if (empty($id)) {
			$this->error(lang('Store_index_param_error'));
		}
		$this->assign('shop_id',$id);

		$shop = Db::name('cust_shop') ->find($id);
		$this->assign('store',$shop);

		$is_focused = 'false';
		if (!empty(session('user.id'))) {
			$is_focused = Db::name('cust_shop_collect') ->where(['user_id'=>session('user.id'),'shop_id'=>$id,'status'=>1]) ->value('id');
			$is_focused = empty($is_focused)?'false':'true';
		}
		$this->assign('is_focused',$is_focused);

		// 店铺自定义导航
		$shop_nav = Db::name('cust_nav') ->where('shop_id',$id) ->select();
		$this->assign('shop_nav',$shop_nav);

		// 店铺的所有店内分类
		$shop_cates = $this->getsubCate(0,$id);
		$this->assign('shop_cates',$shop_cates);

		// 店铺幻灯图
		$shop_ppt = Db::name('cust_shop_ppt') ->where(['shop_id'=>$id,'status'=>1]) ->order('sort ASC') ->limit(1) ->select();
		$this->assign('shop_ppt',$shop_ppt);

		// 店铺推荐位
		$shop_commond = Db::name('cust_shop_featured') ->where(['shop_id'=>$id,'status'=>1]) ->order('sort ASC') ->select();
		foreach ($shop_commond as $key => $commond) {
			$goods_ids = Db::name('cust_shop_featured_goods') ->field('GROUP_CONCAT(goods_id) as ids') ->where(['pid'=>$commond['id'],'status'=>1]) ->order('sort ASC') ->find();
			$shop_commond[$key]['goods'] = Db::name('shop_goods') ->where('id','IN',$goods_ids['ids']) ->select();
		}
		// dump($shop_commond);
		$this->assign('shop_commond',$shop_commond);
		// dump($shop);
		return $this->fetch();
	}

	// 手动点击加载更多商品时获取商品数据
    public function ajaxNewestGoods($id=0,$page,$nums=4,$is_new=0)
    {
        $span = $nums;
        $where['shop_id'] = $id;
        $where['status'] = 1;
        $where['is_audit'] = 1;
        $where['trash'] = 0;
        if($is_new==1){
            $where['is_new'] = 1;
        }
        $goods = Db::name('shop_goods') ->where($where) ->order('create_time DESC') ->limit($page*$span,$span) ->select();
        $this->assign('goods_list',$goods);
        return $this->fetch();
    }

	public function collect_shop($id)
	{
		if (empty(session('user.id'))) {
            return ['code'=>4001,'msg'=>'用户尚未登录，请先登录'];
            // $this->error('用户尚未登录，请先登录');
        }

        $saveData['user_id'] = session('user.id');
        $saveData['shop_id'] = $id;
	    $saveData['status'] =1;
	    $saveData['add_time'] = date('Y-m-d H:i:s',time());
	    //检测用户是否收藏
        $is_c = Db::name('cust_shop_collect')->where(['user_id'=>session('user.id'),'shop_id'=>$id,'status'=>1])->value('id');
        if( $is_c >0  ){
            $res = Db::name('cust_shop_collect') ->delete($is_c);
            if ($res !== false) {
            	return ['code'=>2,'msg'=>'店铺取消关注成功'];
            } else {
            	$this->error('取消关注失败，请重试');
            }
            
        }
	    try{
            Db::name('cust_shop_collect')->insert($saveData);
        }catch (\Exception $exception){
	        $this->error($exception->getMessage());
        }
        $this->success('店铺关注成功');
	}

	public function lists($id=0)
	{
		$param = explode('--', $id);
		$cate_id = $param[0];
		$filter_param['id'] = $cate_id;
		$sort = ['sort'=>'','sort_asc'=>''];
        if (!empty($param[1])) {
            $order_param = explode('-', $param[1]);  //排序条件
            $sort['sort'] = $order_param[0];
            $sort['sort_asc'] = $order_param[1];
        }
        $this->assign($sort);
        if (isset($order_param)) {
            $order = [$order_param[0]=>$order_param[1],'id'=>'DESC'];
        }else{
            $order = ['sales_sum'=>'DESC','id'=>'DESC'];
        }

        $this->assign('filter_param',$filter_param);

		$cate = Db::name('cust_shop_cate') ->find($cate_id);
		$shop_id = $cate['shop_id'];

		$isAjax = request()->isAjax();
        if (!$isAjax) {
			// 店铺幻灯图
			$shop_ppt = Db::name('cust_shop_ppt') ->where(['shop_id'=>$shop_id,'status'=>1]) ->order('sort ASC') ->limit(1) ->select();
			$this->assign('shop_ppt',$shop_ppt);

			// 店铺自定义导航
			$shop_nav = Db::name('cust_nav') ->where('shop_id',$shop_id) ->select();
			$this->assign('shop_nav',$shop_nav);

			// 店铺的所有店内分类
			$shop_cates = $this->getsubCate(0,$shop_id);
			$this->assign('shop_cates',$shop_cates);

			// 获取当前分类信息
			$shop = Db::name('cust_shop') ->find($shop_id);
			$this->assign('store',$shop);        	
        }

		// 取当前分类的所有下属分类
		$subCate = $this->getsubCate($cate_id,$shop_id);
		$goods_cates = [];
		foreach ($subCate as $key => $cate) {
			$goods_cates[] = $cate['id'];
		}
		$goods_cates[] = $cate_id;

		// 取出当前分类及所有下属分类的所有商品
		$goods = Db::name('shop_goods') ->where(['shop_cate'=>['IN',$goods_cates],'shop_id'=>$shop_id,'status'=>1,'trash'=>0]) ->order($order) ->paginate(4);
		$goods_list = $goods->all();
		$page = $goods->render();
		// dump($goods_list);
		$this->assign('goods_list',$goods_list);
		$this->assign('page',$page);

		$tpl = $isAjax?'ajaxgoodslist':'';
		return $this->fetch($tpl);
	}

	// 递归获取店铺子分类
	protected function getsubCate($id=0,$shop_id=0)
    {
        $shop_cate = Db::name('cust_shop_cate') ->where(['shop_id'=>$shop_id,'pid'=>$id,'status'=>1]) ->select(); 
        foreach ($shop_cate as $key => $cate) {
            $shop_cate[$key]['sub'] = $this->getsubCate($cate['id']);
        }
        return $shop_cate;
    }

    protected function getSalesRank($shop_id,$nums=10)
    {
    	$rank_goods = Db::name('shop_goods') ->where('shop_id',$shop_id) ->order('sales_sum DESC') ->limit($nums) ->select();
    	return $rank_goods;
    }

}
?>