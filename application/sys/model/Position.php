<?php
/**
 * Created by PhpStorm.
 * User: iconblog
 * Date: 2017/10/18
 * Time: 上午9:42
 */

namespace app\sys\model;


use think\Db;
use think\Exception;
use think\Log;
use think\Model;

class Position extends Model
{
    protected $table = 'tb_sys_position';

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    public function positionBind()
    {
        return $this->hasMany('PositionBind','position');
    }


    /**
     * 获取后台显示列表
     * @return Model
     */
    public function adminList()
    {
        $listRow = tb_config('list_row',1);
        $list = $this->order('sort asc,id desc')->paginate($listRow);
        return $list;
    }


    /**
     * 保存推荐位
     * @param $data
     * @return array
     */
    public function savePosition($data)
    {
        $saveData = [
            'name' => $data['name'],
            'position' => $data['position'],
            'icon' => empty($data['icon']) ? '' : $data['icon'],
            'bind_category' => empty($data['bind_category']) ? '0' : $data['bind_category'],
            'bind_column' => empty($data['bind_column']) ? '0' : $data['bind_column'],
            'nav' => empty($data['nav']) ? '' : $data['nav'],
            'max_num' => empty($data['max_num']) ? 0 : $data['max_num'],
            'sort' => empty($data['sort']) ? 0 : $data['sort'],
            'remark' => empty($data['remark']) ? '' : $data['remark'],
        ];

        try{
            if( empty($data['id']) ){
                $this->save($saveData);
            }else{
                $position = self::get($data['id']);
                if( empty($position) ){
                    throw new Exception('当前推荐位不存在!');
                }
                $position->save($saveData);
            }
        }catch (\Exception $e){
            return ['code'=>0,'error'=>$e->getMessage()];
        }
        return ['code'=>1];
    }



    /**
     * 删除推荐位
     * @param $id
     * @return mixed
     */
    public function deletePosition($id)
    {
        Db::startTrans();
        try{
            // 删除推荐位
            $this->where('id',$id)->delete();
            // 删除推荐的数据
            Db::name('sys_position_bind')->where('position',$id)->delete();
            Db::commit();
        }catch (\Exception $e){
            Db::rollback();
            return ['code'=>0,'error'=>$e->getMessage()];
        }
        return ['code'=>1];
    }


    /**
     * 批量删除推荐位
     * @param $ids
     * @return mixed
     */
    public function deletesPosition($ids)
    {
        Db::startTrans();
        try{
            // 删除推荐位
            $this->where('id','in',$ids)->delete();
            // 删除推荐的数据
            Db::name('sys_position_bind')->where('position','in',$ids)->update(['trash'=>1]);
            Db::commit();
        }catch (\Exception $e){
            Db::rollback();
            return ['code'=>0,'error'=>$e->getMessage()];
        }
        return ['code'=>1];
    }



    /**
     * 搜索推荐位
     * @param $search
     * @return mixed
     */
    public static function searchGoods($search)
    {
        $data = Db::name('sys_position')->where('id',$search)->whereOr('name','like','%'.$search.'%')->whereOr('position',$search)->select();
        return $data;
    }



    /**
     * 保存绑定数据
     * @param $data
     * @return mixed
     */
    public function saveBind($data)
    {
        try{
            Db::name('sys_position_bind')->where(['type'=>$data[0]['t_id'],'t_id'=>$data[0]['t_id'],'trash'=>0])->update(['trash'=>1]);
            foreach ($data as $item){
                $item['sort'] = empty($item['sort']) ? 0 : $item['sort'];
                $item['status'] = empty($item['status']) ? '0' : $item['status'];
                $item['trash'] = 0;
                if( !empty($item['id']) ){
                    $id = $item['id'];
                    unset($item['id']);
                    Db::name('sys_position_bind')->where('id',$id)->update($item);
                }else{
                    Db::name('sys_position_bind')->insert($item);
                }
            }
        }catch (\Exception $e) {
            Log::error($e);
            return ['code'=>0,'error'=>$e->getMessage()];
        }
        return ['code'=>1];
    }



    /**
     * 后台获取绑定
     * @param $type
     * @param $t_id
     * @return mixed
     */
    public function adminGetBind($type,$t_id)
    {
        $condition =['type'=>$type,'t_id'=>$t_id,'trash'=>0];
        $data = Db::name('sys_position_bind')->where($condition)->select();
        foreach ($data as $key=>$item){
            $position = Position::get($item['position']);
            $data[$key]['position_name'] = $position['name'];
        }
        return $data;
    }




    /**
     * 后台管理推荐位下的数据
     * @param $position
     * @return mixed
     */
    public function adminBindList($position)
    {
        $condition = ['position'=>$position,'trash'=>0];
        $pageRow = tb_config('list_rows',1);
        $data = Db::name('sys_position_bind')->where($condition)->paginate($pageRow);
        return $data;
    }


    /**
     * 删除推荐位
     * @param $id
     * @return mixed
     */
    public function deleteBind($id)
    {
        Db::startTrans();
        try{
            // 删除推荐的数据
            Db::name('sys_position_bind')->where('id',$id)->update(['trash'=>1]);
            Db::commit();
        }catch (\Exception $e){
            Db::rollback();
            return ['code'=>0,'error'=>$e->getMessage()];
        }
        return ['code'=>1];
    }


    /**
     * 批量删除推荐位
     * @param $ids
     * @return mixed
     */
    public function deletesBind($ids)
    {
        Db::startTrans();
        try{
            // 删除推荐的数据
            Db::name('sys_position_bind')->where('id','in',$ids)->update(['trash'=>1]);
            Db::commit();
        }catch (\Exception $e){
            Db::rollback();
            return ['code'=>0,'error'=>$e->getMessage()];
        }
        return ['code'=>1];
    }



}