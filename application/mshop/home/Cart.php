<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台购物车模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017
// +----------------------------------------------------------------------

// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------


namespace app\mshop\home;

use app\mshop\model\ShopCart;
use app\shop\api\Goods;
use app\shop\api\OrderPay;
use think\Db;
use think\Request;

class Cart extends HomeBase
{
    protected $login_id;
    protected $_DB;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_DB = new ShopCart();

        //查看当前用户是否登录，如果没有登录取当前的session_id
        $this->login_id = session('user.id');
        if (empty($this->login_id) || $this->login_id == '') {
            $this->login_id = $this->session_id;
        }
    }

    public function cart()
    {

        if (request()->post()) {
            $postData = request()->post();
            //修改所有选中为取消选中
            $all_cart = implode(',', array_keys($postData['goods_num']));
            $this->_DB->where('id in(' . $all_cart . ')')->update(['selected' => 0]);
            if (!empty($postData['cart_select'])) {
                //修改选中的为选中
                $selected = implode(',', array_keys($postData['cart_select']));
                $this->_DB->where('id in(' . $selected . ')')->update(['selected' => 1]);
            }
            //修改购物车所有商品数量
            foreach ($postData['goods_num'] as $key => $value) {
                $this->_DB->where('id', $key)->update(['goods_num' => $value]);
            }
        }
        //通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id='$login_id' OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        // dump($cartArr);
        $total_price = 0;
        $cart_num = 0;
        $select_num = 0;
        //获取当前店铺ID的信息
        $cart = Db::name('shop_cart')->where($where)->where('status', 1)->select();
        foreach ($cart as $item) {
            if ($item['selected'] == 1) {
                $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                $select_num += $item['goods_num'];
            }
            $cart_num += $item['goods_num'];
        }
        $cartList = $cart;

        //$total_price = priceFormat($total_price,1);

        $this->assign('cartList', $cartList);
        $this->assign('total_price', $total_price);
        $this->assign('cart_num', $cart_num);
        $this->assign('select_num', $select_num);
        $recomm_goods = Db::name('shop_goods')->where(['trash' => 0, 'is_comm' => 1, 'is_audit' => 1])->order('id DESC')->limit(6)->select();
        $this->assign('recomm_goods', $recomm_goods);
        return $this->fetch();
    }

    public function ajaxCartList()
    {
        if (request()->post()) {
            $postData = request()->post();
            //修改所有选中为取消选中
            $all_cart = implode(',', array_keys($postData['goods_num']));
            $this->_DB->where('id in(' . $all_cart . ')')->update(['selected' => 0]);
            if (!empty($postData['cart_select'])) {
                //修改选中的为选中
                $selected = implode(',', array_keys($postData['cart_select']));
                $this->_DB->where('id in(' . $selected . ')')->update(['selected' => 1]);
            }
            //修改所有购物车商品的数量
            foreach ($postData['goods_num'] as $key => $value) {
                $goods_id = $this->_DB->where('id', $key)->value('goods');
                $allow_max = Db::name('shop_goods')->where('id', $goods_id)->value('max_buy');
                if ($allow_max > 0 && $allow_max < $value) {
                    return ['code' => 0, 'msg' => lang('Cart_nums_more_than_allow', [$allow_max]), 'data' => ['cart_id' => $key, 'nums' => $allow_max]];
                }
                $this->_DB->where('id', $key)->update(['goods_num' => $value]);
            }
        }
        // 通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        $total_price = 0;
        //获取当前店铺ID的信息
        $cart = Db::name('shop_cart')->where($where)->where('status', 1)->select();
        $newCart = [];
        $check_num = 0;
        foreach ($cart as $kis => $item) {
            if ($item['selected'] == 1) {
                $check_num += 1;
            }
            $item['shipping_txt'] = '包邮';

            if ($item['selected'] == 1) {
                $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
            }
            $newCart[] = $item;
        }
        $cartList = $newCart;

        //$total_price = priceFormat($total_price,1);
        // print_r($cartList);
        $this->assign('cartList', $cartList);
        $this->assign('check_num', $check_num);
        $this->assign('total_price', $total_price);
        return $this->fetch();
    }


    public function cart2()
    {
        // 检测用户是否登录
        if (empty(session('user.id'))) {
            $this->error(lang('cart_please_login'), url('mshop/user/login'));
        }
        if ( empty(request()->param('cart')) ){
            $cartIdArr = Db::name('shop_cart')->where('user_id', $this->login_id)->where('status', 1)->where('selected', 1)->column('id');
        }else{
            if( mb_strlen(request()->param('cart')) == mb_strlen((int)request()->param('cart')) ){
                $cart = Db::name('shop_cart')->where('id', request()->param('cart'))->where('status', 1)->where('selected', 1)->find();
                if( empty($cart) || $cart['user_id'] != session('user.id') ){
                    $this->redirect('mshop/Cart/cart');
                }
                $cartIdArr[] = $cart['id'];
            }else{
                $this->redirect('mshop/Cart/cart');
            }
        }
        if (count($cartIdArr) == 0) {
            $this->redirect('mshop/Cart/cart');
        }
        // 获取默认地址
        $address = Db::name('user_address')->where(['is_default' => 1, 'user_id' => session('user.id')])->find();
        if (empty($address)) {
            $address = Db::name('user_address')->where(['user_id' => session('user.id')])->find();
        }
        if (!empty($address)) {
            $address['address'] = getAddressName($address['province']) . getAddressName($address['city']) . getAddressName($address['district']) . $address['address'];
        }
        $this->assign('addr', $address);

        // 实例化计算类
        $orderPay = new OrderPay();
        // 设置用户
        $orderPay->user = session('user.id');
        // 放入订单
        $orderPay->cartList = $cartIdArr;
        $orderPayInfo = json_decode($orderPay->get(), 1);
        // 获取biz券
        $bizCouponArray = api('shop', 'Coupon', 'userBizCoupons', [session('user.id')]);
        $bizCouponList = [];
        foreach ($bizCouponArray as $key => $coupon) {
            $bizCouponList[$coupon['id']] = $coupon;
            $bizCouponList[$coupon['id']]['type'] = 2;
        }

        // 店铺优惠券
        $couponList = $orderPay->couponList;

        $shopOrder = $orderPayInfo['order_list'];
        $shopOrder['payable_price'] = $shopOrder['payable_price'] + $shopOrder['postage'];
        $cartList = $orderPayInfo['goods_list'];


        foreach ($couponList as $k => $coupon) {
            if ($coupon['coupon_level'] == 1) {
                $couponList[$k]['type'] = 2;
                $couponList[$k]['quota_text'] = $coupon['quota'] . '元';
            } else {
                $couponList[$k]['type'] = 1;
                if ($coupon['discount_type'] == 2) {
                    $couponList[$k]['quota_text'] = $coupon['quota'] . '元';
                } elseif ($coupon['discount_type'] == 1) {
                    $couponList[$k]['quota_text'] = ($coupon['quota'] / 10) . '折';
                }
            }
        }

        $this->assign('couponList', $couponList);
        $this->assign('cartList', $cartList);
        $this->assign('shopOrder', $shopOrder);
        $this->assign('payable_price', $orderPayInfo['order_pay']['payable_price'] + $orderPayInfo['order_pay']['postage']);
        $this->assign('postage', $orderPayInfo['order_pay']['postage']);
        $this->assign('total_price', $orderPayInfo['order_pay']['total_price']);
        $this->assign('discount_price', $orderPayInfo['order_pay']['discount_price']);
        return $this->fetch();
    }


    // 选择收货地址
    public function choose_addr($id = 0)
    {
        $this->assign('curr_id', $id);
        //获取用户收货地址
        $addressList = Db::name('user_address')->where('user_id', session('user.id'))->where('status', 1)->order('is_default desc')->select();
        foreach ($addressList as $key => $address) {
            $addressList[$key]['address'] = getAddressName($address['province']) . getAddressName($address['city']) . getAddressName($address['district']) . $address['address'];
        }
        $this->assign('lists', $addressList);
        return $this->fetch();
    }

    public function getAddrInfo($id = '')
    {
        $address = Db::name('user_address')->find($id);
        $this->assign('addr', $address);
        return $this->fetch();
    }

    public function cart3()
    {
        //检测用户是否登录
        if (empty(session('user.id'))) {
            $this->error(lang('cart_please_login'));
        }
        //检测是否选择收货地址
        if (request()->post('act') == 'submit_order') {
            if (request()->post('address_id') == '') {
                $this->error(lang('cart_select_address'));
            }
        }

        $cartArr = Db::name('shop_cart')->where('user_id', $this->login_id)->where('status', 1)->where('selected', 1)->column('id');
        // 实例化计算类
        $orderPay = new OrderPay();
        // 设置用户
        $orderPay->user = session('user.id');
        // 放入订单
        $orderPay->cartList = $cartArr;
        // 获取数据
        if (request()->post('act') == 'submit_order') {
            // 放入收货地址id
            $orderPay->address_id = request()->post('address_id');
            $orderPayData = $orderPay->insert();
        } else {
            $orderPayData = $orderPay->get();
        }
        $orderPayData = json_decode($orderPayData, 1);

        $data['order_id'] = empty($orderPayData['serial_id']) ? '' : $orderPayData['serial_id'];
        $data['payable_price'] = priceFormat($orderPayData['order_pay']['payable_price'], 1);
        $data['total_price'] = priceFormat($orderPayData['order_pay']['total_price'], 1);
        $data['discount_price'] = priceFormat($orderPayData['order_pay']['discount_price'], 1);
        $data['coupon_price'] = priceFormat($orderPayData['order_pay']['coupon_price'], 1);

        $this->success($data);
    }


    /**
     * 用户地址设置
     */
    public function set_address()
    {
        if (request()->post()) {
            $data = input();
            $this->assign('addr', $data);
            return $this->fetch('address_html');
        } else {
            //获取一级地址
            // $province = Api::getChildAddress(0,1);
            // $this->assign('province',$province);
            return $this->fetch('address_do');
        }
    }

    public function cart4()
    {
        //解析下过来的ID
        if (empty(request()->param('serial_id')) && !empty(request()->param('order_id'))) {
            //保存信息到order_pay表
            $order_id = request()->param('order_id');
            //获取订单信息
            $orderInfo = Db::name('shop_order')->where(['id' => $order_id])->field('id,total_price,user_id,payable_price,discount_price,coupon_price,postage,order_prom_price,balance_price,points_price,change_mny,is_pay')->find();
            if ($orderInfo == '') {
                $this->error(lang('cart_order_failed'));
            }
            //检测订单是否存在
            if ($orderInfo['is_pay'] == 1) {
                $this->redirect(U('mshop/user/order_detail', ['id' => $order_id]));
            }
            $serialData = $orderInfo;
            $serialData['order'] = $serialData['id'];
            unset($serialData['id']);
            $serialData['serial_sn'] = createSerialSn();
            $serialData['add_time'] = date('Y-m-d H:i:s', time());
            $serialData['is_pay'] = 0;
            try {
                $save = Db::name('shop_order_pay')->insertGetId($serialData);
            } catch (\Exception $e) {
                $this->error($e->getMessage());
            }
            $serialData['id'] = $save;
            $serialData['payable_price'] = $serialData['total_price'] + $serialData['postage'];

        } else {
            $id = request()->param('serial_id');
            if ($id == '') {
                $this->error(lang('cart_order_failed'));
            }
            // $serialData = Db::name('shop_order_pay')->where(['id'=>$id,'user_id'=>session('user.id')])->find();
            $serialData = Db::name('shop_order_pay')->where(['id' => $id])->find();
            if (empty($serialData)) {
                $this->redirect('/');
            }
            $serialData['payable_price'] = $serialData['total_price'] + $serialData['postage'];
        }
        if ($serialData['is_pay'] == 1) {
            $this->redirect(U('mshop/user/order_detail', ['id' => intval($serialData['order'])]));
        }
        //获取流水ID
        if ($serialData == '') {
            $this->error('订单错误');
        }
        $orderIdArr = explode(',', $serialData['order']);
        foreach ($orderIdArr as $item => $value) {
            //获取订单信息
            $orderArr[$value] = Db::name('shop_order')->where(['id' => $value])->field('id,order_sn,total_price,payable_price,discount_price,balance_price,points_price,coupon_price,last_pay_time,postage')->find();
            $orderArr[$value]['payable_price'] += $orderArr[$value]['postage'];
        }
        $payList = getPayList();
        $this->assign('serial', $serialData);
        $this->assign('order', $orderArr);
        $this->assign('payList', $payList);
        $client = 'phone';
        if (strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') !== false) {
            $client = 'wechat';
            $this->assign('time_now', time());
        }
        $this->assign('client', $client);
        return $this->fetch();
    }


    /**
     * 删除购物车商品
     * @return mixed
     */
    public function ajaxDelCart()
    {
        $cart_id = request()->param('ids');

        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        // 查看当前购物车是否存在
        $del = $this->_DB->where($where)->where('id in(' . $cart_id . ')')->delete();
        if ($del) {
            $this->success(lang('delete_success'));
        } else {
            $this->error(lang('delete_failed'));
        }
    }


    /**
     * 获取用户的收货地址
     * @return mixed
     */
    public function select_address()
    {
        //获取用户的收货地址
        $address_list = Db::name('user_address')->where('user_id', session('user.id'))->where('status', 1)->order('is_default desc')->select();
        $this->assign('address_list', $address_list);
        return $this->fetch('ajax_address');
    }


    /**
     * ajax添加商品进入购物车
     * @return mixed
     */
    public function ajaxAddCart()
    {
        $user_id = session('user.id');
        $data = input('');
        if (isset($data['spec_key'])) {
            $spec_key = $data['spec_key'];
        } else {
            $spec_key = isset($data['goods_spec']) ? implode('_', $data['goods_spec']) : 0;
        }


        if ($spec_key == 0) {
            $goods_specs = Db::name('shop_spec_price')->where('goods_id', $data['goods_id'])->find();
            if ($goods_specs) {
                return ['code' => '-1', 'msg' => lang('cart_select_spec')];
            }
        }
        $spec = Db::name('shop_spec_price')->field('id,key_name')->where(['goods_id' => $data['goods_id'], 'key_sign' => $spec_key])->find();
        $goods = Db::name('shop_goods')->field('id,title,market_price,shop_price,goods_sn')->find($data['goods_id']);

        $promotion = Db::name('shop_promotion')->where('goods', $data['goods_id'])->where('start_time', '<= time', time())->where('end_time', '>= time', time())->find();

        $id = Db::name('shop_cart')->where(['session_id' => $this->session_id, 'goods' => $data['goods_id'], 'spec_key' => $spec_key])->value('id');
        // 如果同一人的同一物品已经在购物车中存在, 则增加该商品的数量
        if ( !empty($id) ) {
            $res = Db::name('shop_cart')->where('id', $id)->setInc('goods_num', $data['goods_num']);
        } else {
            $true_price = compute()->promGoodsPrice($data['goods_id'], $spec_key);

            $true_price = empty($true_price) ? $goods['shop_price'] : $true_price;
            $dataCart = [
                'user_id' => $user_id,
                'session_id' => $this->session_id,
                'goods' => $data['goods_id'],
                'goods_name' => $goods['title'],
                'market_price' => $goods['market_price'],
                'shop_price' => $true_price,
                'goods_num' => $data['goods_num'],
                'bar_code' => $goods['goods_sn'],
                'spec_id' => $spec['id'],
                'spec_key' => $spec_key,
                'spec_text' => getTableValue('shop_spec_price','key_sign="'.$spec_key.'"','key_name'),
                'prom_type' => $promotion['p_type'],
                'prom_id' => $promotion['p_id'],
                'selected' => 1,
                'add_time' => date('Y-m-d H:i:s'),
            ];
            $id = Db::name('shop_cart')->insertGetId($dataCart);
        }

        if ($id !== false) {
            $this->success(lang('add_cart_success'),'',['id'=>$id]);
        } else {
            $this->error(lang('add_cart_failed'));
        }
    }


    // 显示网页公共头部购物车
    public function header_cart_list()
    {
        //通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        $cartArr = Db::name('shop_cart')->where($where)->where(['status' => 1])->select();
        $total_price = ['num' => 0, 'total_fee' => 0];
        foreach ($cartArr as $key => $cart) {
            $total_price['num'] += $cart['goods_num'];
            $total_price['total_fee'] += $cart['shop_price'];
        }
        $this->assign('total_price', $total_price);
        $this->assign('cartList', $cartArr);
        return $this->fetch();
    }

    // Ajax方式右侧公共栏获取购物车内容
    public function ajaxCartRight()
    {
        //通过login_id查询当前的购物车订单
        $login_id = $this->login_id;
        if (is_numeric($login_id)) {
            $session_id = $this->session_id;
            $where = "user_id=$login_id OR session_id='$session_id'";
        } else {
            $where = ['session_id' => $login_id];
        }
        $cart_list = Db::name('shop_cart')->where($where)->where(['status' => 1])->select();

        $num = 0;
        $total_price = 0;
        foreach ($cart_list as $key => $cart) {
            $num += $cart['goods_num'];
            $total_price += $cart['shop_price'];
        }
        $cart_result = [
            'cartList' => $cart_list,
            'total_price' => ['total_fee' => $total_price, 'num' => $num]
        ];
        if (empty($total_price))
            $cart_result['total_price'] = ['total_fee' => 0, 'num' => 0];
        if (!empty($cart_result['cartList'])) {
            return ['status' => 1, 'msg' => lang('cart_get_success'), 'total_price' => $cart_result['total_price'], 'carList' => $cart_result['cartList']];
        } else {
            return ['status' => 0, 'msg' => lang('cart_is_null')];
        }
    }


    /**
     * 添加商品数量
     */
    public function add_num()
    {
        $cart_id = empty(request()->param('cart_id')) ? '' : request()->param('cart_id');
        $cart_id = intval($cart_id);
        if ($cart_id == 0) {
            $this->error('订单错误');
        }
        try {
            $update = Db::name('shop_cart')->where('id', $cart_id)->where('user_id', session('user.id'))->whereOr(['session_id' => $this->session_id])->setInc('goods_num', 1);
        } catch (\Exception $e) {
            $this->error($e->getMessage());
        }

        if ($update === false) {
            $this->error('修改失败');
        } else {
            //通过login_id查询当前的购物车订单
            $login_id = $this->login_id;
            if (is_numeric($login_id)) {
                $session_id = $this->session_id;
                $where = "user_id=$login_id OR session_id='$session_id'";
            } else {
                $where = ['session_id' => $login_id];
            }
            $cartArr = $this->_DB->where($where)->where(['status' => 1])->group('shop_id')->column('shop_id');
            $total_price = 0;
            foreach ($cartArr as $item => $value) {
                //获取当前店铺ID的信息
                $cart = Db::name('shop_cart')->where($where)->where('shop_id', $value)->field('selected,goods,spec_id,goods_num')->where('status', 1)->select();
                foreach ($cart as $item) {
                    if ($item['selected'] == 1) {
                        $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                    }
                }
            }
            //输出总价
            $goods_num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
            $data['goods_num'] = $goods_num;
            $data['total_price'] = $total_price;
            $this->success($data);
        }
    }

    /**
     * 减少商品数量
     */
    public function reduce_num()
    {
        $cart_id = empty(request()->param('cart_id')) ? '' : request()->param('cart_id');
        $cart_id = intval($cart_id);
        if ($cart_id == 0) {
            $this->error('订单错误');
        }
        $num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
        if ($num <= 1) {
            $this->error('商品数量不可小于1');
        }
        $update = Db::name('shop_cart')->where('id', $cart_id)->where('user_id', session('user.id'))->whereOr(['session_id' => $this->session_id])->setDec('goods_num', 1);
        if ($update === false) {
            $this->error('修改失败');
        } else {
            //通过login_id查询当前的购物车订单
            $login_id = $this->login_id;
            if (is_numeric($login_id)) {
                $session_id = $this->session_id;
                $where = "user_id=$login_id OR session_id='$session_id'";
            } else {
                $where = ['session_id' => $login_id];
            }
            $cartArr = $this->_DB->where($where)->where(['status' => 1])->group('shop_id')->column('shop_id');
            $total_price = 0;
            foreach ($cartArr as $item => $value) {
                //获取当前店铺ID的信息
                $cart = Db::name('shop_cart')->where($where)->where('shop_id', $value)->field('selected,goods,spec_id,goods_num')->where('status', 1)->select();
                foreach ($cart as $item) {
                    if ($item['selected'] == 1) {
                        $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                    }
                }
            }
            //输出总价
            $goods_num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
            $data['goods_num'] = $goods_num;
            $data['total_price'] = $total_price;
            $this->success($data);
        }
    }

    /**
     * 重新设置商品数量
     */
    public function edit_num()
    {
        $cart_id = empty(request()->param('cart_id')) ? '' : request()->param('cart_id');
        $cart_id = intval($cart_id);
        $goods_num = empty(request()->param('num')) ? '' : request()->param('num');
        $goods_num = intval($goods_num);
        if ($cart_id == 0) {
            $this->error('订单错误');
        }
        if ($goods_num <= 0) {
            $this->error('商品数量错误');
        }
        $user_id = empty(session('user.id')) ? 0 : session('user.id');
        //判断库存
        //通过cartid 商品ID，规格
        $cart_goods = Db::name('shop_cart')->where(['id' => $cart_id, 'status' => 1])->field('goods,spec_id')->find();
        $stock = Goods::getStock($cart_goods['goods'], $cart_goods['spec_id']);
        if ($stock < $goods_num) {
            $this->error('商品库存不足');
        }
        $update = Db::name('shop_cart')->where('id', $cart_id)->where('user_id=' . $user_id . ' OR session_id="' . $this->session_id . '"')->update(['goods_num' => $goods_num]);
        if ($update === false) {
            $this->error('修改失败');
        } else {
            //通过login_id查询当前的购物车订单
            $login_id = $this->login_id;
            if (is_numeric($login_id)) {
                $session_id = $this->session_id;
                $where = "user_id='$login_id' OR session_id='$session_id'";
            } else {
                $where = ['session_id' => $login_id];
            }
            $cartArr = $this->_DB->where($where)->where(['status' => 1])->group('shop_id')->column('shop_id');
            $total_price = 0;
            foreach ($cartArr as $item => $value) {
                //获取当前店铺ID的信息
                $cart = Db::name('shop_cart')->where($where)->where('shop_id', $value)->field('selected,goods,spec_id,goods_num')->where('status', 1)->select();
                foreach ($cart as $item) {
                    if ($item['selected'] == 1) {
                        $total_price += compute()->promGoodsPrice($item['goods'], $item['spec_id'],false,$item['goods_num']);
                    }
                }
            }
            //输出总价
            $goods_num = getTableValue('shop_cart', 'id=' . $cart_id, 'goods_num');
            $data['goods_num'] = $goods_num;
            $data['total_price'] = $total_price;
            $this->success($data);
        }
    }
}