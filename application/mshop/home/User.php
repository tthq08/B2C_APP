<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台用户中心模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017
// +----------------------------------------------------------------------

// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------


namespace app\mshop\home;

use app\common\validate\userAddress;
use think\Db;
use \app\sys\controller\Api;
use app\mshop\model\ShopOrder as orderModel;
use app\mshop\model\Ip as getAddr;
use think\Request;

class User extends HomeBase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $action_nologin = ['login', 'signup', 'signup_2', 'signup_3', 'check_act', 'reSend', 'bind_user', 'extend_reg', 'reset_pwd'];
        $action = request()->action();
        if (empty(session('user.id')) && !in_array($action, $action_nologin)) {
            $this->redirect('/mshop/user/login');
        }

        if (!in_array($action, $action_nologin)) {
            //================购物车信息
            //获取用户购物车信息
            $cartList = Db::name('shop_cart')->alias('c')->join(config('prefix') . 'shop_goods g', 'c.goods =g.id')->field('c.id,c.goods_name,c.goods,g.thumb')->where('c.user_id', session('user.id'))->where('c.status', 1)->order('add_time desc')->select();
            //获取购物车商品数量
            $cartGoodsSum = Db::name('shop_cart')->where('user_id', session('user.id'))->where('status', 1)->sum('goods_num');
            //获取购物车总价格
            $cartGoodsPrice = Db::name('shop_cart')->where('user_id', session('user.id'))->where('status', 1)->sum('shop_price');
            //================购物车信息
            //获取推荐人
            $info = Db::name('users')->where('id', session('user.id'))->find();
            $this->assign('info', $info);
            if (is_array($info) && !empty($info['introducer'])) {
                $tui = Db::name('users')->where('id', $info['introducer'])->value('nickname');
                // dump($tui);
                $this->assign('tui', $tui);
            }
            // 获取收藏数
            // $shouc = Db::query('SELECT count(status) AS shouc FROM tb_shop_goods_collect WHERE user_id='.session('user.id').' AND status=1');
            $shouc = Db::name('shop_goods_collect')->field('count(id) as shouc')->where(['user_id' => session('user.id'), 'status' => 1])->find();
            $nums_coll = empty($shouc) ? 0 : $shouc['shouc'];
            $this->assign('shouc', $nums_coll);


            // $introducer = !empty($tui) ? empty($tui) : '';
            // $this->assign('tui',$introducer);


            // 获取关注数
            // $guanzhu_num = Db::name('users')->where(['id'=>session('user.id'),'status'=>1])->field('gz_num')->select();
            // $this->assign('guanzhu_num',$guanzhu_num[0]);
            $this->assign('cartGoodsSum', $cartGoodsSum);
            $this->assign('cartGoodsPrice', priceFormat($cartGoodsPrice));
            $this->assign('cartList', $cartList);
            $user = Db::name('users')->where('id', session('user.id'))->find();
            session('user', $user);
            $this->assign('user', session('user'));
        }
    }

    /**
     * 用户中心
     *
     */
    public function index()
    {
        $user = session('user');
        $user_id = $user['id'];

        // 更新用户的等级信息
        geiv_exp($user_id, 0);

        //查询用户的所有订单
        $orderList = Db::name('shop_order')->where('user_id', session('user.id'))->where('status>=0')->order('add_time desc')->select();
        $this->assign('orderList', $orderList);

        // 获取各个订单状态数
        $order1 = Db::name('shop_order')->where(['status' => 1, 'user_id' => $user_id])->count();
        $order3 = Db::name('shop_order')->where(['status' => 3, 'user_id' => $user_id])->count();
        $order4 = Db::name('shop_order')->where(['status' => 4, 'user_id' => $user_id])->count();
        $order5 = Db::name('shop_order')->where(['status' => 5, 'user_id' => $user_id])->count();
        $this->assign('order1', $order1);
        $this->assign('order3', $order3);
        $this->assign('order4', $order4);
        $this->assign('order5', $order5);

        // $user_id = session('user.id');
        // 有效的优惠券数量(未使用、状态正常的有效期内的优惠券)
        $useable_coupon = Db::name('user_coupon')->where(['is_use' => 0, 'user' => $user_id, 'status' => 1])->where('end_time', '>= time', time())->count();
        $this->assign('useable_coupon', $useable_coupon);

        // 用户收藏商品数量
        $shouc = Db::name('shop_goods_collect')->where(['user_id' => $user_id, 'status' => 1])->limit(9)->select();
        $this->assign('goods_collect', $shouc);

        // 用户商品浏览记录
        $history = cookie('goods_history');
        if (!empty($history)) {
            $goods_ids = implode(',', $history);
            $goods = Db::name('shop_goods')->where('id', 'IN', $goods_ids)->paginate(10);
            $goods_list = $goods->all();
        } else {
            $goods_list = [];
        }
        $this->assign('history', $goods_list);

        // 用户初始订单列表
        // 取30天内的订单
        $start_date = date('Y-m-d', strtotime('-30 days')) . ' 00:00:00';
        $orders = Db::name('shop_order')->where(['user_id' => $user_id])->where('status', '>', 0)->where('add_time', '>= time', $start_date)->limit(10)->select();
        foreach ($orders as $key => $order) {
            $orderGoods = Db::name('shop_order_goods')->alias('og')->join(config('prefix') . 'shop_goods g', 'g.id = og.goods_id')->field('og.id,og.goods_id,og.goods_num,og.spec_key,og.spec_title,g.title as goods_name,g.thumb')->where('order_id', $order['id'])->limit(1)->select();
            $orders[$key] = $order;
            $orders[$key]['goods_list'] = $orderGoods;
        }
        $this->assign('orders', $orders);

        // 用户等级信息
        $user = Db::name('users')->find($user_id);
        $usr_lv = $user['level'];
        $next_lv = Db::name('user_level')->where('id', '>', $usr_lv)->find();
        // dump($next_lv);
        $this->assign('next_lv', $next_lv);
        $points_left = $next_lv['points'] - $user['pay_points'];
        $this->assign('points_need', $points_left);

        return $this->fetch();
    }

    /**
     * 用户订单列表
     */
    public function order_list()
    {
        $data = input();
        //获取用户所有订单列表
        if (empty($data['type'])) {
            $data['type'] = 'all';
        }
        if ($data['type'] == 'all') {
            $where = '`status` > 0';
            $this->assign('status', 'all');
        } else {
            $status = !empty($data['type']) ? $data['type'] : 0;
            $status = intval($status);
            $this->assign('status', $status);
            if ($status >= 0) {
                if ($status == 2) {
                    $where = "status = 2 OR status =3";
                } else {
                    $where = '`status` = ' . $status;
                }
            }
        }

        if (!empty($data['days'])) {
            $start_date = date('Y-m-d', strtotime('-' . ($data['days'] - 1) . ' days')) . ' 00:00:00';
            $where2['add_time'] = ['>= time', $start_date];
            $this->assign('days', $data['days']);
        } else {
            $this->assign('days', '');
        }

        if (!empty($data['month'])) {
            $data['month'] = $data['month'] >= 10 ? $data['month'] : '0' . $data['month'];
            $start_date = date('Y') . '-' . $data['month'] . '-' . '01' . ' 00:00:00';
            $end_date = date('Y-m-d', strtotime("$start_date +1 month -1 day")) . " 23:59:59";
            $where2['add_time'][] = ['>= time', $start_date];
            $where2['add_time'][] = ['<= time', $end_date];
            $this->assign('month', $data['month']);
        } else {
            $this->assign('month', '');
        }

        if (!empty($data['time_start']) && !empty($data['time_end'])) {
            $start_date = $data['time_start'] . ' 00:00:00';
            $end_date = $data['time_end'] . " 23:59:59";
            $where2['add_time'][] = ['>= time', $start_date];
            $where2['add_time'][] = ['<= time', $end_date];
            $this->assign('time_start', $data['time_start']);
            $this->assign('time_end', $data['time_end']);
        } else {
            $this->assign('time_start', '');
            $this->assign('time_end', '');
        }

        $where3 = '';
        if (!empty($data['key'])) {
            $where3 = 'order_sn LIKE "%' . $data['key'] . '%"';
            $order_ids = Db::name('shop_order_goods')->field('GROUP_CONCAT(order_id) as ids')->where('goods_name', 'LIKE', "%{$data['key']}%")->whereOr('spec_title', 'LIKE', "%{$data['key']}%")->find();
            $shop_id = Db::name('cust_shop')->field('GROUP_CONCAT(id) as ids')->where('shop_name', 'LIKE', "%{$data['key']}%")->find();


            if (!empty($order_ids['ids'])) {
                $where3 .= ' OR id IN(' . $order_ids['ids'] . ')';
            }

            if (!empty($shop_id['ids'])) {
                $where3 .= ' OR shop_id IN(' . $shop_id['ids'] . ')';
            }
        }
        if (!empty($where3)) {
            $where = $where . ' AND (' . $where3 . ')';
        }

        $page_num = tb_config('list_rows', 1, getLang());
        if (empty($where2)) {
            $orderList = Db::name('shop_order')->where($where)->where('user_id', session('user.id'))->order('add_time desc')->paginate(3);
        } else {
            $orderList = Db::name('shop_order')->where($where)->where($where2)->where('user_id', session('user.id'))->order('add_time desc')->paginate(3);
        }
        $orderArr = [];
        foreach ($orderList->items() as $order) {
            //获取当前订单下的商品
            $orderGoods = Db::name('shop_order_goods')->alias('og')->join(config('prefix') . 'shop_goods g', 'g.id = og.goods_id')->field('og.id,og.goods_id,og.pay_price,og.spec_title,og.goods_num,og.is_comment,g.title as goods_name,g.thumb')->where('order_id', $order['id'])->select();
            $orderArr[$order['id']] = $order;
            $orderArr[$order['id']]['goods_list'] = $orderGoods;
        }
        $this->assign('page', $orderList->render());
        $this->assign('orderList', $orderArr);
        // print_r($orderList);exit();
        $tpl = '';
        if (request()->isAjax()) {
            $tpl = 'ajaxorderlist';
        }
        return $this->fetch($tpl);
    }

    /**
     * 取消订单
     * @param int $id 订单ID
     */
    public function cancel_order($id)
    {
        intval($id);
        $update = Db::name('shop_order')->where(['id' => $id, 'user_id' => session('user.id')])->update(['status' => 0]);
        if ($update === false) {
            restore_stock($id);     //恢复订单所有商品的库存
            $this->error(lang('cancel_order_failed'));
        } else {
            $this->success(lang('cancel_order_success'));
        }
    }

    /**
     * 删除订单
     * @param int $id 订单ID
     */
    public function del_order($id)
    {
        intval($id);
        $status_old = Db::name('shop_order')->where('id', $id)->value('status');
        $update = Db::name('shop_order')->where(['id' => $id, 'user_id' => session('user.id')])->update(['status' => -1]);
        if ($update === false) {
            if ($status_old > 0) {        //如果订单原状态为正常状态即释放库存
                restore_stock($id);     //释放订单所有商品的库存
            }
            $this->error(lang('del_order_failed'));
        } else {
            $this->success(lang('del_order_success'));
        }
    }

    /**
     * 查询订单物流
     * @param int $id 订单ID
     * @return mixed
     */
    public function chaxun($id)
    {
        $id = intval($id);
        //查询快递编号和快递号
        $orderShipping = api('shop', 'Order', 'shippingInfo', array($id, session('user.id')));
        if (empty($orderShipping)) {
            $this->assign('shippingInfo', 12345);
        } else {
            //查询物流跟踪信息
            $kdTrail = kdTrail($orderShipping['shipping_code'], $orderShipping['shipping_sn']);
            $Traces = $kdTrail['Traces'];
            $TracesLen = count($Traces);
            foreach ($Traces as $k => $v) {
                $Traces2[$k] = $Traces[$TracesLen - $k - 1];
            }
            $kdTrail['Traces'] = $Traces2;
            $this->assign('kdTrail', $kdTrail);
            $this->assign('shippingInfo', $orderShipping);
        }
        return $this->fetch();
    }

    /**
     * 个人资料编辑
     * @return mixed|void
     */
    public function editor()
    {
        $type = !empty(request()->param('type')) ? request()->param('type') : '';
        if ($type == '') {
            return $this->error('选择您要修改的位置');
        }
        switch ($type) {
            case 'nickname':
                $this->assign('nickname', session('user.nickname'));
                break;
            case 'address':
                //获取省份
                $province = Api::getChildAddress(0);
                $city = Api::getChildAddress(session('user.province'));
                $district = Api::getChildAddress(session('user.city'));
                $this->assign('province', $province);
                $this->assign('city', $city);
                $this->assign('district', $district);
                $this->assign('user_province', session('user.province'));
                $this->assign('user_city', session('user.city'));
                $this->assign('user_district', session('user.district'));
                break;
            case 'mobile':
                $this->assign('mobile', session('user.mobile'));
                break;

            // 修改店铺资料20170509
            case 'store_name':
                $store_name = Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->select();
                $this->assign('store_name', $store_name[0]);
                break;
            case 'store_addr':
                $store_name = Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->select();
                $this->assign('store_name', $store_name[0]);
                break;
            case 'store_time':
                $store_name = Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->select();
                $this->assign('store_name', $store_name[0]);
                break;
            case 'store_desc':
                $store_name = Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->select();
                $this->assign('store_name', $store_name[0]);
                break;
            case 'store_yewu':
                $store_name = Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->select();
                $this->assign('store_name', $store_name[0]);
                break;
            default :
                $this->error('您选择的信息不在可修改范围内');
        }
        $this->assign('type', $type);
        return $this->fetch();
    }

    public function edit_save()
    {
        //获取修改的地方
        $type = empty(request()->param('type')) ? '' : request()->param('type');
        if ($type == '') {
            return $this->error('选择您要修改的位置');
        }
        switch ($type) {
            case 'sex':
                $sex = request()->param('sex');
                if (!isset($sex)) {
                    $this->error('性别不可为空');
                }
                $this->edit_sex(request()->param('sex'));
                break;
            case 'nickname':
                if (empty(request()->param('nickname'))) {
                    $this->error('昵称不可为空');
                }
                $this->edit_nickname(request()->param('nickname'));
                break;
            case 'mobile':
                if (empty(request()->param('mobile'))) {
                    $this->error('手机号码不可为空');
                }
                $this->edit_moobile(request()->param('mobile'));
                break;
            case 'address':
                $province = !empty(request()->param('province')) ? request()->param('province') : 0;
                $city = !empty(request()->param('city')) ? request()->param('city') : 0;
                $district = !empty(request()->param('district')) ? request()->param('district') : 0;
                $this->edit_user_address($province, $city, $district);
                break;
            case 'birthday':
                $birthday = request()->param('birthday');
                if (empty($birthday)) {
                    $this->error('生日不可为空');
                }
                //检测日期是否真实
                $checkDate = checkDateIsValid($birthday);
                if ($checkDate === false) {
                    $this->error('日期格式错误');
                }
                $this->edit_birthday($birthday);
                break;
            case 'head_pic':
                $head_pic = request()->param('head_pic');
                if (file_exists(APP_PATH . '../public' . $head_pic)) {
                    $this->edit_head_pic($head_pic);
                } else {
                    echo $head_pic;
                    $this->error('头像文件不存在');
                }
                break;
            // 修改店铺资料20170509
            case 'store_name':
                if (empty(request()->param('store_name'))) {
                    $this->error('店铺名称不可为空');
                }
                $store_name = request()->param('store_name');
                Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->update(['store_name' => $store_name]);
                $this->success('修改成功', 'mshop/user/store_info');
                break;

            case 'store_addr':
                if (empty(request()->param('store_addr'))) {
                    $this->error('店铺地址不可为空');
                }
                $store_addr = request()->param('store_addr');
                Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->update(['store_addr' => $store_addr]);
                $this->success('修改成功', 'mshop/user/store_info');
                break;

            case 'store_time':
                if (empty(request()->param('store_time'))) {
                    $this->error('营业时间不可为空');
                }
                $store_time = request()->param('store_time');
                Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->update(['store_time' => $store_time]);
                $this->success('修改成功', 'mshop/user/store_info');
                break;

            case 'store_desc':
                if (empty(request()->param('store_desc'))) {
                    $this->error('商家简介不可为空');
                }
                $store_desc = request()->param('store_desc');
                Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->update(['desc' => $store_desc]);
                $this->success('修改成功', 'mshop/user/store_info');
                break;
            case 'store_yewu':
                if (empty(request()->param('store_yewu'))) {
                    $this->error('主营业务不可为空');
                }
                $store_yewu = request()->param('store_yewu');
                Db::name('shop_goods_store')->where(['user_id' => session('user.id')])->update(['yewu' => $store_yewu]);
                $this->success('修改成功', 'mshop/user/store_info');
                break;

            default:
                $this->error('选择错误');
        }
    }

    /**
     * 修改头像
     * @param varchar $head_pic
     * @return bool
     */
    protected function edit_head_pic($head_pic)
    {
        //修改
        $update = Db::name('users')->where('id', session('user.id'))->update(['head_pic' => $head_pic]);
        if ($update === false) {
            $this->error('修改失败');
        }
        //更新session
        session('user.head_pic', $head_pic);
        $this->success('修改成功');
    }

    /**
     * 修改性别
     * @param int $sex 性别
     * @return mixed
     */
    protected function edit_sex($sex)
    {
        //修改
        $update = Db::name('users')->where('id', session('user.id'))->update(['sex' => $sex]);
        if ($update === false) {
            $this->error('修改失败');
        }
        //更新session
        session('user.sex', $sex);
        $this->success('修改成功');
    }

    /**
     * 修改生日
     * @param int $birthday 生日
     * @return mixed
     */
    protected function edit_birthday($birthday)
    {
        //修改
        $update = Db::name('users')->where('id', session('user.id'))->update(['birthday' => $birthday]);
        if ($update === false) {
            $this->error('修改失败');
        }
        //更新session
        session('user.birthday', $birthday);
        $this->success('修改成功');
    }

    /**
     * 修改昵称
     * @param int $nickname
     * @return mixed
     */
    protected function edit_nickname($nickname)
    {
        //修改
        $update = Db::name('users')->where('id', session('user.id'))->update(['nickname' => $nickname]);
        if ($update === false) {
            $this->error('修改失败');
        }
        //更新session
        session('user.nickname', $nickname);
        $this->success('修改成功');
    }

    /**
     * 修改手机号码
     * @param int $mobile
     * @return mixed
     */
    protected function edit_mobile($mobile)
    {
        $mobile = intval($mobile);
        if (strlen($mobile) == 11) {
            //修改
            $update = Db::name('users')->where('id', session('user.id'))->update(['mobile' => $mobile, 'mobile_validated' => 1]);
            if ($update === false) {
                $this->error('修改失败');
            }
            //更新session
            session('user.mobile', $mobile);
            $this->success('修改成功');
        } else {
            $this->error('手机号码格式错误');
        }
    }

    /**
     * 修改常住地
     * @param int $nickname
     * @return mixed
     */
    protected function edit_user_address($province, $city, $district)
    {
        $province = intval($province);
        $city = intval($city);
        $district = intval($district);
        //修改
        $update = Db::name('users')->where('id', session('user.id'))->update(['province' => $province, 'city' => $city, 'district' => $district]);
        if ($update === false) {
            $this->error('修改失败');
        }
        //更新session
        session('user.province', $province);
        session('user.city', $city);
        session('user.district', $district);
        $this->success('修改成功');
    }

    public function manager()
    {
        $user = Db::name('users')->find(session('user.id'));
        $this->assign('user', $user);
        return $this->fetch();
    }

    /**
     * 用户基本信息页面
     */
    public function info()
    {
        $user = Db::name('users')->find(session('user.id'));
        $this->assign('user', $user);
        return $this->fetch();
    }

    /**
     * 保存用户基本信息
     */
    public function save_info()
    {
        if (request()->isPost()) {
            $postData = request()->post();
            //插入数据
            $insertData = [];
            if (isset($postData['head_pic']) && $postData['head_pic'] !== '') {
                $insertData['head_pic'] = $postData['head_pic'];
            }
            if (isset($postData['nickname']) && $postData['nickname'] !== '') {
                $insertData['nickname'] = $postData['nickname'];
            }
            if (isset($postData['qq']) && $postData['qq'] !== '') {
                $insertData['qq'] = $postData['qq'];
            }
            if (isset($postData['birthday']) && $postData['birthday'] !== '') {
                $insertData['birthday'] = $postData['birthday'];
            }
            if (isset($postData['sex']) && $postData['sex'] !== '') {
                $insertData['sex'] = $postData['sex'];
            }

            if (count($insertData) > 0) {
                $insert = Db::name('users')->where('id', session('user.id'))->update($postData);
                if ($insert === false) {
                    $this->error(lang('user_save_failed'));
                }
                //更新session
                $user = session('user');
                $user = array_merge($user, $insertData);
                session('user', $user);
                $this->success(lang('user_save_success'));
            }
            $this->error(lang('user_data_wrong'));
        } else {
            $this->error('');
        }
    }

    /**
     * 用户地址管理
     */
    public function address_list()
    {
        //获取用户收货地址
        $addressList = Db::name('user_address')->where('user_id', session('user.id'))->where('status', 1)->order('is_default desc')->select();
        $this->assign('lists', $addressList);
        return $this->fetch();
    }

    /**
     * 用户地址添加
     */
    public function add_address()
    {
        //获取一级地址
        $province = $this->getAddressList(0, 1);
        $this->assign('province', $province);
        if (request()->param('call_back')) {
            cookie('call_back', request()->param('call_back'));
        }
        //获取省份列表
        $provinceList = Api::getChildAddress(0, 1);
        if (request()->param('call_back')) {
            cookie('call_back', request()->param('call_back'));
        }
        $this->assign('province', $provinceList);

        return $this->fetch();
    }

    /**
     * 用户地址编辑
     */
    public function edit_address()
    {

        //获取当前地址信息
        $id = request()->param('id');
        $addressInfo = Db::name('user_address')->where(['user_id' => session('user.id'), 'id' => $id, 'status' => 1])->find();
        if ($addressInfo == '') {
            $this->error(lang('user_address_wrong'));
        }
        //获取省份列表
        $provinceList = Api::getChildAddress(0, 1);
        //获取城市列表
        $cityList = Api::getChildAddress($addressInfo['province'], 2);
        //获取区县列表
        $districtList = Api::getChildAddress($addressInfo['city'], 3);
        //设置回调地址
        if (request()->param('call_back')) {
            cookie('call_back', request()->param('call_back'));
        }
        $this->assign('address', $addressInfo);
        $this->assign('province', $provinceList);
        $this->assign('city', $cityList);
        $this->assign('district', $districtList);
        return $this->fetch();
    }

    /**
     * 用户地址保存
     */
    public function save_address()
    {

        $postData = request()->post();
        // 查看是保存还是添加
        if (empty($postData['id'])) {
            // 获取用户当前地址数量
            $UAddressNum = Db::name('user_address')->where(['user_id' => session('user.id'), 'status' => 1])->count('id');
            if ($UAddressNum >= 20) {
                $this->error(lang('user_address_reach_limit'));
            }
        }
        $rule = [
            'consignee' => 'require',
            'province' => 'require|number',
            'city' => 'require|number',
            'district' => 'require|number',
            'address' => 'require',
            'zip' => 'number|length:6',
            'mobile' => 'require|number|length:11',
        ];
        $message = [
            'consignee.require'=>'请输入收货人姓名','province.require'=>'请选择省份','province.number'=>'省份选择错误,请重新选择','city.require'=>'请选择城市','city.number'=>'城市选择错误,请重新选择','district.require'=>'请选择区县','district.number'=>'区县选择错误,请重新选择','address.require'=>'请输入地址','zip.number'=>'请输入邮政编码','mobile.require'=>'请输入手机号码'
        ];
        $check = api('sys','verification','valiCheck',[$rule,$postData,$message]);
        if( $check['code'] == 0 ){
            $this->error($check['error']);
        }
        $saveData['consignee'] = isset($postData['consignee']) ? $postData['consignee'] : '';
        $saveData['province'] = $postData['province'];
        $saveData['city'] = $postData['city'];
        $saveData['district'] = $postData['district'];
        $saveData['address'] = $postData['address'];
        $saveData['mobile'] = $postData['mobile'];
        $saveData['phone'] = isset($postData['phone']) ? $postData['phone'] : '';
        $saveData['zip'] = isset($postData['zip']) ? $postData['zip'] : '';

        //存入数据库
        if (empty($postData['id'])) {
            //插入
            $saveData['user_id'] = session('user.id');
            $save = Db::name('user_address')->insert($saveData);
        } else {
            //保存
            $save = Db::name('user_address')->where(['user_id' => session('user.id'), 'id' => $postData['id']])->update($saveData);
        }
        if ($save === false) {
            $this->error(lang('user_save_failed'));
        }
        if (empty(cookie('call_back'))) {
            $this->success(lang('user_save_success'), 'mshop/user/address_list');
        }
        $this->success(lang('user_save_success'), cookie('call_back'));
    }

    /**
     * 获取子地址，默认为0
     */
    public function getAddressList($parent_id = 0, $level = 1)
    {
        $addressList = Api::getChildAddress($parent_id, $level);
        if (is_array($addressList) && count($addressList) > 0) {
            $addressHtml = '';
            foreach ($addressList as $address) {
                // $addressHtml .="<option>请选择</option>";
                $addressHtml .= "<option value='{$address['id']}'>{$address['name']}</option>";
            }
        }
        return $addressHtml;
    }


    /**
     * 用户收货地址设为默认
     */
    public function set_default()
    {
        //修改收货地址为默认
        $id = request()->param('id');
        intval($id);
        if ($id > 0) {

            Db::name('user_address')->where('user_id', session('user.id'))->update(['is_default' => 0]);
            Db::name('user_address')->where('id', $id)->where('user_id', session('user.id'))->update(['is_default' => 1]);
            $this->success(lang('user_set_success'));
        } else {
            $this->error(lang('user_select_address_failed'));
        }
    }

    /**
     * 删除用户收货地址
     */
    public function del_address()
    {
        //修改收货地址为默认
        $id = request()->param('id');
        intval($id);
        if ($id > 0) {
            $del = Db::name('user_address')->where('id', $id)->where('user_id', session('user.id'))->update(['status' => 0]);
            if ($del === false) {
                $this->error(lang('user_del_address_failed'));
            }
            $this->success(lang('user_del_address_success'));
        } else {
            $this->error(lang('user_select_address_failed'));
        }
    }

    /**
     * 订单详情页面
     */
    public function order_detail()
    {
        //获取订单信息
        $orderModel = new orderModel();
        $id = request()->param('id');
        $order_info = Db::name('shop_order')->where('id', $id)->where('status>=0')->where('user_id', session('user.id'))->find();
        // dump($order_info);
        if (empty($order_info)) {
            return $this->redirect('User/order_list');
        }

        //获取订单中的所有商品
        $goodsList = Db::name('shop_order_goods')->where('order_id', $order_info['id'])->select();
        $order_info['goods_list'] = $goodsList;
        $this->assign('order_info', $order_info);

        $status = config('order_status');
        $this->assign('order_status', $status);
        return $this->fetch();
    }

    /**
     * 用户确认收货
     */
    public function order_confirm()
    {
        //检测订单是否存在
        $id = intval(request()->param('id'));
        if ($id == 0) {
            $this->error(lang('order_id_is_field'));
        }
        $orderInfo = Db::name('shop_order')->where('id', $id)->where('user_id', session('user.id'))->find();
        if ($orderInfo == '') {
            $this->error(lang('cart_order_failed'));
        }
        if ($orderInfo['is_pay'] == 0) {
            $this->error(lang('order_is_not_pay'));
        }
        if ($orderInfo['is_send'] == 0) {
            $this->error(lang('order_is_not_send'));
        }
        if ($orderInfo['status'] == 5) {
            $this->error(lang('order_goods_is_receive'));
        }
        //修改订单信息
        $updateData['status'] = 5;
        Db::startTrans();
        try {
            Db::name('shop_order')->where('id', $id)->update($updateData);
            insert_order_action($id, session('user.id'), $updateData['status'], "确认收货", "用户确认收货");

            // 发放用户经验            
            $experience = tb_config('exp_order_comp', 1);    //订单确认经验
            geiv_exp(session('user.id'), $experience, 'order');

            // 发放购物优惠券
            api('shop', 'CouponSend', 'buySend', [$orderInfo, $orderInfo['user_id']]);
            Db::commit();
        } catch (\Exception $exception) {
            Db::rollback();
            $this->error($exception->getMessage());
        }
        $this->success(lang('order_goods_is_receive_success'));
    }


    /**
     * 我的评价页面
     */
    public function comment($id)
    {
        $order = Db::name('shop_order')->find($id);
        $orderGoods = Db::name('shop_order_goods')->where('order_id', $id)->select();
        $this->assign('order', $order);
        $this->assign('orderGoods', $orderGoods);
        return $this->fetch();

    }

    /**
     * 添加评价
     */
    /*public function add_comment(){
        $id = request()->param('id');
        $id = intval($id);
        if( $id == 0 ){
            $this->error('订单商品错误');
        }
        $order_goods = Db::name('shop_order_goods')->where('id',$id)->field('id,goods_id,spec_id,spec_key,spec_title,is_comment')->find();
        if( $order_goods['is_comment'] == 1 ){
            $this->error('该商品已经评论，无需重复评论','mshop/user/order_list');
        }
        $goodsInfo = Db::name('shop_goods')->where('id',$order_goods['goods_id'])->field('thumb,title')->find();
        $spec_title = $order_goods['spec_title'] ? $order_goods['spec_title'] : '';
        $this->assign('spec_title',$spec_title);
        $this->assign('goodsInfo',$goodsInfo);
        $this->assign('id',$id);
        return $this->fetch();

    }*/

    // 添加商品评价
    public function add_comment()
    {
        $data = input();
        $is_exist = Db::name('shop_goods_comment')->where(['order_id' => $data['order_id'], 'goods_id' => $data['goods_id'], 'spec_key' => $data['spec_key']])->find();
        if ($is_exist) {
            $this->error('当前订单商品已经评价过了，无须重复评价。');
        }
        $goods = Db::name('shop_goods')->where('id', $data['goods_id'])->find();
        $user = Db::name('users')->find(session('user.id'));
        $commData = [
            'goods_id' => $data['goods_id'],
            'spec_key' => $data['spec_key'],
            'spec_item' => $data['spec_item'],
            'cid' => $goods['cid'],
            'shop_id' => $goods['shop_id'],
            'user_id' => $user['id'],
            'username' => $user['nickname'],
            'content' => $data['content'],
            'deliver_rank' => $data['deliver_rank'],
            'goods_rank' => $data['goods_rank'],
            'description_rank' => $data['desc_rank'],
            'service_rank' => $data['service_rank'],
            'add_time' => date('Y-m-d H:i:s'),
            'ip_address' => get_client_ip(),
            'is_show' => tb_config('comment_auto_show', 1),
            'img' => implode(',', $data['comment_img_file']),
            'order_id' => $data['order_id']
        ];

        // 插入评价数据
        $res = Db::name('shop_goods_comment')->insert($commData);
        if ($res !== false) {
            // 修改订单商品记录的评价状态
            $ress = Db::name('shop_order_goods')->where(['order_id' => $data['order_id'], 'goods_id' => $data['goods_id'], 'spec_key' => $data['spec_key']])->setField('is_comment', 1);
            $commNums = Db::name('shop_order_goods')->where(['order_id' => $data['order_id'], 'is_comment' => 0])->count();
            if ($commNums == 0) {
                // 订单商品没有未评价商品时，更新订单状态
                Db::name('shop_order')->where('id', $data['order_id'])->setField('status', 6);

                // 发放用户经验            
                $experience = tb_config('exp_comment', 1);    //评价发布经验
                geiv_exp(session('user.id'), $experience, 'comment');

                insert_order_action($data['order_id'], session('user.id'), 6, "评价完成", "用户评价订单完成");
            }
            $this->success('评价成功');
        } else {
            $this->error('评价失败，请重试。');
        }
    }

    public function comm_show()
    {
        $data = input();
        $commInfo = [];
        if (!empty($data['comm_id'])) {
            $commInfo = Db::name('shop_goods_comment')->find($data['comm_id']);
        } else {
            $commInfo = Db::name('shop_goods_comment')->where(['order_id' => $data['order_id'], 'goods_id' => $data['goods_id'], 'spec_key' => $data['spec_key']])->find();
        }
        $this->assign('comm', $commInfo);
        // dump($commInfo);
        $goods = Db::name('shop_goods')->find($commInfo['goods_id']);
        $this->assign('goods', $goods);
        return $this->fetch();
    }

    /**
     * 保存
     */
    public function save_comment()
    {
        $postData = request()->post();
        if (empty($postData['id']) || intval($postData['id']) == 0) {
            $this->error('订单商品错误');
        }

        if (empty($postData['description_match']) || intval($postData['description_match']) == 0 || $postData['description_match'] > 5) {
            echo $postData['description_match'];
            $this->error('请对描述相符打分');
        } elseif (empty($postData['shipping_service']) || intval($postData['shipping_service']) == 0 || $postData['shipping_service'] > 5) {
            $this->error('请对物流服务打分');
        } elseif (empty($postData['service_attitude']) || intval($postData['service_attitude']) == 0 || $postData['service_attitude'] > 5) {
            $this->error('请对服务态度打分');
        } elseif (empty($postData['commentG']) || intval($postData['commentG']) == 0 || $postData['commentG'] > 3) {
            $this->error('请给商品一个评价');
        }

        //获取订单商品是否正确
        $orderGoods = Db::name('shop_order_goods')->where('id', $postData['id'])->field('order_id,goods_id,goods_num,spec_id,spec_key,spec_title,shop_id,goods_num,is_comment')->find();
        if ($orderGoods == '') {
            $this->error('订单商品出错了');
        }
        if ($orderGoods['is_comment'] == 1) {
            $this->error('您已经评价了该订单');
        }
        //获取商品用户
        $user_id = getTableValue('shop_order', 'id=' . $orderGoods['order_id'], 'user_id');
        if ($user_id != session('user.id')) {
            $this->error('不属于您的订单商品');
        }
        //获取用户信息
        $userInfo = Db::name('users')->where('id', $user_id)->field('email,nickname')->find();

        //插入数据赋值
        $saveData['goods_id'] = $orderGoods['goods_id'];
        $saveData['shop_id'] = $orderGoods['shop_id'];
        $saveData['email'] = $userInfo['email'];
        $saveData['username'] = $userInfo['nickname'];
        $saveData['ip_address'] = get_client_ip();
        $saveData['order_id'] = $orderGoods['order_id'];
        $saveData['goods_rank'] = $postData['commentG'];
        $saveData['description_rank'] = $postData['description_match'];
        $saveData['deliver_rank'] = $postData['shipping_service'];
        $saveData['service_rank'] = $postData['service_attitude'];
        $saveData['content'] = empty($postData['content']) ? '' : $postData['content'];
        $saveData['user_id'] = session('user.id');
        if (!empty($postData['uupimg'])) {
            $postData['uupimg'] = rtrim($postData['uupimg'], ',');
            $postData['uupimg'] = explode(',', $postData['uupimg']);
        }
        $saveData['img'] = json_encode($postData['uupimg']);
        $saveData['add_time'] = date('Y-m-d H:i:s', time());
        //插入操作
        //保存信息
        try {
            Db::name('shop_goods_comment')->insert($saveData);
            //更新
            Db::name('shop_order_goods')->where('id', $postData['id'])->update(['is_comment' => 1]);
            //检测该订单的商品是否已经评价
            $is_comment = Db::name('shop_order_goods')->where('order_id', $orderGoods['order_id'])->where('is_comment', 0)->count();
            if ($is_comment == 1 || $is_comment == 0) {
                Db::name('shop_order')->where('id', $orderGoods['order_id'])->update(['is_comment' => 1]);
                Db::name('shop_order')->where('id', $orderGoods['order_id'])->update(['status' => 6]);
            }
        } catch (\Exception $exception) {
            $this->error($exception->getMessage());
        }
        $this->success('评价成功', 'mshop/user/order_list');
    }

    /**
     * 我的优惠券页面 未使用
     */
    public function coupon()
    {

        return $this->fetch();
    }

    public function ajaxcouponlist()
    {
        $time = time();
        $data = input();
        $where['user'] = session('user.id');
        if (isset($data['status'])) {
            switch ($data['status']) {
                case 'usable':
                    $where['is_use'] = 0;
                    $where['end_time'] = ['>= time', $time];
                    break;

                case 'willout':
                    $where['is_use'] = 0;
                    $where['end_time'][] = ['>= time', $time];
                    $where['end_time'][] = ['< time', $time + 3 * 24 * 3600];
                    break;

                case 'timeout':
                    $where['is_use'] = 0;
                    $where['end_time'] = ['< time', $time];
                    break;

                case 'used':
                    $where['is_use'] = 1;
                    break;
            }
            $this->assign('status', $data['status']);
        } else {
            $this->assign('status', '');
        }


        //获取所有
        $userCoupons = Db::name('user_coupon')->where($where)->order('is_use')->order('end_time')->paginate(tb_config('list_rows', 1));
        $coupon_list = $userCoupons->all();
        foreach ($coupon_list as $key => $coupon) {
            $coupon_list[$key]['info'] = Db::name('shop_coupon')->where('id', $coupon['coupon'])->find();
        }
        $this->assign('coupon_list', $coupon_list);
        $this->assign('page', $userCoupons->render());
        return $this->fetch();
    }

    /**
     * 我的优惠券页面  已使用
     */
    public function coupon1()
    {

        //获取优惠券信息
        $user_id = session('user.id');
        //获取未使用的优惠券
        $notUseCoupon = coupon()->userCoupon($user_id);
        //获取已经使用的优惠券
        $userUsedCoupon = coupon()->userUsedCoupon($user_id);
        //获取已经过期的优惠券
        $userTimedCoupon = coupon()->userTimedCoupon($user_id);

        //赋值
        $this->assign('notUseCoupon', $notUseCoupon);
        $this->assign('userUsedCoupon', $userUsedCoupon);
        $this->assign('userTimedCoupon', $userTimedCoupon);
        return $this->fetch();
    }

    /**
     * 我的优惠券页面  已过期
     */
    public function coupon2()
    {

        //获取优惠券信息
        $user_id = session('user.id');
        //获取未使用的优惠券
        $notUseCoupon = coupon()->userCoupon($user_id);
        //获取已经使用的优惠券
        $userUsedCoupon = coupon()->userUsedCoupon($user_id);
        //获取已经过期的优惠券
        $userTimedCoupon = coupon()->userTimedCoupon($user_id);

        //赋值
        $this->assign('notUseCoupon', $notUseCoupon);
        $this->assign('userUsedCoupon', $userUsedCoupon);
        $this->assign('userTimedCoupon', $userTimedCoupon);
        return $this->fetch();
    }

    /**
     * 我的收藏页面 商品
     */
    public function user_collect()
    {

        $page_num = tb_config('list_rows', 1);
        $user_id = session('user.id');
        // 商品收藏数量
        $total_num = Db::name('shop_goods_collect')->where('user_id', $user_id)->where('status', 1)->count();
        $this->assign('nums_goods', $total_num);

        // 浏览记录数量
        $history = cookie('goods_history');
        $this->assign('nums_his', count($history));

        $collectList = Db::name('shop_goods_collect')->where('user_id', $user_id)->where('status', 1)->paginate($page_num);
        $goods_list = $collectList->all();
        $this->assign('page', $collectList->render());
        $this->assign('goods_list', $goods_list);
        $tpl = '';
        if (request()->isAjax()) {
            $tpl = 'ajaxcollectgoods';
        }
        return $this->fetch($tpl);
    }

    /**
     * 我的收藏页面--删除商品
     */
    public function del_goods_collect()
    {
        $id = intval(request()->param('id'));
        if ($id == 0) {
            $this->error('收藏商品错误');
        }
        //删除
        try {
            Db::name('shop_goods_collect')->where('id', $id)->where('user_id', session('user.id'))->delete();
        } catch (\Exception $exception) {
            return $this->error($exception->getMessage());
        }
        return $this->success('删除成功');
    }

    /**
     * 我的收藏页面--删除店铺关注
     */
    public function del_shop_collect()
    {
        $id = intval(request()->param('id'));
        if ($id == 0) {
            $this->error('收藏商品错误');
        }
        //删除
        try {
            Db::name('cust_shop_collect')->where('id', $id)->where('user_id', session('user.id'))->delete();
        } catch (\Exception $exception) {
            return $this->error($exception->getMessage());
        }
        return $this->success('删除成功');
    }


    /**
     * 我的收藏页面--删除商品 手机版 全选
     */
    public function del_goods_collect2()
    {
        if (request()->isPost()) {
            $postData = request()->post();
            $collect_id = $postData['collect_id'];

            foreach ($collect_id as $key => $value) {

                Db::name('shop_goods_collect')->where('id', $value)->where('user_id', session('user.id'))->update(['status' => 0]);
            }
            $this->success('ok');

            /*$id = intval(request()->param('id'));
            if( $id == 0 ){
                $this->error('收藏商品错误');
            }
            //删除
            try{
                Db::name('shop_goods_collect')->where('id',$id)->where('user_id',session('user.id'))->update(['status'=>0]);
            }catch (\Exception $exception){
                return $this->error($exception->getMessage());
            }
            return $this->success('删除成功');*/
        }
    }

    /**
     * 我的收藏页面--店铺
     */
    public function shop_collect()
    {
        $user_id = session('user.id');
        // 商品收藏数量
        $total_num = Db::name('shop_goods_collect')->where('user_id', $user_id)->where('status', 1)->count();
        $this->assign('nums_goods', $total_num);
        // 店铺关注数量
        $focus = Db::name('cust_shop_collect')->field('count(id) as focus')->where(['user_id' => $user_id, 'status' => 1])->find();
        $nums_focus = empty($focus) ? 0 : $focus['focus'];
        $this->assign('nums_focus', $nums_focus);

        // 浏览记录数量
        $history = cookie('goods_history');
        $this->assign('nums_his', count($history));

        $collectList = Db::name('cust_shop_collect')->where('user_id', session('user.id'))->where('status', 1)->paginate(tb_config('list_rows', 1));
        $shop_list = $collectList->all();
        foreach ($shop_list as $key => $collect) {
            $shop_list[$key]['shop'] = Db::name('cust_shop')->find($collect['shop_id']);
            $shop_class = Db::name('cust_bind_class')->field('id,class_3')->where(['shop_id' => $collect['shop_id'], 'status' => 1, 'transh' => 0])->select();
            $class_show = '';
            foreach ($shop_class as $k => $class) {
                $class_show .= getTableValue('goods_category', ['id' => $class['class_3']], 'name') . '/';
            }

            $shop_list[$key]['class_show'] = rtrim($class_show, '/');
            $shop_list[$key]['shop_goods_rank'] = Db::name('shop_goods_comment')->where(['shop_id' => $collect['shop_id']])->avg('goods_rank');
            $shop_list[$key]['shop_serv_rank'] = Db::name('shop_goods_comment')->where(['shop_id' => $collect['shop_id']])->avg('service_rank');
        }
        $this->assign('page', $collectList->render());
        $this->assign('shop_list', $shop_list);
        $tpl = '';
        if (request()->isAjax()) {
            $tpl = 'ajaxcollectshop';
        }
        return $this->fetch($tpl);
    }

    public function cancelShopFocus($id)
    {
        $user_id = session('user.id');
        $res = Db::name('cust_shop_collect')->where(['id' => $id])->delete();
        if ($res !== false) {
            $this->success(lang('delete_success'));
        } else {
            $this->error('Delete failure,please try it again.');
        }

    }

    // 商品浏览记录
    public function goods_history()
    {
        $user_id = session('user.id');
        // 商品收藏数量
        $total_num = Db::name('shop_goods_collect')->where('user_id', $user_id)->where('status', 1)->count();
        $this->assign('nums_goods', $total_num);

        // 浏览记录数量
        $history = cookie('goods_history');
        $this->assign('nums_his', count($history));

        if (!empty($history)) {
            $goods_ids = implode(',', $history);
            $goods = Db::name('shop_goods')->where('id', 'IN', $goods_ids)->paginate(10);
            $goods_list = $goods->all();
        } else {
            $goods_list = [];
        }
        $this->assign('goods_list', $goods_list);
        $tpl = '';
        if (request()->isAjax()) {
            $tpl = 'ajaxgoodshistory';
        }
        return $this->fetch($tpl);
    }

    // 删除商品浏览记录
    public function del_goods_history($id)
    {
        if ($id == 'all') {
            cookie('goods_history', null);
            $this->success('清空成功');
        } else {
            $history = cookie('goods_history');
            foreach ($history as $key => $value) {
                if ($id == $value) {
                    unset($history[$key]);
                }
            }
            cookie('goods_history', $history);
            $this->success('删除成功');
        }
    }

    /**
     * 申请提现页面
     */
    public function withdrawals()
    {

    }

    /**
     * 安全设置
     */
    public function user_pass()
    {
        if (request()->isPost()) {
            $postData = request()->post();
            $mobile = Db::name('users')->where('id', session('user.id'))->value('mobile');
            $is_sms_valid = tb_config('web_regis_sms_enable', 1);
            if ($is_sms_valid == 1) {
                // 验证手机验证码是否正确
                $check_sms_code = check_sms_code($mobile, $postData['code']);
                if (!$check_sms_code) {
                    $this->error('手机验证码验证失败，请重试');
                }
            }

            if ($postData['re_pass'] !== $postData['new_pass']) {
                $this->error('两次输入的密码不一致');
            }

            $pass_err = Db::name('users')->where(['id' => session('user.id'), 'password' => encrypt_pwd($postData['old_pass'])])->find();
            if (!$pass_err) {
                $this->error('原密码验证失败，请确认后重试。');
            }

            $res = Db::name('users')->where('id', session('user.id'))->setField('password', encrypt_pwd($postData['new_pass']));
            if ($res !== false) {
                $this->success('密码修改成功。');
            } else {
                $this->error('密码修改失败，请重试');
            }


        } else {
            return $this->fetch();
        }
    }

    public function send_sms_code()
    {
        $data = input('post.');
        if (!captcha_check($data['code'])) {
            $this->error('图形验证码验证失败，请重试');
        };
        if (!isset($data['mobile'])) {
            $mobile = Db::name('users')->where('id', session('user.id'))->value('mobile');
        } else {
            $mobile = $data['mobile'];
        }
        $sess_id = session_id();
        $mins = tb_config('sms_code_time', 1) / 60;
        $the_last = Db::name('admin_sms_code')->where(['mobile' => $mobile, 'session_id' => $sess_id, 'is_used' => '0'])->where('end_time', '>', time())->find();
        if ($the_last) {
            $this->error('验证码请求过于频繁，请' . $mins . '分钟后再试。');
        }
        $smsCode = rand(100000, 999999);
        $end_time = time() + tb_config('sms_code_time', 1);
        $codeData = [
            'mobile' => $mobile,
            'session_id' => $sess_id,
            'add_time' => date('Y-m-d H:i:s'),
            'end_time' => $end_time,
            'code' => $smsCode
        ];
        // dump($codeData);
        $res = Db::name('admin_sms_code')->insert($codeData);
        if ($res !== false) {
            $sms = '您当前的验证码：' . $smsCode . '，验证码有效时间' . $mins . '分钟，过期失效。请及时使用。' . tb_config('sms_sign_key', 1);
            $res = sendSMS($mobile, $sms);
            if ($res === true) {
                $this->success('验证码发送成功，请注意查收。');
            } else {
                $this->error($res);
            }

        } else {
            $this->error('验证码发送失败，请重试');
        }
    }

    public function edit_phone()
    {
        if (request()->isPost()) {
            $data = input();
            // 校验用户收到的短信验证码
            $code_res = check_sms_code($data['old_phone'], $data['code']);
            if (!$code_res) {
                $this->error('手机验证码验证失败，请重试');
            }
            $old_phone = Db::name('users')->where('id', session('user.id'))->value('mobile');
            if ($old_phone != $data['old_phone']) {
                $this->error('原手机号验证失败，请确认您的原手机号');
            }
            $res = Db::name('users')->where('id', session('user.id'))->update(['mobile' => $data['new_phone'], 'mobile_validated' => 1]);
            if ($res !== false) {
                $this->success('绑定手机更换成功');
            } else {
                $this->error('绑定手机更换失败，请重试');
            }
        } else {
            return $this->fetch();
        }
    }

    // 验证用户邮箱
    public function validate_email()
    {
        if (request()->isPost()) {
            $data = input();
            $codeData = session('mail_code');

            if (empty($codeData) || $codeData['mail'] != $data['email'] || $codeData['code'] != $data['code']) {
                $this->error('邮箱验证码验证失败，请重新获取');
            }

            if ($codeData['use_time'] < time()) {
                $this->error('邮箱验证码已过期，请重新获取');
            }

            $res = Db::name('users')->where('id', session('user.id'))->update(['email' => $data['email'], 'email_validated' => 1]);
            if ($res !== false) {
                session('mail_code', null);
                $this->success('邮箱认证成功');
            } else {
                $this->error('邮箱认证失败，请重试');
            }

        } else {
            return $this->fetch();
        }
    }

    // 修改用户邮箱
    public function change_email()
    {
        if (request()->isPost()) {
            $data = input();
            $codeData = session('mail_code');
            $user_mail = Db::name('users')->where('id', session('user.id'))->value('email');
            if ($user_mail != $data['old_email']) {
                $this->error('原始邮箱验证失败');
            }

            if (empty($codeData) || $codeData['mail'] != $data['old_email'] || $codeData['code'] != $data['code']) {
                $this->error('邮箱验证码验证失败，请重新获取');
            }

            if ($codeData['use_time'] < time()) {
                $this->error('邮箱验证码已过期，请重新获取');
            }

            $res = Db::name('users')->where('id', session('user.id'))->update(['email' => $data['new_email'], 'email_validated' => 1]);
            if ($res !== false) {
                session('mail_code', null);
                $this->success('邮箱更换成功');
            } else {
                $this->error('邮箱更换失败，请重试');
            }
        } else {
            return $this->fetch();
        }
    }

    // 发送动态验证码邮件
    public function sendEmailCode($mail, $act)
    {
        $code = rand(100000, 999999);
        $code_arr = ['mail' => $mail, 'code' => $code, 'use_time' => time() + tb_config('mail_code_time', 1)];
        session('mail_code', $code_arr);     //session中保存邮件验证码相关信息，包含收件地址，验证码及有效截止时间
        $time_min = tb_config('mail_code_time', 1) / 60;
        if ($act == 'change') {
            $res = sendMsg(0, $mail, 'change_email', ['code' => $code, 'time_min' => $time_min]);
        } else {
            $res = sendMsg(0, $mail, 'varify_email', ['code' => $code, 'time_min' => $time_min]);
        }

        if ($res) {
            $this->success('验证码已发送，请注意查收');
        } else {
            $this->error('验证码发送失败，请重试');
        }

    }

    /**
     * 余额页面
     */
    public function account()
    {
        $user_id = session('user.id');
        // 有效的优惠券数量(未使用、状态正常的有效期内的优惠券)
        $useable_coupon = Db::name('user_coupon')->where(['is_use' => 0, 'user' => $user_id, 'status' => 1])->where('end_time', '>= time', time())->count();
        // 即将过期的优惠券数量(未使用、状态正常的有效期在3天内的优惠券)
        $willout_coupon = Db::name('user_coupon')->where(['is_use' => 0, 'user' => $user_id, 'status' => 1])->where('end_time', '>= time', time())->where('end_time', '< time', time() + 3 * 24 * 3600)->count();
        // 已过期的优惠券数量(未使用、状态正常的已过有效期的优惠券)
        $timeout_coupon = Db::name('user_coupon')->where(['is_use' => 0, 'user' => $user_id, 'status' => 1])->where('end_time', '< time', time())->count();
        $this->assign('useable_coupon', $useable_coupon);
        $this->assign('willout_coupon', $willout_coupon);
        $this->assign('timeout_coupon', $timeout_coupon);

        return $this->fetch();
    }

    // ajax获取用户资金收支明细
    public function ajaxAccountLog()
    {
        $user_id = session('user.id');
        $accounts = Db::name('user_account_log')->where(['user_id' => $user_id])->order('change_time DESC')->paginate(5);
        $log_list = $accounts->all();
        $this->assign('list', $log_list);
        $page = $accounts->render();
        $this->assign('page', $page);
        return $this->fetch();
    }

    public function points()
    {
        return $this->fetch();
    }

    // ajax获取用户资金收支明细
    public function ajaxPointLog()
    {
        $user_id = session('user.id');
        $points = Db::name('user_points')->where(['user_id' => $user_id])->order('change_time DESC')->paginate(5);
        $log_list = $points->all();
        $this->assign('list', $log_list);
        $page = $points->render();
        $this->assign('page', $page);
        return $this->fetch();
    }

    /**
     * 退货管理
     */
    public function return_goods_list()
    {

    }

    /**
     * 佣金管理
     */
    public function rebate_list()
    {

    }

    /**
     * 我的推广
     */
    public function spread_list()
    {

    }


    /**
     * 登录
     */
    public function login()
    {
        if (empty(session('user'))) {
            //检测cookie
            if (!empty(cookie('remember')) && intval(cookie('remember')) == 1) {
                $username = empty(cookie('username')) ? '' : cookie('username');
                $password = !empty($username) && !empty(cookie('password')) ? cookie('password') : '';
                $this->assign('username', $username);
                $this->assign('password', $password);
                $this->assign('remember', cookie('remember'));
            }
            return $this->fetch();
        }
        $this->redirect('mshop/user/index');
    }

    /**
     * 退出登录
     */
    public function logout()
    {
        session('user', null);
        return $this->success('会员注销成功', 'mshop/user/login');
    }

    /**
     * 注册
     */
    public function signup()
    {
        $data = input();
        if (!empty($data['d'])) {
            session('intro_sysid', $data['d']);
        }
        return $this->fetch();
    }

    // 推广注册
    public function extend_reg($sysid)
    {
        session('intro_sysid', $sysid);
        $this->assign('sysid', $sysid);
        return $this->fetch();
    }


    // 显示个人推广二维码
    public function qr_code()
    {
        $sysid = session('user.sysid');
        $this->assign('sysid', $sysid);
        return $this->fetch();
    }

    public function no_qr()
    {
        return $this->fetch();
    }

    // 忘记密码
    public function reset_pwd()
    {
        return $this->fetch();
    }


    public function sign()
    {
        $this->assign('active', 'user_sign');
        $user_id = session('user.id');
        $sign_last = Db::name('user_sign')->where('user_id', $user_id)->order(['id' => 'DESC'])->find();
        $sign_day = $sign_last['sign_time'];
        $sign_day = date("Y-m-d", strtotime($sign_day));
        // 今天日期
        $today = date('Y-m-d');
        if ($sign_day == $today) {
            $sign = [
                'status' => true,
                'days' => $sign_last['days']
            ];
        } else {
            $sign = [
                'status' => false,
                'days' => 0
            ];
        }
        $this->assign('sign', $sign);


        // 取当月所有日期
        $days = $this->getMonthDays();
        foreach ($days as $key => $day) {
            $is_sign = Db::name('user_sign')->where(['user_id' => $user_id, 'sign_date' => $day])->find();
            $is_sign = !$is_sign ? false : true;
            $monthDay = [
                'title' => '第' . ($key + 1) . '天',
                'date' => $day,
                'is_sign' => $is_sign,
                'give' => 10
            ];
            $monthSign[] = $monthDay;
        }
        $this->assign('monthSign', $monthSign);
        return $this->fetch();
    }

    private function getMonthDays($month = "this month", $format = "Y-m-d")
    {
        $start = strtotime("first day of $month");
        $end = strtotime("last day of $month");
        $days = array();
        for ($i = $start; $i <= $end; $i += 24 * 3600) $days[] = date($format, $i);
        return $days;
    }

    public function signup_2()
    {
        if (empty(session('reg_id'))) {
            $this->error('非法访问');
        }

        $user = Db::name('users')->find(session('reg_id'));
        $this->assign('email', $user['email']);
        $enable_time = time() + 48 * 3600;
        $this->assign('enable_time', $enable_time);
        if ($user['email_send'] == 0) {
            $actData = base64_encode($user['sysid'] . '##' . time());
            $act_url = url('member/login/active_mail', ['data' => $actData], '', true);
            $emailData = [
                'username' => $user['username'],
                'url' => $act_url,
                'time' => date('Y-m-d'),
            ];
            $res = sendMsg(0, $user['email'], 'email_reg_activate', $emailData);
            if ($res) {
                Db::name('users')->where('id', session('reg_id'))->setField('email_send', 1);
            }
        }
        return $this->fetch();
    }

    public function signup_3()
    {
        if (empty(session('reg_id'))) {
            $this->error('非法访问');
        }

        $user = Db::name('users')->find(session('reg_id'));
        $this->assign('email', $user['email']);
        if ($user['email_validated'] != 1) {
            $this->redirect('login/reg_2');
        }
        return $this->fetch();
    }

    // 实时检测账户是否激活
    public function check_act()
    {
        if (empty(session('reg_id'))) {
            $this->error('非法访问');
        }
        $user = Db::name('users')->find(session('reg_id'));
        if ($user['email_validated'] == 1) {
            $this->success('账户激活成功');
        } else {
            $this->error('账户仍未激活');
        }
    }

    // 邮件重发
    public function reSend()
    {
        if (empty(session('reg_id'))) {
            $this->error('非法访问');
        }

        $user = Db::name('users')->find(session('reg_id'));
        $actData = base64_encode($user['sysid'] . '##' . time());
        $act_url = url('member/login/active_mail', ['data' => $actData], '', true);
        $emailData = [
            'username' => $user['username'],
            'url' => $act_url,
            'time' => date('Y-m-d'),
        ];
        $res = sendMsg(0, $user['email'], 'email_reg_activate', $emailData);
        if ($res) {
            $this->success('邮件发送成功，请注意查收。');
        } else {
            $this->error('邮件发送失败，请重试');
        }
    }


    /**
     * 检测订单中的商品是否全部存在
     * @param int $order_id
     *
     */
    public function check_order_goods()
    {
        $order_id = empty(request()->param('id')) ? 0 : request()->param('id');
        $order_id = intval($order_id);
        //获取商品
        $field = 'og.goods_id,og.goods_num,og.spec_id,og.prom_id';
        $order_goods = Db::name('shop_order_goods')->alias('og')->join('shop_order o', 'og.order_id=o.id')->where(['og.order_id' => $order_id, 'o.user_id' => session('user.id')])->field($field)->select();
        //不可购买的商品
        $cant_buy = [];
        foreach ($order_goods as $goods) {
            //检测商品数量，商品状态
            $goodsInfo = Db::name('shop_goods')->where('id', $goods['goods_id'])->field('title,status,stock')->find();
            if ($goodsInfo['status'] == 0) {
                if ($goods['spec_id'] > 0) {
                    //获取规格库存数量
                    $spec_stock = getTableValue('shop_spec_price', 'id=' . $goods['spec_id'], 'store_count');
                    if ($spec_stock < $goods['goods_num']) {
                        $cant_buy[$goods['goods_id']] = $goodsInfo['title'] . ":商品已经下架或者库存不足\n";
                    }
                } else {
                    if ($goodsInfo['stock'] < $goods['goods_num']) {
                        $cant_buy[$goods['goods_id']] = $goodsInfo['title'] . ":商品已经下架或者库存不足\n";
                    }
                }
                //查看活动是否加入促销活动
                if (!empty($goods['prom_id']) || $goods['prom_id'] > 0) {
                    //检测促销活动是否可用
                    $checkProm = promotion()->checkProm($goodsInfo['prom_id']);
                    if ($checkProm == false) {
                        $cant_buy[$goods['goods_id']] = $goodsInfo['title'] . ":商品促销活动已经结束，您仍可购买该商品，但是不可享受促销\n";
                    }
                }
            }
        }
        if (count($cant_buy) > 0) {
            $data = implode(',', $cant_buy);
            $data .= '是否继续购买';
            $this->error($data);
        } else {
            $this->buy_again($order_id);
        }
    }

    public function buy_again($order_id)
    {
        $order_id = empty(request()->param('id')) ? $order_id : request()->param('id');
        $order_id = intval($order_id);
        //获取商品
        $field = 'og.goods_id,og.goods_num,og.spec_id,og.prom_id';
        $order_goods = Db::name('shop_order_goods')->alias('og')->join('shop_order o', 'og.order_id=o.id')->where(['og.order_id' => $order_id, 'o.user_id' => session('user.id')])->field($field)->select();

        foreach ($order_goods as $goods) {
            //检测商品数量，商品状态
            $goodsInfo = Db::name('shop_goods')->where('id', $goods['goods_id'])->field('title,status,stock,shop_price')->find();
            if ($goodsInfo['status'] != 0) {

                if ($goods['spec_id'] > 0) {
                    //获取规格库存数量
                    $spec = Db::name('shop_spec_price')->where('id=' . $goods['spec_id'])->field('key_sign,key_name,price')->find();
                    $spec_stock = getTableValue('shop_spec_price', 'id=' . $goods['spec_id'], 'store_count');
                    if ($spec_stock >= $goods['goods_num']) {
                        $cartData['spec_id'] = $goods['spec_id'];
                        $cartData['spec_key'] = $spec['key_sign'];
                        $cartData['spec_text'] = $spec['key_name'];
                        $cartData['shop_price'] = $spec['price'];
                    }
                } else {
                    $cartData['shop_price'] = $goodsInfo['shop_price'];
                }
                //加入购物车
                $goodsData = Db::name('shop_goods')->where('id', $goods['goods_id'])->field('cid,shop_id,id,title,market_price')->find();
                //检测购物车中是否存在该商品
                $is_exist = getTableValue('shop_cart', '`user_id`=' . session('user.id') . ' and `goods` = ' . $goodsData['id'] . ' and `status`>0', 'goods_num');
                if ($is_exist == '') {
                    $cartData['cid'] = $goodsData['cid'];
                    $cartData['shop_id'] = $goodsData['shop_id'];
                    $cartData['user_id'] = session('user.id');
                    $cartData['goods'] = $goodsData['id'];
                    $cartData['goods_name'] = $goodsData['title'];
                    $cartData['market_price'] = $goodsData['market_price'];
                    $cartData['goods_num'] = $goods['goods_num'];
                    $cartData['selected'] = 1;
                    //查看活动是否加入促销活动

                    if (!empty($goods['prom_id'])) {
                        //检测促销活动是否可用
                        $checkProm = promotion()->checkProm($goods['prom_id']);
                        if ($checkProm == true) {
                            $cartData['prom_id'] = $goods['prom_id'];
                        }
                    }
                    $cartData['add_time'] = date('Y-m-d H:i:s', time());
                }
                //插入操作
                try {
                    if (!empty($is_exist)) {
                        if ($is_exist < $goods['goods_num']) {
                            Db::name('shop_cart')->where('user_id=' . session('user.id') . ' and goods = ' . $goodsData['id'])->update(['goods_num' => $goods['goods_num']]);
                        }

                    } else {
                        Db::name('shop_cart')->insert($cartData);
                    }
                } catch (\Exception $exception) {
                    $this->error($exception->getMessage());
                }

            }
        }
        $this->success();
    }


    /**
     * 粉丝列表
     *
     */
    public function fans()
    {

        $type = empty(request()->param('type')) ? '' : request()->param('type');
        if ($type == '') {
            //获取新的粉丝数量
            //查看是否存在排序规则
            $sort = empty(request()->param('sort')) ? '' : request()->param('sort');
            $this->assign('sort_l', $sort);
            $sort_d = '';
            if ($sort != '') {
                //分析排序
                $sort = explode('_', $sort);
                if ($sort[0] == 'regtime') {
                    //根据用户注册时间排序
                    $sort_d = 'reg_time ' . $sort[1];
                } elseif ($sort[0] == 'buymoney') {
                    $sort_d = 'total_amount ' . $sort[1];
                } elseif ($sort[0] == 'fansnum') {
                    $sort_d = 'fans_num ' . $sort[1];
                }
            }
            $sort[1] = empty($sort[1]) ? '' : $sort[1];
            $this->assign('sort', $sort[1]);
            if ($sort[1] == 'asc') {
                $this->assign('sort_r', 'desc');
            } else {
                $this->assign('sort_r', 'asc');
            }

            $search = empty(request()->param('search')) ? '' : request()->param('search');
            $where = '';
            if ($search != '') {
                $where = '`sysid` = ' . $search;
            }
            //获取粉丝列表
            $fansList = Db::name('users')->field('sysid,head_pic,nickname,reg_time')->where('introducer', session('user.id'))->order($sort_d)->where($where)->select();

            //计算新粉丝数量
            $newFans = Db::name('users')->where('introducer', session('user.id'))->where('new_fans', 1)->count();
            //计算新成交粉丝数量
            $newOrderFans = Db::name('users')->where('introducer', session('user.id'))->where('new_order>0')->count();
            //计算高价值粉丝数量
            $totalOrderFans = Db::name('users')->where('introducer', session('user.id'))->where('total_order>0')->count();
            if (request()->isAjax() == true) {
                return $fansList;
            }
            $this->assign('newFans', $newFans);
            $this->assign('newOrderFans', $newOrderFans);
            $this->assign('totalOrderFans', $totalOrderFans);
            $this->assign('fanslist', $fansList);
            return $this->fetch();
        } else {
            $type = explode('_', $type);
            $type = $type[0] . '_' . $type[1];
            //获取粉丝列表
            $fansList = Db::name('users')->field('sysid,head_pic,nickname,reg_time')->where('introducer', session('user.id'))->where('`' . $type . '` > 0')->select();
            if ($type != 'total_order') {
                $data = [
                    $type => 0,
                ];
                Db::name('users')->where('introducer', session('user.id'))->where('`' . $type . '` > 0')->update($data);
            }
            $this->assign('fanslist', $fansList);
            return $this->fetch('fans_2');
        }

    }

    /**
     * 消息中心
     * 显示最近的一条消息
     */
    public function news()
    {
        //获取最近的一条未读的交易消息，如果没有则显示暂未消息
        $order_message = order()->getNextOrderMessage(session('user.id'), 'title');
        if ($order_message == '') {
            $order_message = '暂无消息';
        } else {
            $order_message = $order_message['title'];
        }
        $this->assign('order_message', $order_message);
        //获取最近的一条通知消息，
        $notice_message_list = Db::name('notice_message')->where('status', 0)->where('user_id', session('user.id'))->field('title,add_time')->find();
        if ($notice_message_list == '') {
            $notice_message = '暂无消息';
            $notice_message_time = '';
        } else {
            $notice_message = $notice_message_list['title'];
            $notice_message_time = substr($notice_message_list['add_time'], 0, 10);
        }
        $this->assign('notice_message', $notice_message);
        $this->assign('notice_message_time', $notice_message_time);
        return $this->fetch();
    }

    /**
     * 交易消息列表
     */
    public function order_message_list()
    {
        //获取用户所有交易消息
        $orderMessageList = order()->getOrderMessage(session('user.id'), 'title,message,add_time');
        $this->assign('orderMessageList', $orderMessageList);
        //修改所有交易消息为已读
        order()->setAllOrderMessageStatus(session('user.id'), 1);
        return $this->fetch();
    }

    /**
     * 通知消息列表
     */
    public function notice_message_list()
    {
        //通知消息列表
        $noticeMessageList = Db::name('notice_message')->where('status > -1')->where('user_id', session('user.id'))->field('title,message,add_time')->select();
        $this->assign('noticeMessageList', $noticeMessageList);
        //修改所有通知消息为已读
        Db::name('notice_message')->where('user_id', session('user_id'))->update(['status' => 1]);
        return $this->fetch();
    }


    /**
     * 奖励页面
     */
    public function reward()
    {
        //获取累计奖励金额
        $all_divided_into_price = Db::name('user_distribution')->where('user_id', session('user.id'))->sum('divided_into_price');
        $this->assign('all_divided_into_price', $all_divided_into_price);
        //获取累计订单金额
        $all_order_price = Db::name('user_distribution')->where('user_id', session('user.id'))->column('order_id');
        $all_order_price = implode(',', $all_order_price);
        $all_order_price = Db::name('shop_order')->where('id in(' . $all_order_price . ')')->sum('payable_price-change_mny');
        $this->assign('all_order_price', $all_order_price);
    }

    // 绑定第三方登录用户
    public function bind_user()
    {
        if (request()->isPost()) {
            $oauth_user = session('oauth_user');
            $data = input();
            $is_sms_valid = tb_config('web_regis_sms_enable', 1);
            if ($is_sms_valid == 1) {
                // 验证手机验证码是否正确
                $check_sms_code = check_sms_code($data['account'], $data['code']);
                if (!$check_sms_code) {
                    $this->error('手机验证码验证失败，请重试');
                }
            }

            $is_mail = strpos($data['account'], '@');   //根据用户凭据中是否含有@判断凭据是否为邮箱
            if ($is_mail === false) {     //不是邮箱即为手机号
                $is_country = strpos($data['account'], '.');    //根据手机号中是否含有.判断是否为国际手机号
                if ($is_country !== false) {
                    $account = explode('.', $data['account']);
                    $account = $account[1];     //如是国际手机号，取.之后的号码
                } else {
                    $account = $data['account'];
                }
                $user = Db::name('users')->where('mobile', $account)->find();
            } else {
                $oauth_user['email_validated'] = 1;
                $account = $data['account'];
                $user = Db::name('users')->where('email', $account)->find();
            }
            $oauth_user['last_login'] = time();
            $oauth_user['last_ip'] = get_client_ip();
            if (!empty($user)) {    //查找到用户
                if (!empty($user['nickname'])) {
                    unset($oauth_user['nickname']);
                }
                if (!empty($user['username'])) {
                    unset($oauth_user['username']);
                }
                if (!empty($user['head_pic'])) {
                    unset($oauth_user['head_pic']);
                }
                if (!empty($user['email'])) {
                    unset($oauth_user['email']);
                }
                $bind_res = Db::name('user_bind')->where(['oauth' => $oauth_user['oauth'], 'openid' => $oauth_user['openid'], 'user_id' => $user['id']])->find();
                if (!empty($bind_res)) {
                    // unset($oauth_user['oauth'],$oauth_user['openid']);
                    $res = Db::name('users')->where('id', $user['id'])->update($oauth_user);
                    $user_id = $user['id'];
                } else {
                    $user_id = $user['id'];
                    $res = false;
                }
            } else {
                // 没有找到用户，则创建新用户
                if ($is_mail === false) {
                    $oauth_user['mobile'] = $account;
                }
                $oauth_user['reg_time'] = time();
                $oauth_user['sysid'] = time();
                $oauth_user['token'] = create_token();
                $res = Db::name('users')->insertGetId($oauth_user);
                $user_id = $res;
                $bind_res = false;
            }
            // dump($bind_res);die;
            if (!$bind_res) {
                $bind_ress = Db::name('user_bind')->insert(['oauth' => $oauth_user['oauth'], 'openid' => $oauth_user['openid'], 'user_id' => $user_id]);
                if ($bind_ress !== false) {
                    $user_res = Db::name('users')->find($user_id);
                    session('user', $user_res);
                    $this->success('用户绑定成功', url('mshop/user/index'));
                } else {
                    $this->error('绑定用户失败，请重试。');
                }
            }
        } else {
            $oauth_user = session('oauth_user');
            if (empty($oauth_user)) {
                $this->error('第三方登录平台数据为空，无法绑定');
            }
            return $this->fetch();
        }
    }

}