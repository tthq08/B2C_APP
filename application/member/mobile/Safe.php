<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台用户中心模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017 深圳市俊网网络有限公司 [ http://www.junnet.net ]
// +----------------------------------------------------------------------
// | 官方网站：http://www.junnet.net
// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------

namespace app\member\mobile;

use think\Db;
use think\Validate;

class Safe extends Homebase
{

    /**
     * 构造方法
     */
    public function _initialize()
    {
        if( empty(session('user.id')) )
        {
            $this->redirect('member/Login/index');
        }
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 安全中心首页
     * @return mixed
     */
    public function index()
    {
        // 密码验证
        $reData['passVerification'] = api('member','User','verification',[session('user.id'),1]);
        // 手机验证
        $reData['mobileVerification'] = api('member','User','verification',[session('user.id'),2]);
        // 邮箱验证
        $reData['emailVerification'] = api('member','User','verification',[session('user.id'),3]);

        $this->assign('verification',$reData);
        return $this->fetch();
    }


    /**
     * 修改登录密码
     * @return mixed
     */
    public function update_password()
    {
        session('update_password_save_token',null);
        // 查看修改绑定方式 1:手机号码更换,2:邮箱地址更换
        $type = input('type');
        $type = empty($type) ? 1 : $type;
        if( $type == 1 ){
            // 手机号码更换
            $bindM = api('member','User','verification',[session('user.id'),2]);
            if( $bindM == true ){
                // 查看是否已通过邮箱验证
                $bindE = api('member','User','verification',[session('user.id'),3]);
                $this->assign('bindEmail',$bindE);
                return $this->fetch('update_password_1');
            }
        }else{
            // 邮箱地址更换
            // 查看用户是否设置邮箱
            $bindE = api('member','User','verification',[session('user.id'),3]);
            if( $bindE == true ){
                // 更换绑定手机号码,通过邮箱地址进行更换
                // 查看是否已通过手机验证
                $bindM = api('member','User','verification',[session('user.id'),2]);
                $this->assign('bindMobile',$bindM);
                return $this->fetch('update_password_2');
            }
        }

        if( $type == 1 && api('member','User','verification',[session('user.id'),3]) ){
            // 使用邮箱地址更换
            return $this->fetch('update_password_2');
        }elseif ( $type == 2 && api('member','User','verification',[session('user.id'),2]) ){
            // 使用手机号码更换
            return $this->fetch('update_password_1');
        }else{
            // 直接更换
            // 创建直接更换token
            $token = md5(uniqid());
            session('update_password_token',$token);
            // 跳转到填写密码页面
            $this->redirect('update_password_set');
        }

    }


    /**
     * 设置登录密码
     * @return mixed
     */
    public function update_password_set()
    {
        // 查看是否是直接更换
        if( !empty(session('update_password_save_token')) ){
            // 清空直接登录session
            session('update_password_save_token',null);

        }else{
            // 检查是否是post提交
            if( request()->isPost() == false || request()->isPost() == null ){
                $this->redirect('member/Safe/update_password_token');
            }
            // 获取传过来的数据
            $data = request()->post();
            // 数据验证
            $rule = [
                'mobile' => 'require|token',
            ];
            $vali = api('sys','Verification','valiCheck',[$rule,$data]);
            if( $vali['code'] == 0 ){
                $this->error($vali['error']);
            }
            // 验证是否是当前用户手机号码
            $isUser = $data['mobile'] == session('user.mobile') ? true : false;
            if( $isUser == false ){
                $this->error('您的手机号码验证失败!');
            }
            // 验证手机验证码是否正确
            $check_sms_code = api('sys','Verification','check_sms_code',[session('user.mobile'),$data['code']]);
            if (!$check_sms_code) {
                $this->error('手机验证码验证失败，请重试');
            }
            // 通过验证,显示修改密码页面
        }
        // 创建数据验证token
        $token = md5(uniqid());
        session('update_password_save_token',$token);

        return $this->fetch();
    }


    /**
     * 保存密码
     * @return mixed
     */
    public function save_password()
    {
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('update_password');
        }
        // 验证session
        if( empty(session('update_password_save_token')) ){
            $this->redirect('update_password');
        }
        // 获取数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'password' => 'require|token',
            'repassword' => 'require|/^[A-Za-z0-9]{4,40}$/',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'update_password');
        }
        // 验证密码是否相同
        if( $data['password'] !== $data['repassword'] ){
            $this->error('请输入相同的密码!','update_password');
        }
        // 验证通过,修改用户密码
        $save = api('member','Safe','updateUserPassword',[session('user.id'),$data['repassword']]);
        if( $save !== true ){
            $this->error('保存失败,请重试!','update_password');
        }
        return $this->redirect('password_success');
    }

    /**
     * 保存成功页面
     * @return mixed
     */
    public function password_success()
    {
        return $this->fetch('update_password_success');
    }


    /**
     * 更换手机验证页面
     * @ps 更换手机号码只能采用原手机号码,邮箱地址进行更换
     * @return mixed
     */
    public function mobile()
    {
        // 查看修改绑定方式 1:原手机号码更换,2:邮箱地址更换,3:支付密码更换
        session('update_mobile_save_token',null);
        $type = input('type');
        if( $type != 2 && $type != 3  ){
            $type = 2;
        }
        $updateTpl = $type;
        if( $type == 2 ){
            // 查看用户绑定手机
            $bindM = api('member','User','verification',[session('user.id'),2]);
            $bindE = api('member','User','verification',[session('user.id'),3]);
            if( $bindM == true ){
                $updateTpl = 2;
            }else{
                // 查看是否设置邮箱
                if( $bindE == true ){
                    // 更换绑定手机号码,通过邮箱地址进行更换
                    $updateTpl = 2;
                }else{
                    // 支付登录密码
                    $updateTpl = 1;
                }
            }
        }elseif ( $type == 2 ){
            // 查看用户是否设置邮箱
            $bindE = api('member','User','verification',[session('user.id'),3]);
            $bindM = api('member','User','verification',[session('user.id'),2]);
            if( $bindE == true ){
                // 更换绑定手机号码,通过邮箱地址进行更换
                $updateTpl = 3;
            }else{
                // 查看是否设置手机号码
                $bindM = api('member','User','verification',[session('user.id'),2]);
                if( $bindM == true ){
                    $updateTpl = 2;
                }else{
                    // 支付登录密码
                    $updateTpl = 1;
                }
            }
        }

        if( $updateTpl == 2 ){
            $this->assign('bindMobile',$bindM);
            $this->assign('bindEmail',$bindE);
            return $this->fetch('update_mobile_2');
        }elseif($updateTpl == 3 ){
            $this->assign('bindEmail',$bindE);
            $this->assign('bindMobile',$bindM);
            return $this->fetch('update_mobile_3');
        }else{
            return $this->fetch('update_mobile_1');
        }

    }


    /**
     * 设置手机号码
     * @return mixed
     */
    public function update_mobile_set()
    {
        // 检查是否是post提交
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('member/Safe/mobile');
        }
        // 获取传过来的数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'mobile' => 'require|token',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'mobile');
        }
        // 验证是否是当前用户手机号码
        $isUser = $data['mobile'] == session('user.mobile') ? true : false;
        if( $isUser == false ){
            $this->error('您的手机号码验证失败!');
        }
        // 验证手机验证码是否正确
        $check_sms_code = api('sys','Verification','check_sms_code',[session('user.mobile'),$data['code']]);
        if (!$check_sms_code) {
            $this->error('手机验证码验证失败，请重试');
        }
        // 通过验证,显示修改手机号码页面

        // 创建数据验证token
        $token = md5(uniqid());
        session('update_mobile_save_token',$token);

        return $this->fetch();
    }


    /**
     * 保存新的手机号码
     * @return mixed
     */
    public function save_mobile()
    {
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('update_password');
        }
        // 验证session
        if( empty(session('update_password_save_token')) ){
            $this->redirect('update_password');
        }
        // 获取数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'newmobile' => 'require|token',
            'code' => 'require',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'mobile');
        }
        // 验证手机验证码是否正确
        $check_sms_code = api('sys','Verification','check_sms_code',[$data['newmobile'],$data['code']]);
        if (!$check_sms_code) {
            $this->error('手机验证码验证失败，请重试');
        }

        // 验证密码是否相同
        if( $data['newmobile'] == session('user.mobile') ){
            $this->error('修改失败:修改的手机号与当前手机号相同!','mobile');
        }
        // 验证通过,修改用户手机号码
        $save = api('member','Safe','updateUserMobile',[session('user.id'),$data['newmobile']]);
        if( $save !== true ){
            $this->error('保存失败,请重试!','update_password');
        }
        session('user.mobile',$data['newmobile']);
        return $this->redirect('password_success');
    }

    /**
     * 手机号码修改成功页面
     * @return mixed
     */
    public function update_mobile_success()
    {
        return $this->fetch();
    }


    /**
     * 修改支付密码
     * @return mixed
     */
    public function paypass()
    {
        // 检查是否绑定手机号码
        if( empty(session('user.mobile')) )
        {
            $this->error('您尚未绑定手机号码,无法修改支付密码,请绑定手机号码后重试!');
        }
        $bindM = api('member','User','verification',[session('user.id'),2]);
        $this->assign('bindMobile',$bindM);
        return $this->fetch();
    }


    /**
     * 设置支付密码
     * @return mixed
     */
    public function update_paypass_set()
    {
        // 检查是否是post提交
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('member/Safe/mobile');
        }
        // 获取传过来的数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'mobile' => 'require|token',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'paypass');
        }
        // 验证是否是当前用户手机号码
        $isUser = $data['mobile'] == session('user.mobile') ? true : false;
        if( $isUser == false ){
            $this->error('您的手机号码验证失败!');
        }
        // 验证手机验证码是否正确
        $check_sms_code = api('sys','Verification','check_sms_code',[session('user.mobile'),$data['code']]);
        if (!$check_sms_code) {
            $this->error('手机验证码验证失败，请重试');
        }
        // 通过验证,显示修改手机号码页面

        // 创建数据验证token
        $token = md5(uniqid());
        session('update_paypass_save_token',$token);

        return $this->fetch();
    }


    /**
     * 保存支付密码
     * @return mixed
     */
    public function save_paypass()
    {
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('update_password');
        }
        // 验证session
        if( empty(session('update_paypass_save_token')) ){
            $this->redirect('update_password');
        }
        // 获取数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'password' => 'require|token',
            'repassword' => 'require|/^[0-9]{6}$/',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'paypass');
        }
        // 验证密码是否相同
        if( $data['password'] !== $data['repassword'] ){
            $this->error('请输入相同的密码!','paypass');
        }

        // 验证通过,修改用户密码
        $save = api('member','Safe','updateUserPaypass',[session('user.id'),$data['repassword']]);
        if( $save !== true ){
            $this->error('保存失败,请重试!','paypass');
        }
        return $this->redirect('update_paypass_success');
    }


    /**
     * 修改支付密码成功
     * @return mixed
     */
    public function update_paypass_success()
    {
        return $this->fetch();
    }



    /**
     * 更换手机验证页面
     * @ps 更换手机号码只能采用原手机号码,邮箱地址进行更换
     * @return mixed
     */
    public function email()
    {
        // 查看修改绑定方式 1:原手机号码更换,2:邮箱地址更换,3:支付密码更换
        session('update_email_save_token',null);
        $type = input('type');
        if( $type != 2 && $type != 3  ){
            $type = 2;
        }
        $updateTpl = $type;
        if( $type == 2 ){
            // 查看用户绑定手机
            $bindM = api('member','User','verification',[session('user.id'),2]);
            $bindE = api('member','User','verification',[session('user.id'),3]);
            if( $bindM == true ){
                $updateTpl = 2;
            }else{
                // 查看是否设置邮箱
                if( $bindE == true ){
                    // 更换绑定手机号码,通过邮箱地址进行更换
                    $updateTpl = 2;
                }else{
                    // 支付登录密码
                    $updateTpl = 1;
                }
            }
        }elseif ( $type == 2 ){
            // 查看用户是否设置邮箱
            $bindE = api('member','User','verification',[session('user.id'),3]);
            $bindM = api('member','User','verification',[session('user.id'),2]);
            if( $bindE == true ){
                // 更换绑定手机号码,通过邮箱地址进行更换
                $updateTpl = 3;
            }else{
                // 查看是否设置手机号码
                $bindM = api('member','User','verification',[session('user.id'),2]);
                if( $bindM == true ){
                    $updateTpl = 2;
                }else{
                    // 支付登录密码
                    $updateTpl = 1;
                }
            }
        }

        if( $updateTpl == 2 ){
            $this->assign('bindMobile',$bindM);
            $this->assign('bindEmail',$bindE);
            return $this->fetch('email');
        }elseif($updateTpl == 3 ){
            $this->assign('bindEmail',$bindE);
            $this->assign('bindMobile',$bindM);
            return $this->fetch('update_mobile_3');
        }else{
            return $this->fetch('update_mobile_1');
        }

    }


    /**
     * 设置手机号码
     * @return mixed
     */
    public function update_email_set()
    {
        // 检查是否是post提交
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('member/Safe/email');
        }
        // 获取传过来的数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'email' => 'email',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'email');
        }
        // 验证是否是当前用户手机号码
        $isUser = $data['email'] == session('user.email') ? true : false;
        if( $isUser == false ){
            $this->error('Your mailbox validation failed!');
        }

        $codeData = session('mail_code');

        if (empty($codeData) || $codeData['mail'] != $data['email'] || $codeData['code'] != $data['code']) {
            $this->error('Mailbox verification code verification failed, please try again!');
        }

        // 创建数据验证token
        $token = md5(uniqid());
        session('update_email_save_token',$token);

        return $this->fetch();
    }


    /**
     * 保存新的手机号码
     * @return mixed
     */
    public function save_email()
    {
        if( request()->isPost() == false || request()->isPost() == null ){
            $this->redirect('email');
        }
        // 验证session
        if( empty(session('update_email_save_token')) ){
            $this->redirect('emaild');
        }
        // 获取数据
        $data = request()->post();
        // 数据验证
        $rule = [
            'email' => 'require|email',
            'code' => 'require',
        ];
        $vali = api('sys','Verification','valiCheck',[$rule,$data]);
        if( $vali['code'] == 0 ){
            $this->error($vali['error'],'email');
        }
        $codeData = session('mail_code');

        if (empty($codeData) || $codeData['mail'] != $data['email'] || $codeData['code'] != $data['code']) {
            $this->error('Mailbox verification code verification failed, please try again!');
        }

        // 查看邮箱账户是否存在
        $isExist = Db::name('users')->where('email',$data['email'])->where('transe',0)->find();
        if( !empty($isExist) ){
            $this->error('The current mailbox has already existed, please reselect!');
        }

        // 验证密码是否相同
        if( $data['email'] == session('user.email') ){
            $this->error('Modification failure: the modified mailbox is the same as the current mailbox!','email');
        }

        // 验证通过,修改用户手机号码
        $save = api('member','Safe','updateUserEmail',[session('user.id'),$data['email']]);
        if( $save !== true ){
            $this->error('Save failed, please try again!','email');
        }
        session('user.email',$data['email']);
        $this->success('Amend the success!');
    }


    public function _empty(){
        $this->redirect('email');
    }




}









