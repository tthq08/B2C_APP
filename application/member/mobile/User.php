<?php
// +----------------------------------------------------------------------
// | ThinkBiz System
// | 功能： 前台用户中心模块
// +----------------------------------------------------------------------
// | 版权所有 2013~2017 深圳市俊网网络有限公司 [ http://www.junnet.net ]
// +----------------------------------------------------------------------
// | 官方网站：http://www.junnet.net
// +----------------------------------------------------------------------
// | 作者: 吴跃忠 <357397264@qq.com>
// +----------------------------------------------------------------------


namespace app\member\mobile;

use think\Db;
use \app\sys\controller\Api;

class User extends Homebase
{


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $action_nologin = ['login','logout','signup','extend_reg','reset_pwd'];
        $action = request()->action();
        if( empty(session('user')) && !in_array($action, $action_nologin)){
            cookie('login_referer',request()->url());
            $this->redirect('shop/index/login');
        }

        if (!in_array($action, $action_nologin)) {
            $this->assign('user',session('user'));
        }
    }

    /**
     * 用户中心
     *
     */
    public function index(){

        // 获取用户购物车信息
        $cartList = Db::name('shop_cart')->alias('c')->join(config('prefix').'shop_goods g','c.goods =g.id')->field('c.id,c.goods_name,c.goods,g.thumb')->where('c.user_id',session('user.id'))->where('c.status',1)->order('add_time desc')->select();
        // 获取购物车商品数量
        $cartGoodsSum = Db::name('shop_cart')->where('user_id',session('user.id'))->where('status',1)->sum('goods_num');
        // 获取购物车总价格
        $cartGoodsPrice = Db::name('shop_cart')->where('user_id',session('user.id'))->where('status',1)->sum('shop_price');
        //================购物车信息
        // 获取推荐人
        $info = Db::name('users')->where('id',session('user.id'))->find();
        $this->assign('info',$info);
        if (is_array($info)&& !empty($info['introducer'])) {
            $tui = Db::name('users')->where('id',$info['introducer'])->value('nickname');

            $this->assign('tui',urldecode($tui));
        }
        // 获取收藏数
        $shouc = Db::query('SELECT count(status) AS shouc FROM tb_shop_goods_collect WHERE user_id='.session('user.id').' AND status=1');
        $this->assign('shouc',$shouc[0]['shouc']);

        // 查询店铺申请状态
        $is_check = Db::name('shop_goods_store')->where(['user_id'=>session('user.id')])->select();
        if(!empty($is_check)){
            $this->assign('is_check',$is_check[0]);
        }

        $this->assign('cartGoodsSum',$cartGoodsSum);
        $this->assign('cartGoodsPrice',priceFormat($cartGoodsPrice));
        $this->assign('cartList',$cartList);


        // 获取各个订单状态数
        $order1 = Db::name('shop_order') ->where(['status'=>1]) ->where('user_id',session('user.id')) ->count();
        $order3 = Db::name('shop_order') ->where(['status'=>3]) ->where('user_id',session('user.id')) ->count();
        $order4 = Db::name('shop_order') ->where(['status'=>4]) ->where('user_id',session('user.id')) ->count();
        $order5 = Db::name('shop_order') ->where(['status'=>5]) ->where('user_id',session('user.id')) ->count();
        $this->assign('order1',$order1);
        $this->assign('order3',$order3);
        $this->assign('order4',$order4);
        $this->assign('order5',$order5);

        // 谁关注了我
        $who_gz = Db::name('user_follow')->where(['user_r'=>session('user.id'),'status'=>1])->count();
        $this->assign('who_gz',$who_gz);

        // 获取粉丝数量 更新
        $FansNum = Db::name('users')->where('introducer',session('user.id'))->count();
        Db::name('users')->where(['id'=>session('user.id')])->update(['fans_num'=>$FansNum]);

        //查询关注数
        $follow_num = Db::name('user_follow')->where(['user'=>session('user.id'),'status'=>1])->count();
        $this->assign('follow_num',$follow_num);

        // 奖励金额
        $all_divided_into_price = Db::name('user_distribution')->where('user_id',session('user.id'))->sum('divided_into_price');
        if( empty($all_divided_into_price) ){
            $all_divided_into_price = 0;
        }
        $this->assign('all_divided_into_price',$all_divided_into_price);

        return $this->fetch();
    }

    /**
     * 个人资料编辑
     * @return mixed
     */
    public function editor(){
        $type = !empty(request()->param('type')) ? request()->param('type') : '';
        if( $type == '' ){
            $this->error('选择您要修改的位置');
        }
        switch ($type){
            case 'nickname':
                $this->assign('nickname',session('user.nickname'));
                break;
            case 'address':
                //获取省份
                $province = Api::getChildAddress(0);
                $city = Api::getChildAddress(session('user.province'));
                $district = Api::getChildAddress(session('user.city'));
                $this->assign('province',$province);
                $this->assign('city',$city);
                $this->assign('district',$district);
                $this->assign('user_province',session('user.province'));
                $this->assign('user_city',session('user.city'));
                $this->assign('user_district',session('user.district'));
                break;
            case 'mobile':
                $this->assign('mobile',session('user.mobile'));
                break;

            default :
                $this->error('您选择的信息不在可修改范围内');
        }
        $this->assign('type',$type);
        return $this->fetch();
    }


    public function edit_save(){
        //获取修改的地方
        $type = empty(request()->param('type')) ? '' : request()->param('type');
        if( $type == '' ){
            $this->error('选择您要修改的位置');
        }
        switch ($type){
            case 'sex':
                $sex = request()->param('sex');
                if( !isset($sex) ){
                    $this->error('性别不可为空');
                }
                $this->edit_sex(request()->param('sex'));
                break;
            case 'nickname':
                if( empty(request()->param('nickname')) ){
                    $this->error('昵称不可为空');
                }
                $this->edit_nickname(request()->param('nickname'));
                break;
            case 'mobile':
                if (empty( request()->param('mobile') )){
                    $this->error('手机号码不可为空');
                }
                // dump(request()->param('mobile'));die;
                $this->edit_mobile(request()->param('mobile'));
                break;
            case 'address':
                $province = !empty(request()->param('province')) ? request()->param('province') : 0;
                $city = !empty(request()->param('city')) ? request()->param('city') : 0;
                $district = !empty(request()->param('district')) ? request()->param('district') : 0;
                $this->edit_user_address($province,$city,$district);
                break;
            case 'birthday':
                $birthday = request()->param('birthday');
                if (empty( $birthday )){
                    $this->error('生日不可为空');
                }
                //检测日期是否真实
                $checkDate = checkDateIsValid($birthday);
                if( $checkDate === false ){
                    $this->error('日期格式错误');
                }
                $this->edit_birthday($birthday);
                break;
            case 'head_pic':
                $head_pic = request()->param('head_pic');
                if( file_exists(APP_PATH.'../public'.$head_pic) ){
                    $this->edit_head_pic($head_pic);
                }else{
                    echo $head_pic;
                    $this->error('头像文件不存在');
                }
                break;

            default:
                $this->error('选择错误');
        }
    }

    /**
     * 修改头像
     * @param varchar $head_pic
     * @return bool
     */
    protected function edit_head_pic($head_pic){
        //修改
        $update = Db::name('users')->where('id',session('user.id'))->update(['head_pic'=>$head_pic]);
        if( $update === false ){
            $this->error('修改失败');
        }
        //更新session
        session('user.head_pic',$head_pic);
        $this->success('修改成功');
    }

    /**
     * 修改性别
     * @param int $sex 性别
     * @return mixed
     */
    protected function edit_sex($sex){
        //修改
        $update = Db::name('users')->where('id',session('user.id'))->update(['sex'=>$sex]);
        if( $update === false ){
            $this->error('修改失败');
        }
        //更新session
        session('user.sex',$sex);
        $this->success('修改成功');
    }

    /**
     * 修改生日
     * @param int $birthday 生日
     * @return mixed
     */
    protected function edit_birthday($birthday){
        //修改
        $update = Db::name('users')->where('id',session('user.id'))->update(['birthday'=>$birthday]);
        if( $update === false ){
            $this->error('修改失败');
        }
        //更新session
        session('user.birthday',$birthday);
        $this->success('修改成功');
    }

    /**
     * 修改昵称
     * @param int $nickname
     * @return mixed
     */
    protected function edit_nickname($nickname){
        //修改
        $update = Db::name('users')->where('id',session('user.id'))->update(['nickname'=>$nickname]);
        if( $update === false ){
            $this->error('修改失败');
        }
        //更新session
        session('user.nickname',$nickname);
        $this->success('修改成功');
    }

    /**
     * 修改手机号码
     * @param int $mobile
     * @return mixed
     */
    protected function edit_mobile($mobile){
        $mobile = intval($mobile);
        if( strlen($mobile) == 11 ){
            //修改
            $update = Db::name('users')->where('id',session('user.id'))->update(['mobile'=>$mobile,'mobile_validated'=>1]);
            if( $update === false ){
                $this->error('修改失败');
            }
            //更新session
            session('user.mobile',$mobile);
            $this->success('修改成功');
        }else{
            $this->error('手机号码格式错误');
        }
    }

    /**
     * 修改常住地
     * @param int $nickname
     * @return mixed
     */
    protected function edit_user_address($province,$city,$district){
        $province = intval($province);
        $city = intval($city);
        $district = intval($district);
        //修改
        $update = Db::name('users')->where('id',session('user.id'))->update(['province'=>$province,'city'=>$city,'district'=>$district]);
        if( $update === false ){
            $this->error('修改失败');
        }
        //更新session
        session('user.province',$province);
        session('user.city',$city);
        session('user.district',$district);
        $this->success('修改成功');
    }


    /**
     * 用户基本信息页面
     */
    public function info(){
        $check_user = Db::name('user_check')->where(['user_id'=>session('user.id')])->find();
        $this->assign('check_user',$check_user);
        return $this->fetch();
    }
    /**
     * 保存用户基本信息
     */
    public function save_info(){
        if( request()->isPost() ){
            $postData = request()->post();
            //插入数据
            $insertData = [];
            if( isset($postData['head_pic']) && $postData['head_pic'] !== '' ){
                $insertData['head_pic'] = $postData['head_pic'];
            }
            if ( isset($postData['nickname']) && $postData['nickname'] !== '' ){
                $insertData['nickname'] = $postData['nickname'];
            }
            if ( isset($postData['qq']) && $postData['qq'] !== '' ){
                $insertData['qq'] = $postData['qq'];
            }
            if ( isset($postData['birthday']) && $postData['birthday'] !== '' ){
                $insertData['birthday'] = $postData['birthday'];
            }
            if ( isset($postData['sex']) && $postData['sex'] !== '' ){
                $insertData['sex'] = $postData['sex'];
            }
            if( count($insertData) > 0 ){
                $insert = Db::name('users')->where('id',session('user.id'))->update($postData);
                if( $insert === false ){
                    $this->error(lang('user_save_failed'));
                }
                //更新session
                $user = session('user');
                $user = array_merge($user,$insertData);
                session('user',$user);
                $this->success(lang('user_save_success'));
            }
            $this->error(lang('user_data_wrong'));
        }else{
            $this->error('');
        }
    }


    /**
     * 实名认证
     */
    public function name($st){
        $this->assign('st',$st);
        $userInfo = Db::name('user_check')->where(['user_id'=>session('user.id')])->find();
        // dump($storeInfo);
        $this->assign('userInfo',$userInfo);
        return $this->fetch();
    }

    // 保存实名认证 tb_user_check
    public function save_user_check($st){
        if( request()->isPost() ){
            $postData = request()->post();
            $postData['user_id'] = session('user.id');
            $postData['add_time'] = date('Y-m-d H:i:s');
            if($st=='add'){
                $save = Db::name('user_check')->insert($postData);
                if($save){
                    return ['status'=>1,'msg'=>'提交成功,等待管理员审核！'];
                }else{
                    return ['status'=>0,'msg'=>'提交失败,请重新提交！'];
                }
            }else{
                $postData['is_check'] = 0;
                $postData['check_msg'] = '';
                $postData['check_time'] = null;
                $save = Db::name('user_check')->where(['user_id'=>session('user.id')])->update($postData);
                if($save){
                    return ['status'=>1,'msg'=>'更新成功,等待管理员审核！'];
                }else{
                    return ['status'=>0,'msg'=>'更新失败,请重新提交！'];
                }
            }
        }
    }




    /**
     * 我的优惠券页面 未使用
     */
    public function coupon(){

        //获取优惠券信息
        $user_id = session('user.id');
        //获取未使用的优惠券
        $notUseCoupon = coupon()->userCoupon($user_id);
        //获取已经使用的优惠券
        $userUsedCoupon = coupon()->userUsedCoupon($user_id);
        //获取已经过期的优惠券
        $userTimedCoupon = coupon()->userTimedCoupon($user_id);

        //赋值
        $this->assign('notUseCoupon',$notUseCoupon);
        $this->assign('userUsedCoupon',$userUsedCoupon);
        $this->assign('userTimedCoupon',$userTimedCoupon);
        return $this->fetch();
    }

    /**
     * 我的优惠券页面  已使用
     */
    public function coupon1(){

        //获取优惠券信息
        $user_id = session('user.id');
        //获取未使用的优惠券
        $notUseCoupon = coupon()->userCoupon($user_id);
        //获取已经使用的优惠券
        $userUsedCoupon = coupon()->userUsedCoupon($user_id);
        //获取已经过期的优惠券
        $userTimedCoupon = coupon()->userTimedCoupon($user_id);

        //赋值
        $this->assign('notUseCoupon',$notUseCoupon);
        $this->assign('userUsedCoupon',$userUsedCoupon);
        $this->assign('userTimedCoupon',$userTimedCoupon);
        return $this->fetch();
    }

    /**
     * 我的优惠券页面  已过期
     */
    public function coupon2(){

        //获取优惠券信息
        $user_id = session('user.id');
        //获取未使用的优惠券
        $notUseCoupon = coupon()->userCoupon($user_id);
        //获取已经使用的优惠券
        $userUsedCoupon = coupon()->userUsedCoupon($user_id);
        //获取已经过期的优惠券
        $userTimedCoupon = coupon()->userTimedCoupon($user_id);

        //赋值
        $this->assign('notUseCoupon',$notUseCoupon);
        $this->assign('userUsedCoupon',$userUsedCoupon);
        $this->assign('userTimedCoupon',$userTimedCoupon);
        return $this->fetch();
    }


    // 推广注册
    public function extend_reg($sysid)
    {
        session('intro_sysid',$sysid);
        $this->assign('sysid',$sysid);
        return $this->fetch();
    }


    // 显示个人推广二维码
    public function qr_code()
    {
        $sysid = session('user.sysid');
        // dump(cookie('wechat'));
        $wexParam = session('weixin');
        $url = 'https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token='.$wexParam['access_token'];
        $data = ['expire_seconds'=>2592000,'action_name'=>"QR_SCENE",'action_info'=>["scene"=>['scene_id'=>$sysid]]];
        $back = httpRequest($url,'POST',json_encode($data));

        $back = json_decode($back,true);
        if (empty($back['ticket'])) {
            $config = $this->wexConfing;
            $url_access = 'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid='.$config['appid'].'&secret='.$config['appsecret'];
            $access_token = httpRequest($url_access,'GET');
            $access_token = json_decode($access_token,true);
            $access_token = $access_token['access_token'];
            session('weixin.access_token',$access_token);
            $url = 'https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token='.$access_token;
            $data = ['expire_seconds'=>2592000,'action_name'=>"QR_SCENE",'action_info'=>["scene"=>['scene_id'=>$sysid]]];
            $back = httpRequest($url,'POST',json_encode($data));

            $back = json_decode($back,true);
        }
        $date_last = date('Y-m-d', NOW_TIME+2592000);
        $this->assign('date_last',$date_last);
        $this->assign('ticket',$back['ticket']);
        return $this->fetch();
    }

    public function no_qr()
    {
        return $this->fetch();
    }

    // 忘记密码
    public function reset_pwd()
    {
        return $this->fetch();
    }



    /**
     * 粉丝列表
     *
     */
    public function fans(){

        $type = empty(request()->param('type')) ? '' : request()->param('type');
        if( $type == '' ){
//获取新的粉丝数量
            //查看是否存在排序规则
            $sort = empty(request()->param('sort')) ? '' : request()->param('sort');
            $this->assign('sort_l',$sort);
            $sort_d = '';
            if( $sort != '' ){
                //分析排序
                $sort = explode('_',$sort);
                if( $sort[0] == 'regtime'){
                    //根据用户注册时间排序
                    $sort_d = 'reg_time '.$sort[1];
                }elseif ( $sort[0] == 'buymoney' ){
                    $sort_d = 'total_amount '.$sort[1];
                }elseif ( $sort[0] == 'fansnum' ){
                    $sort_d = 'fans_num '.$sort[1];
                }
            }
            $sort[1] = empty($sort[1]) ? '' : $sort[1];
            $this->assign('sort',$sort[1]);
            if( $sort[1] == 'asc' ){
                $this->assign('sort_r','desc');
            }else{
                $this->assign('sort_r','asc');
            }

            $search = empty(request()->param('search')) ? '' : request()->param('search');
            $where = '';
            if( $search != '' ){
                $where = '`sysid` = '.$search;
            }
            //获取粉丝列表
            $fansList = Db::name('users')->field('sysid,head_pic,nickname,reg_time')->where('introducer',session('user.id'))->order($sort_d)->where($where)->select();

            //计算新粉丝数量
            $newFans = Db::name('users')->where('introducer',session('user.id'))->where('new_fans',1)->count();
            //计算新成交粉丝数量
            $newOrderFans = Db::name('users')->where('introducer',session('user.id'))->where('new_order>0')->count();
            //计算高价值粉丝数量
            $totalOrderFans = Db::name('users')->where('introducer',session('user.id'))->where('total_order>0')->count();
            if( request()->isAjax() == true ){
                return $fansList;
            }
            $this->assign('newFans',$newFans);
            $this->assign('newOrderFans',$newOrderFans);
            $this->assign('totalOrderFans',$totalOrderFans);
            $this->assign('fanslist',$fansList);
            return $this->fetch();
        }else{
            $type = explode('_',$type);
            $type = $type[0].'_'.$type[1];
            //获取粉丝列表
            $fansList = Db::name('users')->field('sysid,head_pic,nickname,reg_time')->where('introducer',session('user.id'))->where('`'.$type . '` > 0')->select();
            if( $type != 'total_order' ){
                $data = [
                    $type=>0,
                ];
                Db::name('users')->where('introducer',session('user.id'))->where('`'.$type . '` > 0')->update($data);
            }
            $this->assign('fanslist',$fansList);
            return $this->fetch('fans_2');
        }

    }

    /**
     * 消息中心
     * 显示最近的一条消息
     */
    public function news(){
        //获取最近的一条未读的交易消息，如果没有则显示暂未消息
        $order_message = order()->getNextOrderMessage(session('user.id'),'title');
        if( $order_message == '' ){
            $order_message = '暂无消息';
        }else{
            $order_message = $order_message['title'];
        }
        $this->assign('order_message',$order_message);
        //获取最近的一条通知消息，
        $notice_message_list = Db::name('notice_message')->where('status',0)->where('user_id',session('user.id'))->order(['add_time'=>'DESC'])->field('title,add_time')->find();
        if( $notice_message_list == '' ){
            $notice_message = '暂无消息';
            $notice_message_time = '';
        }else{
            $notice_message = $notice_message_list['title'];
            $notice_message_time = substr($notice_message_list['add_time'],0,10);
        }
        $this->assign('notice_message',$notice_message);
        $this->assign('notice_message_time',$notice_message_time);
        return $this->fetch();
    }

    /**
     * 交易消息列表
     */
    public function order_message_list(){
        //获取用户所有交易消息
        $orderMessageList = order()->getOrderMessage(session('user.id'),'title,message,add_time');
        $this->assign('orderMessageList',$orderMessageList);
        //修改所有交易消息为已读
        order()->setAllOrderMessageStatus(session('user.id'),1);
        return $this->fetch();
    }

    /**
     * 通知消息列表
     */
    public function notice_message_list(){
        //通知消息列表
        $noticeMessageList = Db::name('notice_message')->where('status > -1')->where('user_id',session('user.id'))->field('title,message,add_time')->order(['add_time'=>'DESC'])->select();
        $this->assign('noticeMessageList',$noticeMessageList);
        //修改所有通知消息为已读
        Db::name('notice_message')->where('user_id',session('user_id'))->update(['status'=>1]);
        return $this->fetch();
    }


    /**
     * 奖励页面
     */
    public function reward(){
        // 粉丝销量总提成：累计奖励
        $all_divided_into_price = Db::name('user_distribution')->where('user_id',session('user.id'))->sum('divided_into_price');
        if( empty($all_divided_into_price) ){
            $all_divided_into_price = 0;
        }
        $this->assign('all_divided_into_price',$all_divided_into_price);
        //获取粉丝总省钱金额:累计会员省钱
        $all_order_price = Db::name('user_distribution')->where('user_id',session('user.id'))->column('order_id');

        if( !empty($all_order_price) ){
            $all_order_price = implode(',',$all_order_price);
            $all_points_price = Db::name('shop_order')->where('id in('.$all_order_price.')')->sum('points_price');
            // 计算粉丝生成的总销量：粉丝销量
            $all_fans_money = Db::name('shop_order')->where('id in('.$all_order_price.')')->sum('payable_price+postage-change_mny');

        }
        $all_points_price = empty($all_points_price) ? 0 : $all_points_price;
        $all_fans_money = empty($all_fans_money) ? 0 : $all_fans_money;
        $this->assign('all_points_price',$all_points_price);
        $this->assign('all_fans_money',$all_fans_money);

        // ==============
        // 获取可提现的金额
        $can_withdrawals = Db::name('users')->where('id',session('user.id'))->sum('user_money');
        $this->assign('can_withdrawals',$can_withdrawals);

        // 获取用户已提现金额
        $withdrawals = Db::name('user_withdrawals')->where('status < 2')->where('user_id',session('user.id'))->order('id desc')->find();
        $status_str = '';
        if(empty($withdrawals)){
            $withdrawalsed = 0;
        }else{
            $withdrawalsed = $withdrawals['money'];
            if( $withdrawals['status'] == 0 ){
                $status_str = '申请中';
            }elseif( $withdrawals['status'] == 1 ){
                $status_str = '申请成功';
            }elseif( $withdrawals['status'] == 2 ){
                $status_str = '申请失败';
            }
        }
        $this->assign('status_str',$status_str);
        $this->assign('withdrawalsed',$withdrawalsed);

        // ================
        $search = empty(request()->param('search')) ? '' : request()->param('search');
        if( empty($search) ){
            // 没有搜索项
            $pageRow = tb_config('list_row',1,1);
            $rewardOrderList = Db::name('user_distribution')->where('user_id',session('user.id'))->paginate($pageRow);
        }else{
            // 有搜索项
            // 查找用户信息
            $userLists = Db::name('users') ->where('nickname','like','%'.$search.'%')->column('id');
            $condition = ' `user_r` in("'.implode(',',$userLists).'") or `order_sn` like "%'.$search.'%" ';
            $rewardOrderList = Db::name('user_distribution')->where('user_id',session('user.id'))->where($condition)->select();
        }
        $rewardOrderArr = [];
        $i = 0;
        foreach ($rewardOrderList as $order){
            $rewardOrderArr[$i] = $order;
            // 用户sysid
            $rewardOrderArr[$i]['sysid'] = getTableValue('users','id='.$order['user_r'],'sysid');
            // 获取订单商品
            $orderGoods = Db::name('shop_order_goods')->where('order_id',$order['order_id'])->field('goods_id,goods_name,spec_title,goods_num,pay_price')->select();
            $orderGoodsList = [];
            $t = 0;
            foreach ($orderGoods as $goods){
                $orderGoodsList[$t] = $goods;
                $orderGoodsList[$t]['thumb'] = getTableValue('shop_goods','id='.$goods['goods_id'],'thumb');
                $t++;
            }
            $rewardOrderArr[$i]['goods_list'] = $orderGoodsList;
            $i++;
        }
        $this->assign('rewardOrderList',$rewardOrderArr);
        // 获取奖励订单
        return $this->fetch();
    }

    /**
     * 我的收藏页面--商品
     */
    public function goods_collect(){
        $collectList = Db::name('shop_goods_collect')->where('user_id',session('user.id'))->where('status',1)->paginate(tb_config('list_row',1,1));
        $this->assign('page',$collectList->render());
        $this->assign('goods_collect_list',$collectList);
        return $this->fetch();
    }

    /**
     * 我的收藏页面--商品
     */
    public function del_goods_collect(){
        $id = intval(request()->param('id'));
        if( $id == 0 ){
            $this->error(lang('user_collect_goods_is_failed'));
        }
        //删除
        try{
            Db::name('shop_goods_collect')->where('id',$id)->where('user_id',session('user.id'))->update(['status'=>0]);
        }catch (\Exception $exception){
            return $this->error($exception->getMessage());
        }
        return $this->success(lang('delete_success'));
    }

}